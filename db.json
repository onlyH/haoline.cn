{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"themes/next-reloaded/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/hj.png","path":"images/hj.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/snow.js","path":"js/snow.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/wechat_channel.jpg","path":"images/wechat_channel.jpg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/fancybox/LICENSE","path":"lib/fancybox/LICENSE","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/fancybox/README.md","path":"lib/fancybox/README.md","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/crash_cheat.js","path":"js/src/crash_cheat.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/fireworks.js","path":"js/src/fireworks.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/fancybox/source/jquery.fancybox.min.css","path":"lib/fancybox/source/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/fancybox/source/jquery.fancybox.min.js","path":"lib/fancybox/source/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"90a3c5e9170afd21bc5ac98652f1623a7c0bf3df","modified":1625124654543},{"_id":"themes/next-reloaded/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1625021354185},{"_id":"themes/next-reloaded/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1625021354185},{"_id":"themes/next-reloaded/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1625021354185},{"_id":"themes/next-reloaded/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1625112567042},{"_id":"themes/next-reloaded/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1625021354190},{"_id":"themes/next-reloaded/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1625021354190},{"_id":"themes/next-reloaded/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1625021354190},{"_id":"themes/next-reloaded/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1625021354191},{"_id":"themes/next-reloaded/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1625021354192},{"_id":"themes/next-reloaded/_config.yml","hash":"23befa81f23732b0f988c522462063db9f079582","modified":1625129017295},{"_id":"themes/next-reloaded/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1625021354223},{"_id":"themes/next-reloaded/gulpfile.js","hash":"ea93a3bb3281a0c9e0086f8388b3ac9cb3a21a39","modified":1625038735647},{"_id":"source/_posts/17.md","hash":"b47696f51fa8bd325ee86cbcf044d74c4b651e71","modified":1625124654543},{"_id":"source/_posts/babel运行.md","hash":"43158b4978c871d48f0b660927c5c244d93185d3","modified":1625124654544},{"_id":"source/_posts/axios1.md","hash":"52ff4801129dc87543d06545240e78174e922356","modified":1625124654544},{"_id":"source/_posts/autocomplete.md","hash":"93bd4b2f0d73aa60cd8ea8ef062c3b86a7989e05","modified":1625124654544},{"_id":"source/_posts/Iterator-forOf.md","hash":"da784bcb0f05fb26e4f9d08bb14e6473d6e8c343","modified":1625124654544},{"_id":"source/_posts/css修改select样式.md","hash":"23a913405630de4924f2de9bddffa5b10cd88681","modified":1625124654545},{"_id":"source/_posts/decorator.md","hash":"e6abe8408e51a03793757383ee38f499e6621222","modified":1625124654545},{"_id":"source/_posts/css奇淫技巧.md","hash":"4de7de91ee718bfdcee41f41f6f52bb0a0d6de36","modified":1625124654545},{"_id":"source/_posts/es6.md","hash":"3d99871f77544f1da5a4c4c84eb6deaf8263333e","modified":1625124654546},{"_id":"source/_posts/es6-proxy.md","hash":"de3602d899a14213a5c6d01610b43bf814dd3b8f","modified":1625124654545},{"_id":"source/_posts/github访问代理映射.md","hash":"8a852f7b246e63c51fc74b5b65124473ed1f0d3b","modified":1625225404692},{"_id":"source/_posts/generator.md","hash":"932afbd81377b46f6e66cf45d20d77c2fe63d07f","modified":1625225277599},{"_id":"source/_posts/hexo.md","hash":"e0aece9da48e3d68bd2904e6681577959f2c8f87","modified":1625124654547},{"_id":"source/_posts/gulp.md","hash":"62006c762fb9ec09e0b6030b2766a9df64470431","modified":1625124654547},{"_id":"source/_posts/html组件.md","hash":"a5a36c679a28485d8b0328aa91375537411c15ab","modified":1625124654547},{"_id":"source/_posts/js八道题.md","hash":"b822395f9048bfa576ca68eba652a8b09ef27fd4","modified":1625124654548},{"_id":"source/_posts/js日常.md","hash":"f93278e5345dc7fa1e8badb4d6da568ed60d10ba","modified":1625124654548},{"_id":"source/_posts/jsonParse.md","hash":"a70532b4519e212ceaf4e221933298e2092ebd77","modified":1625124654547},{"_id":"source/_posts/js五道题.md","hash":"654121065fb1370f2a9b9a3fc7a2d03d7daafc78","modified":1625124654548},{"_id":"source/_posts/js替换json对象中的键名.md","hash":"c4a0575b782001adf5e7efc35c21f2d4e132c47f","modified":1625225369192},{"_id":"source/_posts/js条件语句.md","hash":"1563f2eea720ea704879a42539f4579b309e5e31","modified":1625124654549},{"_id":"source/_posts/promise.md","hash":"305473e4352b11f4e7b07dd7812259a62fe77c2d","modified":1625124654550},{"_id":"source/_posts/module.md","hash":"0328abb0ce9333113469a6e5617d81ffa7c8f246","modified":1625225369199},{"_id":"source/_posts/js高阶函数.md","hash":"bdca783bd56c9fd0acd0e4bde929089dd544bda3","modified":1625124654549},{"_id":"source/_posts/mac编辑器.md","hash":"592890f0b09131c11f9f2cbd616ed2f7c900423e","modified":1625124654549},{"_id":"source/_posts/rgb转为16进制.md","hash":"d3237d2aa2822424cb45f6dd0f4056f39a69473e","modified":1625124654550},{"_id":"source/_posts/slot.md","hash":"5fe05f76df1be42d5ce9af2311ee188f7b4149b5","modified":1625124654550},{"_id":"source/_posts/title.md","hash":"b91cdff866b0f6bf219bbb330477faec67aa1b33","modified":1625124654551},{"_id":"source/_posts/this.md","hash":"2775216b28c371167644ef44744f1ab7b1d3f3c6","modified":1625225369182},{"_id":"source/_posts/tab切换.md","hash":"ec85dfe6da9d9fc2e59707beb08fee799975ffc9","modified":1625225369165},{"_id":"source/_posts/vue-router.md","hash":"b63bce948528142f474fdc7d98267911c1ebb000","modified":1625124654551},{"_id":"source/_posts/vue-动态组件.md","hash":"8da369e126698500083208fb8f13c42d4aa9e1ed","modified":1625124654552},{"_id":"source/_posts/vue.md","hash":"564f92b2a58a7e587bb17ecad1b6ce1f3d16bb1c","modified":1625124654552},{"_id":"source/_posts/vue3-ts.md","hash":"f961ead7cdd84a887733019c99cb3e39bba92c95","modified":1625124654552},{"_id":"source/_posts/vue3-新特性.md","hash":"50e9e1919e1ff18b72be3877a9e4d6a401187c55","modified":1625640613133},{"_id":"source/_posts/vue_upfile.md","hash":"c91f9896570c843f3e922bd0f4453f4069636d2e","modified":1625124654554},{"_id":"source/_posts/webpack-babel-core.md","hash":"5f3949faffefedc184658cdb78e555b55d8fccd2","modified":1625124654555},{"_id":"source/_posts/webpack.md","hash":"2cd6934afd36e0144bc9c85f103caffdc8c7450d","modified":1625124654555},{"_id":"source/_posts/vue下拉框.md","hash":"288a08d22856cc05fd4bb73dbdf0b9012de90b8a","modified":1625124654555},{"_id":"source/_posts/webpack端口.md","hash":"d850cc4039a561d270dc99b6c5b7b7a7d23b8944","modified":1625124654555},{"_id":"source/_posts/上传多个file文件.md","hash":"8b3a7ca84ebc6885e1cd60e3092ade9b8cc580a4","modified":1625124654556},{"_id":"source/_posts/作用域.md","hash":"7080f9e9191795842f66071d6a80c6afc14f7858","modified":1625124654556},{"_id":"source/_posts/使用blob下载文件.md","hash":"59c337a9c300490f0118e2d60b368e1af05f5b24","modified":1625452638992},{"_id":"source/_posts/函数作为参数.md","hash":"09a2a345bc0356248cc5d7ab4effbefe5fb68639","modified":1625124654557},{"_id":"source/_posts/动态添加属性.md","hash":"8c74279e51723c03b14fde6f93b372edd8104be1","modified":1625537238870},{"_id":"source/_posts/内置函数.md","hash":"6622487d3cb28ce0223ac82c5ee828010d24cec0","modified":1625124654557},{"_id":"source/_posts/变量.md","hash":"75b91963a0fbf5ca22ecc58c4e69508cf800be66","modified":1625124654558},{"_id":"source/_posts/回调函数.md","hash":"5f10bc4711c87d98250354f977cfeb3d89220f3b","modified":1625124654558},{"_id":"source/_posts/在项目中使用二次元（live2d）.md","hash":"343d79d6af682fc3c504a0b6414244fb6493d4c1","modified":1625134920241},{"_id":"source/_posts/垃圾回收.md","hash":"b9c2bf77ac9a18638b31dd5fc899d859b075109e","modified":1625124654558},{"_id":"source/_posts/封装运动1.md","hash":"8fae7d7b26b67a58d49ebd8a8c0aa17858ff5086","modified":1625452910391},{"_id":"source/_posts/异步回调.md","hash":"d6f52a598de0e71d33156438a296d6d892ae26c2","modified":1625452910428},{"_id":"source/_posts/显示下拉.md","hash":"1ae733ead69df6c8c0a7c5d4a190cf161165cdbe","modified":1625124654560},{"_id":"source/_posts/截取字符串.md","hash":"86d8dffc80e2dabd0f50683fc54db8a4fd642437","modified":1625453016163},{"_id":"source/_posts/改进-select.md","hash":"f0c09eae96db3d7ef7f0d13218b2e7c6b4ba1657","modified":1625225369173},{"_id":"source/_posts/点击空白区域关闭下拉框.md","hash":"77f5a18507ffbb338f7948d73e11e1cfd1c3e8c6","modified":1625567623511},{"_id":"source/_posts/表单验证.md","hash":"6bcd5d9c8fee377fb463515b9955d60483e3dd65","modified":1625640599410},{"_id":"source/_posts/类与对象.md","hash":"a6fecbadf20814bf508f4060b6ed707c4410b0b0","modified":1625126623452},{"_id":"source/_posts/表单验证滚动.md","hash":"35c548637144c7796c0902eda9453babf69e053e","modified":1625124654560},{"_id":"source/_posts/购物车项目.md","hash":"fc4813117b52bab6657db42d8d0e9fc7b012a116","modified":1625124654560},{"_id":"source/_posts/逻辑运算符.md","hash":"eb8c41841ca204742f3a5e07506276f352818a07","modified":1625124654561},{"_id":"source/_posts/闭包.md","hash":"4b690567ba36ebca388e282319a97f06f03f4067","modified":1625124654561},{"_id":"source/_posts/遍历对象.md","hash":"5430093a66a091c3f6403709ddb27bc11d2662f1","modified":1625124654561},{"_id":"source/about/index.md","hash":"52c011595800a7ca5ce36a5e8ac8d0683346788d","modified":1625124654562},{"_id":"source/tags/index.md","hash":"6bab61a824909d418fa8b0a2551f48601ae29151","modified":1625124654563},{"_id":"source/_data/styles.styl","hash":"47008dd57b41f5902fff311b38f5a8c2fcd10c05","modified":1625129133726},{"_id":"source/categories/index.md","hash":"788483f41f6b0772dcdc983525198475ecaa34de","modified":1625124654562},{"_id":"themes/next-reloaded/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1625021354186},{"_id":"themes/next-reloaded/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1625021354186},{"_id":"themes/next-reloaded/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1625021354188},{"_id":"themes/next-reloaded/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1625021354188},{"_id":"themes/next-reloaded/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1625021354188},{"_id":"themes/next-reloaded/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1625021354188},{"_id":"themes/next-reloaded/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1625021354189},{"_id":"themes/next-reloaded/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1625021354189},{"_id":"themes/next-reloaded/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1625021354189},{"_id":"themes/next-reloaded/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1625021354189},{"_id":"themes/next-reloaded/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1625021354189},{"_id":"themes/next-reloaded/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1625021354192},{"_id":"themes/next-reloaded/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1625021354193},{"_id":"themes/next-reloaded/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1625021354193},{"_id":"themes/next-reloaded/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1625021354193},{"_id":"themes/next-reloaded/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1625021354194},{"_id":"themes/next-reloaded/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1625021354194},{"_id":"themes/next-reloaded/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1625021354194},{"_id":"themes/next-reloaded/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1625021354194},{"_id":"themes/next-reloaded/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1625021354199},{"_id":"themes/next-reloaded/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1625021354199},{"_id":"themes/next-reloaded/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1625021354199},{"_id":"themes/next-reloaded/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1625021354199},{"_id":"themes/next-reloaded/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1625021354200},{"_id":"themes/next-reloaded/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1625021354200},{"_id":"themes/next-reloaded/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1625021354201},{"_id":"themes/next-reloaded/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1625021354200},{"_id":"themes/next-reloaded/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1625021354201},{"_id":"themes/next-reloaded/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1625021354200},{"_id":"themes/next-reloaded/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1625021354201},{"_id":"themes/next-reloaded/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1625021354201},{"_id":"themes/next-reloaded/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1625021354201},{"_id":"themes/next-reloaded/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1625021354202},{"_id":"themes/next-reloaded/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1625021354202},{"_id":"themes/next-reloaded/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1625021354202},{"_id":"themes/next-reloaded/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1625021354203},{"_id":"themes/next-reloaded/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1625021354203},{"_id":"themes/next-reloaded/languages/zh-CN.yml","hash":"3ae91232e2292c222a2586479b2b5a5863fcf0bf","modified":1625039545331},{"_id":"themes/next-reloaded/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1625021354202},{"_id":"themes/next-reloaded/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1625021354203},{"_id":"themes/next-reloaded/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1625021354203},{"_id":"themes/next-reloaded/layout/_layout.swig","hash":"c126c5aedb820509ad4bfe39eb66e330b6359c03","modified":1625135643490},{"_id":"themes/next-reloaded/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1625021354222},{"_id":"themes/next-reloaded/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1625021354222},{"_id":"themes/next-reloaded/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1625021354223},{"_id":"themes/next-reloaded/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1625021354223},{"_id":"themes/next-reloaded/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1625021354222},{"_id":"themes/next-reloaded/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1625132751861},{"_id":"themes/next-reloaded/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1625021354229},{"_id":"source/_posts/img.png","hash":"6c70c0eaad7b8f5dfccb55a3cab235f2f2a10c94","modified":1625639306261},{"_id":"themes/next-reloaded/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1625021354192},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1625021354187},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1625021354187},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1625021354187},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1625021354187},{"_id":"themes/next-reloaded/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1625021354195},{"_id":"themes/next-reloaded/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1625021354195},{"_id":"themes/next-reloaded/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1625021354195},{"_id":"themes/next-reloaded/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1625021354196},{"_id":"themes/next-reloaded/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1625021354196},{"_id":"themes/next-reloaded/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1625021354196},{"_id":"themes/next-reloaded/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1625021354197},{"_id":"themes/next-reloaded/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1625021354197},{"_id":"themes/next-reloaded/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1625021354197},{"_id":"themes/next-reloaded/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1625021354197},{"_id":"themes/next-reloaded/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1625021354198},{"_id":"themes/next-reloaded/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1625021354198},{"_id":"themes/next-reloaded/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1625021354198},{"_id":"themes/next-reloaded/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1625021354205},{"_id":"themes/next-reloaded/layout/_partials/footer.swig","hash":"02c32c550b7b12b6a06453fb438a4092225702ef","modified":1625040996918},{"_id":"themes/next-reloaded/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1625021354208},{"_id":"themes/next-reloaded/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1625021354209},{"_id":"themes/next-reloaded/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1625021354211},{"_id":"themes/next-reloaded/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1625021354212},{"_id":"themes/next-reloaded/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1625021354212},{"_id":"themes/next-reloaded/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1625021354212},{"_id":"themes/next-reloaded/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1625021354214},{"_id":"themes/next-reloaded/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1625021354214},{"_id":"themes/next-reloaded/layout/_macro/my-copyright.swig","hash":"3a6c75bd431eafe581c68ccdaf281dc2358cdc76","modified":1625040635080},{"_id":"themes/next-reloaded/layout/_macro/passage-end-tag.swig","hash":"f29b50d83bcdc9e70696b6a8a8917d8b2ad4be10","modified":1625038367987},{"_id":"themes/next-reloaded/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1625021354204},{"_id":"themes/next-reloaded/layout/_macro/post.swig","hash":"0572fcda97be2e05b2527dade4aed6766d73c4b2","modified":1625040497328},{"_id":"themes/next-reloaded/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1625021354205},{"_id":"themes/next-reloaded/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1625021354215},{"_id":"themes/next-reloaded/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1625021354218},{"_id":"themes/next-reloaded/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1625021354219},{"_id":"themes/next-reloaded/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1625021354219},{"_id":"themes/next-reloaded/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1625021354232},{"_id":"themes/next-reloaded/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1625021354248},{"_id":"themes/next-reloaded/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1625021354261},{"_id":"themes/next-reloaded/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1625021354254},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1625021354255},{"_id":"themes/next-reloaded/source/images/alipay.png","hash":"2725ba603b545a5bf4830787bf8a4d386ef58f8e","modified":1625022951841},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1625021354255},{"_id":"themes/next-reloaded/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1625021354256},{"_id":"themes/next-reloaded/source/images/avatar.jpg","hash":"d6bd03336236bbb8acf96931fc3220eafb96d326","modified":1625038631629},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1625021354256},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1625021354256},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1625021354257},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1625021354256},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1625021354257},{"_id":"themes/next-reloaded/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1625021354257},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1625021354257},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1625021354258},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1625021354258},{"_id":"themes/next-reloaded/source/images/hj.png","hash":"3d68da1007941f4715ae592808317df8f7f9d01e","modified":1625022262896},{"_id":"themes/next-reloaded/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1625021354258},{"_id":"themes/next-reloaded/source/images/wechatpay.png","hash":"0011ef23a6e3538ed4a3b669f8b1c3b3ac921af9","modified":1625022985043},{"_id":"themes/next-reloaded/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1625021354258},{"_id":"themes/next-reloaded/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1625021354259},{"_id":"themes/next-reloaded/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1625021354259},{"_id":"themes/next-reloaded/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1625021354259},{"_id":"themes/next-reloaded/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1625021354259},{"_id":"themes/next-reloaded/source/js/snow.js","hash":"c857e3c76a848859fa27fca63f7f1b53865db230","modified":1625135429113},{"_id":"themes/next-reloaded/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1625021354260},{"_id":"themes/next-reloaded/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1625021354224},{"_id":"themes/next-reloaded/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1625021354228},{"_id":"themes/next-reloaded/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1625021354228},{"_id":"themes/next-reloaded/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1625021354229},{"_id":"themes/next-reloaded/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1625021354229},{"_id":"themes/next-reloaded/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1625021354227},{"_id":"themes/next-reloaded/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1625021354227},{"_id":"themes/next-reloaded/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1625021354227},{"_id":"themes/next-reloaded/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1625021354228},{"_id":"themes/next-reloaded/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1625021354228},{"_id":"themes/next-reloaded/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1625021354229},{"_id":"themes/next-reloaded/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1625021354230},{"_id":"themes/next-reloaded/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1625021354230},{"_id":"themes/next-reloaded/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1625021354230},{"_id":"themes/next-reloaded/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1625021354230},{"_id":"themes/next-reloaded/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1625021354230},{"_id":"themes/next-reloaded/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1625021354231},{"_id":"themes/next-reloaded/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1625021354231},{"_id":"themes/next-reloaded/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1625021354231},{"_id":"themes/next-reloaded/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1625021354231},{"_id":"source/_posts/表单验证/表单验证.png","hash":"ad62f69c8a2eccb3283cb86bbac461ad9821b42f","modified":1625639286740},{"_id":"themes/next-reloaded/source/images/wechat_channel.jpg","hash":"01acef5675fe9251f9c5dd30321058c6987f6c56","modified":1625023429933},{"_id":"themes/next-reloaded/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1625021354206},{"_id":"themes/next-reloaded/layout/_partials/head/head.swig","hash":"cba442e8e01e211a6dbef51d0f96334b5241c74d","modified":1625048425043},{"_id":"themes/next-reloaded/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1625021354207},{"_id":"themes/next-reloaded/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1625021354207},{"_id":"themes/next-reloaded/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1625021354207},{"_id":"themes/next-reloaded/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1625021354207},{"_id":"themes/next-reloaded/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1625021354208},{"_id":"themes/next-reloaded/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1625021354208},{"_id":"themes/next-reloaded/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1625021354208},{"_id":"themes/next-reloaded/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1625021354209},{"_id":"themes/next-reloaded/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1625021354209},{"_id":"themes/next-reloaded/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1625021354210},{"_id":"themes/next-reloaded/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1625021354210},{"_id":"themes/next-reloaded/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1625021354210},{"_id":"themes/next-reloaded/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1625021354210},{"_id":"themes/next-reloaded/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1625021354211},{"_id":"themes/next-reloaded/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1625021354211},{"_id":"themes/next-reloaded/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1625021354210},{"_id":"themes/next-reloaded/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1625021354212},{"_id":"themes/next-reloaded/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1625021354213},{"_id":"themes/next-reloaded/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1625021354213},{"_id":"themes/next-reloaded/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1625021354213},{"_id":"themes/next-reloaded/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1625021354213},{"_id":"themes/next-reloaded/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1625021354214},{"_id":"themes/next-reloaded/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1625021354215},{"_id":"themes/next-reloaded/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1625021354215},{"_id":"themes/next-reloaded/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1625021354215},{"_id":"themes/next-reloaded/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1625021354216},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1625021354216},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1625021354217},{"_id":"themes/next-reloaded/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1625021354217},{"_id":"themes/next-reloaded/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1625021354217},{"_id":"themes/next-reloaded/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1625021354217},{"_id":"themes/next-reloaded/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1625021354216},{"_id":"themes/next-reloaded/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1625021354216},{"_id":"themes/next-reloaded/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1625021354218},{"_id":"themes/next-reloaded/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1625021354218},{"_id":"themes/next-reloaded/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1625021354218},{"_id":"themes/next-reloaded/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1625021354219},{"_id":"themes/next-reloaded/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1625021354220},{"_id":"themes/next-reloaded/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1625021354220},{"_id":"themes/next-reloaded/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1625021354220},{"_id":"themes/next-reloaded/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1625021354220},{"_id":"themes/next-reloaded/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1625021354221},{"_id":"themes/next-reloaded/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1625021354221},{"_id":"themes/next-reloaded/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1625021354221},{"_id":"themes/next-reloaded/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1625021354222},{"_id":"themes/next-reloaded/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1625021354221},{"_id":"themes/next-reloaded/source/css/_custom/custom.styl","hash":"f028234a857a614ab746e2e73ae83a2c65384602","modified":1625044415184},{"_id":"themes/next-reloaded/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1625021354253},{"_id":"themes/next-reloaded/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1625021354254},{"_id":"themes/next-reloaded/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1625021354254},{"_id":"themes/next-reloaded/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1625021354254},{"_id":"themes/next-reloaded/source/css/_variables/base.styl","hash":"73b331863f00152e7d7255e2025bf00d9c363200","modified":1625108090050},{"_id":"themes/next-reloaded/source/lib/canvas-nest/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1625035526378},{"_id":"themes/next-reloaded/source/lib/canvas-nest/README.md","hash":"6964aecdc62466e6b529f6887558669925a36bc6","modified":1625035526378},{"_id":"themes/next-reloaded/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"6b4437a9cd8aa04329cc6220a595acfe1fb9b598","modified":1625035526378},{"_id":"themes/next-reloaded/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1625035526378},{"_id":"themes/next-reloaded/source/lib/fancybox/.bower.json","hash":"9c0e38750e26eb9e83e2b5ab9e069b66f0965ce4","modified":1625128746108},{"_id":"themes/next-reloaded/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1625128746109},{"_id":"themes/next-reloaded/source/lib/fancybox/LICENSE","hash":"7713a1753ce88f2c7e6b054ecc8e4c786df76300","modified":1625128746110},{"_id":"themes/next-reloaded/source/lib/fancybox/README.md","hash":"675189c5c79e391d6934d690370f6a648ed4653f","modified":1625128746110},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1625021354264},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1625021354264},{"_id":"themes/next-reloaded/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1625021354260},{"_id":"themes/next-reloaded/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1625021354260},{"_id":"themes/next-reloaded/source/js/src/crash_cheat.js","hash":"3f603aabae984e32b82e1a3cdae2dc794fb774ab","modified":1625131215311},{"_id":"themes/next-reloaded/source/js/src/fireworks.js","hash":"66f1876160849093fdec6ea7a29a14569ccd478f","modified":1625045830572},{"_id":"themes/next-reloaded/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1625021354224},{"_id":"themes/next-reloaded/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1625021354225},{"_id":"themes/next-reloaded/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1625021354225},{"_id":"themes/next-reloaded/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1625021354225},{"_id":"themes/next-reloaded/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1625021354226},{"_id":"themes/next-reloaded/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1625021354226},{"_id":"themes/next-reloaded/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1625021354226},{"_id":"themes/next-reloaded/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1625021354226},{"_id":"themes/next-reloaded/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1625021354226},{"_id":"themes/next-reloaded/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1625021354227},{"_id":"themes/next-reloaded/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1625021354227},{"_id":"source/_posts/vue3-新特性/生命周期.png","hash":"a90a983498aa851c6957c376cfd97670ea80e601","modified":1625124654554},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/FETCH_HEAD","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625035551030},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1625021354232},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1625021354233},{"_id":"themes/next-reloaded/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1625021354233},{"_id":"themes/next-reloaded/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1625021354237},{"_id":"themes/next-reloaded/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1625021354241},{"_id":"themes/next-reloaded/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1625021354241},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1625021354244},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/buttons.styl","hash":"1f071954892b9bfc777f06b31a9c0980e22f8e8c","modified":1625224714265},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1625021354244},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1625021354246},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1625021354246},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1625021354246},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1625021354246},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1625021354248},{"_id":"themes/next-reloaded/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1625021354249},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1625021354249},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1625021354250},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1625021354250},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1625021354250},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1625021354250},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1625021354251},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1625021354251},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1625021354251},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1625021354251},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1625021354251},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1625021354252},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1625021354252},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1625021354252},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1625021354252},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1625021354253},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1625021354253},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1625021354253},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1625119898371},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/config","hash":"78c4459d066ad795856608d603d780b53488073d","modified":1625119898369},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1625035524521},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/index","hash":"1b00794c98a7b36e8aa6a54bcdf9c45dc55b13d7","modified":1625119898361},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/packed-refs","hash":"80eecf0c5c7f21b2678dc1c329f74de19b6a3a67","modified":1625035526359},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1625035526378},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1625128746095},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1625128741350},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/config","hash":"6d27bad8831d14b10d7b775812c49acbe18b2af4","modified":1625128746104},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/index","hash":"8d7e66e6878260bf37fef793288f352049fa86a1","modified":1625128746120},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/packed-refs","hash":"b6ffcdb23c4f9b3e5576fe104e8596ea71603c84","modified":1625128746082},{"_id":"themes/next-reloaded/source/lib/fancybox/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1625128746109},{"_id":"themes/next-reloaded/source/lib/fancybox/source/jquery.fancybox.css","hash":"b6964babd10efdeff086f91822b59c810a06d43d","modified":1625128746112},{"_id":"themes/next-reloaded/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1625128746113},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1625021354263},{"_id":"themes/next-reloaded/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1625128746115},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1625021354262},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1625021354263},{"_id":"themes/next-reloaded/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1625021354233},{"_id":"themes/next-reloaded/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1625021354234},{"_id":"themes/next-reloaded/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1625021354233},{"_id":"themes/next-reloaded/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1625021354234},{"_id":"themes/next-reloaded/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1625021354234},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1625021354234},{"_id":"themes/next-reloaded/source/css/_common/components/post/my-post-copyright.styl","hash":"1a510f995e665b28d85ba4d169b824276c40e4f3","modified":1625040379441},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1625021354235},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1625021354235},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1625021354235},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1625021354235},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-header.styl","hash":"7cb8e8460f86601d3f8be5122e82bdb189379ad9","modified":1625225006269},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1625021354235},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1625021354236},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1625021354236},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1625021354236},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-reward.styl","hash":"e59d2badcef8f66b3069b6c70009342997560ef4","modified":1625041195178},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1625021354237},{"_id":"themes/next-reloaded/source/css/_common/components/post/post.styl","hash":"5fc14f037ffc2653f32e8ea4bedfbbd6908b5c03","modified":1625040525912},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1625021354238},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1625021354237},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1625021354238},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1625021354238},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1625021354238},{"_id":"themes/next-reloaded/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1625021354239},{"_id":"themes/next-reloaded/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1625021354240},{"_id":"themes/next-reloaded/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1625021354240},{"_id":"themes/next-reloaded/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1625021354240},{"_id":"themes/next-reloaded/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1625021354240},{"_id":"themes/next-reloaded/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1625021354240},{"_id":"themes/next-reloaded/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1625021354241},{"_id":"themes/next-reloaded/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1625021354241},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1625021354242},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1625021354242},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1625021354242},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1625021354242},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1625021354242},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1625021354243},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1625021354243},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1625021354243},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar.styl","hash":"e53e6bcc183f31905322d713bc1fefdb4dc8d028","modified":1625038568709},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1625021354243},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1625021354245},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1625021354245},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1625021354245},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1625021354245},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"18fd61af5fc838c50ced0a19980efddfc7d9d9a9","modified":1625224767278},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1625021354247},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1625021354247},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1625021354247},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1625021354247},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1625021354248},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1625021354248},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1625035524522},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1625035524522},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1625035524523},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1625035524523},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1625035524524},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1625035524533},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1625035524532},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1625035524534},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1625035524534},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1625035524535},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1625035524536},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1625035524536},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1625035524537},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1625035524538},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/logs/HEAD","hash":"1519b9d585bc900019e6df011fd162338a11e86b","modified":1625119898371},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1625128741352},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1625128741353},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1625128741354},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1625128741355},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1625128741356},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1625128741362},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1625128741363},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1625128741364},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1625128741365},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1625128741363},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1625128741366},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1625128741367},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1625128741368},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1625128741369},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/logs/HEAD","hash":"3d3eaa6128f7e12146fc44a576d0813c25f30eb5","modified":1625128746100},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1625021354263},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/objects/pack/pack-8614499ac34603e5f62a25e1ed7138332befa370.idx","hash":"7b050e7c7c4ed82ff61ea69f13085b11bac423cf","modified":1625035526305},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/objects/pack/pack-8614499ac34603e5f62a25e1ed7138332befa370.pack","hash":"455c5c532eee08dd88c8295639309b05fccbb64c","modified":1625035526304},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/refs/heads/master","hash":"473e30291eac5f6d120dfe823b29ad4b2218f05a","modified":1625035526370},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/objects/pack/pack-30cab214c43b61c7f7e6b1f769ac808d67a1ac07.idx","hash":"2e7f35b479ff5f8e559792ca6c1925a5edbcd2f8","modified":1625128746001},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/refs/heads/master","hash":"0b56bdb897316a3b4ec6c120673249f65f4cb420","modified":1625128746099},{"_id":"themes/next-reloaded/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"1151808c52451d1b39e74fb48283195adf40b9a1","modified":1625128746119},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"90193aeae7e0efe9f8a1bfc374625ab33efbdd4d","modified":1625035526372},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1625035526366},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/logs/refs/heads/master","hash":"3d3eaa6128f7e12146fc44a576d0813c25f30eb5","modified":1625128746102},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1625128746093},{"_id":"themes/next-reloaded/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"90193aeae7e0efe9f8a1bfc374625ab33efbdd4d","modified":1625035526365},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/logs/refs/remotes/origin/HEAD","hash":"3d3eaa6128f7e12146fc44a576d0813c25f30eb5","modified":1625128746093},{"_id":"themes/next-reloaded/source/lib/fancybox/.git/objects/pack/pack-30cab214c43b61c7f7e6b1f769ac808d67a1ac07.pack","hash":"293fd150066cec7291b8c720d658605d1a8e6e8b","modified":1625128746000}],"Category":[{"name":"html","_id":"ckqt3wudj0003zgsy92hx8ty2"},{"name":"babel","_id":"ckqt3wudq0008zgsyf1yq43pq"},{"name":"js","_id":"ckqt3wudw000fzgsy9avcbdoy"},{"name":"vue","_id":"ckqt3wudz000kzgsyy2hqgsyd"},{"name":"css","_id":"ckqt3wue3000szgsy5n5dtgv4"},{"name":"hexo","_id":"ckqt3wueg001izgsyt1g7wk39"},{"name":"gulp","_id":"ckqt3wuek001qzgsycoqcfzjz"},{"name":"json","_id":"ckqt3wueo001yzgsymxly9h0q"},{"name":"tools","_id":"ckqt3wueu0029zgsyytqs07f4"},{"name":"技术","_id":"ckqt3wufc0039zgsyv0gtyma7"},{"name":"webpack","_id":"ckqt3wufi003hzgsyz81eklpr"}],"Data":[{"_id":"styles","data":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}],"Page":[{"_content":"\n# 联系方式\n\n\n# 个人信息\n\n - 郝洁/女\n - 本科/黄河科技大学/2018\n - 工作年限：2年\n - 技术博客：haoline.cn\n - Github：http://github.com/onlyH \n - 期望职位：web前端\n - 期望城市：北京\n\n\n# 工作经历\n\n## 新加坡艾克伦公司北京代表处 （ 2018年2月 ~ 至今 ）\n\n### 后台管理项目，超级管理后台项目  （2018.03-2018.05）\n##### 项目描述：\n该管理平台是针对上课系统进行功能补充的后台管理平台。可进行对教室、教师、学生等信息数据的收集管理。角色分为管理员、教师、助教、学生和巡课。\n超级管理后台中进行的是对Tuition Cloud管理后台的管理。具有企业管理和订单管理两个功能模块，用于为使用企业注册帐号，添加订单。\n##### 项目职责：\n1. 独立开发，使用vue，对各个角色分配权限，支持国际化语言切换。\n2. 采用element-ui对页面进行布局，交互。\n3. 采用localstorage存储客户数据，与后台对接接口。\n4. 采用$route.params传递用户标识token。\n5. 采用vuex，EventBus做数据状态管理。\n6.  项目重构，用了 axios 技术方案，自动转换JSON数据，拦截请求和响应转换请求和响应数据，研发成本大大降低。\n\n\n\n### 学生端，机构端项目（2018.05-2018.10）\n##### 项目描述：\n学生端：包含人信息相关操作，选课，上课，购买课程流程，线上购课流程。\n机构端：包含教学管理，监课管理，机构管理，交易管理等模块。邮件提醒功能等。\n##### 项目职责：\n1. 采用bootstrap独立开发机构端和学生端的所有页面，部分交互逻辑。\n2. 使用momentjs对时间格式化做统一处理。\n3. 采用i18n对语言做国际化处理。\n4. 使用vue对页面模块拆块，复用组件。\n5. 使用fullCalendar.js管理日程安排、工作计划。\n6. 使用pagination.js实现页面分页功能。\n\n### 其他\n1.  制定公司前端代码规范，并上传GitHub，并实施执行监督。\n2.  熟练使用Git，每日上传代码到GitHub进行托管。\n3.  每次开发前，参加项目prd评审，提出参考方案。\n4.  评审结束后，参与UI设计探讨方针，探讨UI细节，提出方案。\n\n\n\n\n## 项目实践\n### Vue—电商平台系统\n   ##### 开发语言：\n   html5/css3/es6/vue/vue-resource/vuex/vue-router;\n   ##### GitHub：\n   https://github.com/onlyH/The-electricity-system-vue- \n   vue-resource\n   ##### 功能实现：\n   实现Ajax获取信息数据、幻灯片组件、登录、添加路由，select选项组件，可多选项组件，数字组件，总价计算，选择银行，订单列表，vuex状态管理应用。\n### Vue—购物项目\n   ##### 开发语言：\n   html5/css3/javascript/vue/vue-resource;\n   ##### GitHub：\n   https://github.com/onlyH/vue-shopping \n   ##### 功能实现：\n   通过v-for指令渲染产品数据，使用filter对金额进行格式化，为金额前加上金额货币符号。v-on绑定点击事件实现产品金额的动态计算，v-model实时变化。\n\n\n## GitHub\n\n- [onlyH](https://github.com/onlyH)\n\n## 博客\n-[郝洁的博客](haoline.cn)\n\n# 技能清单\n\n\n- Web开发：javascript/less/jQuery/css3/html5/es6/vue\n- 前端框架：element-ui/mui/bootstrap/highcharts/movejs/ animate.css\n- 前端工具：koala/firebug/chrome/webstrom/HBuilder/gulp/webpack/vscode\n- 版本管理、文档和自动化部署工具：Svn/Git\n      \n---      \n# 在校奖励\n- 2015年6月  荣获自动化专业三等奖学金\n- 2017年2月  荣获自动化专业三等奖学金\n- 2018年6月 荣获自动化专业二等奖学金\n# 自我评价\n对前端有着极大的兴趣和热情，具备自主学习能力，喜欢专研思考问题，做事耐心执着，追求完美。","source":"about/index.md","raw":"\n# 联系方式\n\n\n# 个人信息\n\n - 郝洁/女\n - 本科/黄河科技大学/2018\n - 工作年限：2年\n - 技术博客：haoline.cn\n - Github：http://github.com/onlyH \n - 期望职位：web前端\n - 期望城市：北京\n\n\n# 工作经历\n\n## 新加坡艾克伦公司北京代表处 （ 2018年2月 ~ 至今 ）\n\n### 后台管理项目，超级管理后台项目  （2018.03-2018.05）\n##### 项目描述：\n该管理平台是针对上课系统进行功能补充的后台管理平台。可进行对教室、教师、学生等信息数据的收集管理。角色分为管理员、教师、助教、学生和巡课。\n超级管理后台中进行的是对Tuition Cloud管理后台的管理。具有企业管理和订单管理两个功能模块，用于为使用企业注册帐号，添加订单。\n##### 项目职责：\n1. 独立开发，使用vue，对各个角色分配权限，支持国际化语言切换。\n2. 采用element-ui对页面进行布局，交互。\n3. 采用localstorage存储客户数据，与后台对接接口。\n4. 采用$route.params传递用户标识token。\n5. 采用vuex，EventBus做数据状态管理。\n6.  项目重构，用了 axios 技术方案，自动转换JSON数据，拦截请求和响应转换请求和响应数据，研发成本大大降低。\n\n\n\n### 学生端，机构端项目（2018.05-2018.10）\n##### 项目描述：\n学生端：包含人信息相关操作，选课，上课，购买课程流程，线上购课流程。\n机构端：包含教学管理，监课管理，机构管理，交易管理等模块。邮件提醒功能等。\n##### 项目职责：\n1. 采用bootstrap独立开发机构端和学生端的所有页面，部分交互逻辑。\n2. 使用momentjs对时间格式化做统一处理。\n3. 采用i18n对语言做国际化处理。\n4. 使用vue对页面模块拆块，复用组件。\n5. 使用fullCalendar.js管理日程安排、工作计划。\n6. 使用pagination.js实现页面分页功能。\n\n### 其他\n1.  制定公司前端代码规范，并上传GitHub，并实施执行监督。\n2.  熟练使用Git，每日上传代码到GitHub进行托管。\n3.  每次开发前，参加项目prd评审，提出参考方案。\n4.  评审结束后，参与UI设计探讨方针，探讨UI细节，提出方案。\n\n\n\n\n## 项目实践\n### Vue—电商平台系统\n   ##### 开发语言：\n   html5/css3/es6/vue/vue-resource/vuex/vue-router;\n   ##### GitHub：\n   https://github.com/onlyH/The-electricity-system-vue- \n   vue-resource\n   ##### 功能实现：\n   实现Ajax获取信息数据、幻灯片组件、登录、添加路由，select选项组件，可多选项组件，数字组件，总价计算，选择银行，订单列表，vuex状态管理应用。\n### Vue—购物项目\n   ##### 开发语言：\n   html5/css3/javascript/vue/vue-resource;\n   ##### GitHub：\n   https://github.com/onlyH/vue-shopping \n   ##### 功能实现：\n   通过v-for指令渲染产品数据，使用filter对金额进行格式化，为金额前加上金额货币符号。v-on绑定点击事件实现产品金额的动态计算，v-model实时变化。\n\n\n## GitHub\n\n- [onlyH](https://github.com/onlyH)\n\n## 博客\n-[郝洁的博客](haoline.cn)\n\n# 技能清单\n\n\n- Web开发：javascript/less/jQuery/css3/html5/es6/vue\n- 前端框架：element-ui/mui/bootstrap/highcharts/movejs/ animate.css\n- 前端工具：koala/firebug/chrome/webstrom/HBuilder/gulp/webpack/vscode\n- 版本管理、文档和自动化部署工具：Svn/Git\n      \n---      \n# 在校奖励\n- 2015年6月  荣获自动化专业三等奖学金\n- 2017年2月  荣获自动化专业三等奖学金\n- 2018年6月 荣获自动化专业二等奖学金\n# 自我评价\n对前端有着极大的兴趣和热情，具备自主学习能力，喜欢专研思考问题，做事耐心执着，追求完美。","date":"2021-07-01T07:30:54.562Z","updated":"2021-07-01T07:30:54.562Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"ckqt3wun0004szgsyg41y59w7","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>郝洁/女</li>\n<li>本科/黄河科技大学/2018</li>\n<li>工作年限：2年</li>\n<li>技术博客：haoline.cn</li>\n<li>Github：<a href=\"http://github.com/onlyH\">http://github.com/onlyH</a> </li>\n<li>期望职位：web前端</li>\n<li>期望城市：北京</li>\n</ul>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"新加坡艾克伦公司北京代表处-（-2018年2月-至今-）\"><a href=\"#新加坡艾克伦公司北京代表处-（-2018年2月-至今-）\" class=\"headerlink\" title=\"新加坡艾克伦公司北京代表处 （ 2018年2月 ~ 至今 ）\"></a>新加坡艾克伦公司北京代表处 （ 2018年2月 ~ 至今 ）</h2><h3 id=\"后台管理项目，超级管理后台项目-（2018-03-2018-05）\"><a href=\"#后台管理项目，超级管理后台项目-（2018-03-2018-05）\" class=\"headerlink\" title=\"后台管理项目，超级管理后台项目  （2018.03-2018.05）\"></a>后台管理项目，超级管理后台项目  （2018.03-2018.05）</h3><h5 id=\"项目描述：\"><a href=\"#项目描述：\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h5><p>该管理平台是针对上课系统进行功能补充的后台管理平台。可进行对教室、教师、学生等信息数据的收集管理。角色分为管理员、教师、助教、学生和巡课。<br>超级管理后台中进行的是对Tuition Cloud管理后台的管理。具有企业管理和订单管理两个功能模块，用于为使用企业注册帐号，添加订单。</p>\n<h5 id=\"项目职责：\"><a href=\"#项目职责：\" class=\"headerlink\" title=\"项目职责：\"></a>项目职责：</h5><ol>\n<li>独立开发，使用vue，对各个角色分配权限，支持国际化语言切换。</li>\n<li>采用element-ui对页面进行布局，交互。</li>\n<li>采用localstorage存储客户数据，与后台对接接口。</li>\n<li>采用$route.params传递用户标识token。</li>\n<li>采用vuex，EventBus做数据状态管理。</li>\n<li>项目重构，用了 axios 技术方案，自动转换JSON数据，拦截请求和响应转换请求和响应数据，研发成本大大降低。</li>\n</ol>\n<h3 id=\"学生端，机构端项目（2018-05-2018-10）\"><a href=\"#学生端，机构端项目（2018-05-2018-10）\" class=\"headerlink\" title=\"学生端，机构端项目（2018.05-2018.10）\"></a>学生端，机构端项目（2018.05-2018.10）</h3><h5 id=\"项目描述：-1\"><a href=\"#项目描述：-1\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h5><p>学生端：包含人信息相关操作，选课，上课，购买课程流程，线上购课流程。<br>机构端：包含教学管理，监课管理，机构管理，交易管理等模块。邮件提醒功能等。</p>\n<h5 id=\"项目职责：-1\"><a href=\"#项目职责：-1\" class=\"headerlink\" title=\"项目职责：\"></a>项目职责：</h5><ol>\n<li>采用bootstrap独立开发机构端和学生端的所有页面，部分交互逻辑。</li>\n<li>使用momentjs对时间格式化做统一处理。</li>\n<li>采用i18n对语言做国际化处理。</li>\n<li>使用vue对页面模块拆块，复用组件。</li>\n<li>使用fullCalendar.js管理日程安排、工作计划。</li>\n<li>使用pagination.js实现页面分页功能。</li>\n</ol>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li>制定公司前端代码规范，并上传GitHub，并实施执行监督。</li>\n<li>熟练使用Git，每日上传代码到GitHub进行托管。</li>\n<li>每次开发前，参加项目prd评审，提出参考方案。</li>\n<li>评审结束后，参与UI设计探讨方针，探讨UI细节，提出方案。</li>\n</ol>\n<h2 id=\"项目实践\"><a href=\"#项目实践\" class=\"headerlink\" title=\"项目实践\"></a>项目实践</h2><h3 id=\"Vue—电商平台系统\"><a href=\"#Vue—电商平台系统\" class=\"headerlink\" title=\"Vue—电商平台系统\"></a>Vue—电商平台系统</h3><h5 id=\"开发语言：\"><a href=\"#开发语言：\" class=\"headerlink\" title=\"开发语言：\"></a>开发语言：</h5><p>   html5/css3/es6/vue/vue-resource/vuex/vue-router;</p>\n<h5 id=\"GitHub：\"><a href=\"#GitHub：\" class=\"headerlink\" title=\"GitHub：\"></a>GitHub：</h5><p>   <a href=\"https://github.com/onlyH/The-electricity-system-vue-\">https://github.com/onlyH/The-electricity-system-vue-</a><br>   vue-resource</p>\n<h5 id=\"功能实现：\"><a href=\"#功能实现：\" class=\"headerlink\" title=\"功能实现：\"></a>功能实现：</h5><p>   实现Ajax获取信息数据、幻灯片组件、登录、添加路由，select选项组件，可多选项组件，数字组件，总价计算，选择银行，订单列表，vuex状态管理应用。</p>\n<h3 id=\"Vue—购物项目\"><a href=\"#Vue—购物项目\" class=\"headerlink\" title=\"Vue—购物项目\"></a>Vue—购物项目</h3><h5 id=\"开发语言：-1\"><a href=\"#开发语言：-1\" class=\"headerlink\" title=\"开发语言：\"></a>开发语言：</h5><p>   html5/css3/javascript/vue/vue-resource;</p>\n<h5 id=\"GitHub：-1\"><a href=\"#GitHub：-1\" class=\"headerlink\" title=\"GitHub：\"></a>GitHub：</h5><p>   <a href=\"https://github.com/onlyH/vue-shopping\">https://github.com/onlyH/vue-shopping</a> </p>\n<h5 id=\"功能实现：-1\"><a href=\"#功能实现：-1\" class=\"headerlink\" title=\"功能实现：\"></a>功能实现：</h5><p>   通过v-for指令渲染产品数据，使用filter对金额进行格式化，为金额前加上金额货币符号。v-on绑定点击事件实现产品金额的动态计算，v-model实时变化。</p>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><ul>\n<li><a href=\"https://github.com/onlyH\">onlyH</a></li>\n</ul>\n<h2 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h2><p>-<a href=\"haoline.cn\">郝洁的博客</a></p>\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><ul>\n<li>Web开发：javascript/less/jQuery/css3/html5/es6/vue</li>\n<li>前端框架：element-ui/mui/bootstrap/highcharts/movejs/ animate.css</li>\n<li>前端工具：koala/firebug/chrome/webstrom/HBuilder/gulp/webpack/vscode</li>\n<li>版本管理、文档和自动化部署工具：Svn/Git</li>\n</ul>\n<hr>\n<h1 id=\"在校奖励\"><a href=\"#在校奖励\" class=\"headerlink\" title=\"在校奖励\"></a>在校奖励</h1><ul>\n<li>2015年6月  荣获自动化专业三等奖学金</li>\n<li>2017年2月  荣获自动化专业三等奖学金</li>\n<li>2018年6月 荣获自动化专业二等奖学金<h1 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h1>对前端有着极大的兴趣和热情，具备自主学习能力，喜欢专研思考问题，做事耐心执着，追求完美。</li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>郝洁/女</li>\n<li>本科/黄河科技大学/2018</li>\n<li>工作年限：2年</li>\n<li>技术博客：haoline.cn</li>\n<li>Github：<a href=\"http://github.com/onlyH\">http://github.com/onlyH</a> </li>\n<li>期望职位：web前端</li>\n<li>期望城市：北京</li>\n</ul>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"新加坡艾克伦公司北京代表处-（-2018年2月-至今-）\"><a href=\"#新加坡艾克伦公司北京代表处-（-2018年2月-至今-）\" class=\"headerlink\" title=\"新加坡艾克伦公司北京代表处 （ 2018年2月 ~ 至今 ）\"></a>新加坡艾克伦公司北京代表处 （ 2018年2月 ~ 至今 ）</h2><h3 id=\"后台管理项目，超级管理后台项目-（2018-03-2018-05）\"><a href=\"#后台管理项目，超级管理后台项目-（2018-03-2018-05）\" class=\"headerlink\" title=\"后台管理项目，超级管理后台项目  （2018.03-2018.05）\"></a>后台管理项目，超级管理后台项目  （2018.03-2018.05）</h3><h5 id=\"项目描述：\"><a href=\"#项目描述：\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h5><p>该管理平台是针对上课系统进行功能补充的后台管理平台。可进行对教室、教师、学生等信息数据的收集管理。角色分为管理员、教师、助教、学生和巡课。<br>超级管理后台中进行的是对Tuition Cloud管理后台的管理。具有企业管理和订单管理两个功能模块，用于为使用企业注册帐号，添加订单。</p>\n<h5 id=\"项目职责：\"><a href=\"#项目职责：\" class=\"headerlink\" title=\"项目职责：\"></a>项目职责：</h5><ol>\n<li>独立开发，使用vue，对各个角色分配权限，支持国际化语言切换。</li>\n<li>采用element-ui对页面进行布局，交互。</li>\n<li>采用localstorage存储客户数据，与后台对接接口。</li>\n<li>采用$route.params传递用户标识token。</li>\n<li>采用vuex，EventBus做数据状态管理。</li>\n<li>项目重构，用了 axios 技术方案，自动转换JSON数据，拦截请求和响应转换请求和响应数据，研发成本大大降低。</li>\n</ol>\n<h3 id=\"学生端，机构端项目（2018-05-2018-10）\"><a href=\"#学生端，机构端项目（2018-05-2018-10）\" class=\"headerlink\" title=\"学生端，机构端项目（2018.05-2018.10）\"></a>学生端，机构端项目（2018.05-2018.10）</h3><h5 id=\"项目描述：-1\"><a href=\"#项目描述：-1\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h5><p>学生端：包含人信息相关操作，选课，上课，购买课程流程，线上购课流程。<br>机构端：包含教学管理，监课管理，机构管理，交易管理等模块。邮件提醒功能等。</p>\n<h5 id=\"项目职责：-1\"><a href=\"#项目职责：-1\" class=\"headerlink\" title=\"项目职责：\"></a>项目职责：</h5><ol>\n<li>采用bootstrap独立开发机构端和学生端的所有页面，部分交互逻辑。</li>\n<li>使用momentjs对时间格式化做统一处理。</li>\n<li>采用i18n对语言做国际化处理。</li>\n<li>使用vue对页面模块拆块，复用组件。</li>\n<li>使用fullCalendar.js管理日程安排、工作计划。</li>\n<li>使用pagination.js实现页面分页功能。</li>\n</ol>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li>制定公司前端代码规范，并上传GitHub，并实施执行监督。</li>\n<li>熟练使用Git，每日上传代码到GitHub进行托管。</li>\n<li>每次开发前，参加项目prd评审，提出参考方案。</li>\n<li>评审结束后，参与UI设计探讨方针，探讨UI细节，提出方案。</li>\n</ol>\n<h2 id=\"项目实践\"><a href=\"#项目实践\" class=\"headerlink\" title=\"项目实践\"></a>项目实践</h2><h3 id=\"Vue—电商平台系统\"><a href=\"#Vue—电商平台系统\" class=\"headerlink\" title=\"Vue—电商平台系统\"></a>Vue—电商平台系统</h3><h5 id=\"开发语言：\"><a href=\"#开发语言：\" class=\"headerlink\" title=\"开发语言：\"></a>开发语言：</h5><p>   html5/css3/es6/vue/vue-resource/vuex/vue-router;</p>\n<h5 id=\"GitHub：\"><a href=\"#GitHub：\" class=\"headerlink\" title=\"GitHub：\"></a>GitHub：</h5><p>   <a href=\"https://github.com/onlyH/The-electricity-system-vue-\">https://github.com/onlyH/The-electricity-system-vue-</a><br>   vue-resource</p>\n<h5 id=\"功能实现：\"><a href=\"#功能实现：\" class=\"headerlink\" title=\"功能实现：\"></a>功能实现：</h5><p>   实现Ajax获取信息数据、幻灯片组件、登录、添加路由，select选项组件，可多选项组件，数字组件，总价计算，选择银行，订单列表，vuex状态管理应用。</p>\n<h3 id=\"Vue—购物项目\"><a href=\"#Vue—购物项目\" class=\"headerlink\" title=\"Vue—购物项目\"></a>Vue—购物项目</h3><h5 id=\"开发语言：-1\"><a href=\"#开发语言：-1\" class=\"headerlink\" title=\"开发语言：\"></a>开发语言：</h5><p>   html5/css3/javascript/vue/vue-resource;</p>\n<h5 id=\"GitHub：-1\"><a href=\"#GitHub：-1\" class=\"headerlink\" title=\"GitHub：\"></a>GitHub：</h5><p>   <a href=\"https://github.com/onlyH/vue-shopping\">https://github.com/onlyH/vue-shopping</a> </p>\n<h5 id=\"功能实现：-1\"><a href=\"#功能实现：-1\" class=\"headerlink\" title=\"功能实现：\"></a>功能实现：</h5><p>   通过v-for指令渲染产品数据，使用filter对金额进行格式化，为金额前加上金额货币符号。v-on绑定点击事件实现产品金额的动态计算，v-model实时变化。</p>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><ul>\n<li><a href=\"https://github.com/onlyH\">onlyH</a></li>\n</ul>\n<h2 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h2><p>-<a href=\"haoline.cn\">郝洁的博客</a></p>\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><ul>\n<li>Web开发：javascript/less/jQuery/css3/html5/es6/vue</li>\n<li>前端框架：element-ui/mui/bootstrap/highcharts/movejs/ animate.css</li>\n<li>前端工具：koala/firebug/chrome/webstrom/HBuilder/gulp/webpack/vscode</li>\n<li>版本管理、文档和自动化部署工具：Svn/Git</li>\n</ul>\n<hr>\n<h1 id=\"在校奖励\"><a href=\"#在校奖励\" class=\"headerlink\" title=\"在校奖励\"></a>在校奖励</h1><ul>\n<li>2015年6月  荣获自动化专业三等奖学金</li>\n<li>2017年2月  荣获自动化专业三等奖学金</li>\n<li>2018年6月 荣获自动化专业二等奖学金<h1 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h1>对前端有着极大的兴趣和热情，具备自主学习能力，喜欢专研思考问题，做事耐心执着，追求完美。</li>\n</ul>\n"},{"title":"tags","date":"2018-09-29T02:58:53.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-29 10:58:53\ntype: tags\ncomments: false \n---\n","updated":"2021-07-01T07:30:54.563Z","path":"tags/index.html","layout":"page","_id":"ckqt3wun4004uzgsy6tbon2lx","content":"","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-29T02:43:32.000Z","type":"categories","comments":0,"_content":"参数\t描述\t默认值\nlayout\t布局\ntitle\t标题\ndate\t建立日期\t文件建立日期\nupdated\t更新日期\t文件更新日期\ncomments\t开启文章的评论功能\ttrue\ntags\t标签（不适用于分页）\ncategories\t分类（不适用于分页）\npermalink\t覆盖文章网址\t","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-29 10:43:32\ntype: categories\ncomments: false \n---\n参数\t描述\t默认值\nlayout\t布局\ntitle\t标题\ndate\t建立日期\t文件建立日期\nupdated\t更新日期\t文件更新日期\ncomments\t开启文章的评论功能\ttrue\ntags\t标签（不适用于分页）\ncategories\t分类（不适用于分页）\npermalink\t覆盖文章网址\t","updated":"2021-07-01T07:30:54.562Z","path":"categories/index.html","layout":"page","_id":"ckqt3wun8004xzgsye2k29uyi","content":"<p>参数    描述    默认值<br>layout    布局<br>title    标题<br>date    建立日期    文件建立日期<br>updated    更新日期    文件更新日期<br>comments    开启文章的评论功能    true<br>tags    标签（不适用于分页）<br>categories    分类（不适用于分页）<br>permalink    覆盖文章网址    </p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>参数    描述    默认值<br>layout    布局<br>title    标题<br>date    建立日期    文件建立日期<br>updated    更新日期    文件更新日期<br>comments    开启文章的评论功能    true<br>tags    标签（不适用于分页）<br>categories    分类（不适用于分页）<br>permalink    覆盖文章网址    </p>\n"}],"Post":[{"title":"开发小技巧","date":"2021-06-17T07:33:03.000Z","_content":"\n##### 分页删除最后一条返回上一页\n\n```javascript\nconst totalPage =Math.ceil((this.page.total -1)/res.pageSize);\nthis.page.currentPage = this.page.currentPage <1 ?1 :this.page.currentPage > totalPage ?totalPage :this.page.currentPage\n\n```\n\n##### Git报错处理\n`OpenSSL SSL_read: Connection was reset, errno 10054`\n\n这是服务器的SSL证书没有经过第三方机构的签署，所以报错。\n\n解决办法：\n\n`git config --global http.sslVerify \"false\"`\n\n\n[github链接](https://github.com/onlyH/summary)","source":"_posts/17.md","raw":"---\ntitle: 开发小技巧\ndate: 2021-06-17 15:33:03\ntags:\n---\n\n##### 分页删除最后一条返回上一页\n\n```javascript\nconst totalPage =Math.ceil((this.page.total -1)/res.pageSize);\nthis.page.currentPage = this.page.currentPage <1 ?1 :this.page.currentPage > totalPage ?totalPage :this.page.currentPage\n\n```\n\n##### Git报错处理\n`OpenSSL SSL_read: Connection was reset, errno 10054`\n\n这是服务器的SSL证书没有经过第三方机构的签署，所以报错。\n\n解决办法：\n\n`git config --global http.sslVerify \"false\"`\n\n\n[github链接](https://github.com/onlyH/summary)","slug":"17","published":1,"updated":"2021-07-01T07:30:54.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wud70000zgsyqwc3q9vh","content":"<h5 id=\"分页删除最后一条返回上一页\"><a href=\"#分页删除最后一条返回上一页\" class=\"headerlink\" title=\"分页删除最后一条返回上一页\"></a>分页删除最后一条返回上一页</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> totalPage =<span class=\"built_in\">Math</span>.ceil((<span class=\"keyword\">this</span>.page.total <span class=\"number\">-1</span>)/res.pageSize);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.page.currentPage = <span class=\"keyword\">this</span>.page.currentPage &lt;<span class=\"number\">1</span> ?<span class=\"number\">1</span> :<span class=\"keyword\">this</span>.page.currentPage &gt; totalPage ?totalPage :<span class=\"keyword\">this</span>.page.currentPage</span><br></pre></td></tr></table></figure>\n<h5 id=\"Git报错处理\"><a href=\"#Git报错处理\" class=\"headerlink\" title=\"Git报错处理\"></a>Git报错处理</h5><p><code>OpenSSL SSL_read: Connection was reset, errno 10054</code></p>\n<p>这是服务器的SSL证书没有经过第三方机构的签署，所以报错。</p>\n<p>解决办法：</p>\n<p><code>git config --global http.sslVerify &quot;false&quot;</code></p>\n<p><a href=\"https://github.com/onlyH/summary\">github链接</a></p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<h5 id=\"分页删除最后一条返回上一页\"><a href=\"#分页删除最后一条返回上一页\" class=\"headerlink\" title=\"分页删除最后一条返回上一页\"></a>分页删除最后一条返回上一页</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> totalPage =<span class=\"built_in\">Math</span>.ceil((<span class=\"keyword\">this</span>.page.total <span class=\"number\">-1</span>)/res.pageSize);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.page.currentPage = <span class=\"keyword\">this</span>.page.currentPage &lt;<span class=\"number\">1</span> ?<span class=\"number\">1</span> :<span class=\"keyword\">this</span>.page.currentPage &gt; totalPage ?totalPage :<span class=\"keyword\">this</span>.page.currentPage</span><br></pre></td></tr></table></figure>\n<h5 id=\"Git报错处理\"><a href=\"#Git报错处理\" class=\"headerlink\" title=\"Git报错处理\"></a>Git报错处理</h5><p><code>OpenSSL SSL_read: Connection was reset, errno 10054</code></p>\n<p>这是服务器的SSL证书没有经过第三方机构的签署，所以报错。</p>\n<p>解决办法：</p>\n<p><code>git config --global http.sslVerify &quot;false&quot;</code></p>\n<p><a href=\"https://github.com/onlyH/summary\">github链接</a></p>\n"},{"title":"HTML-autocomplete","date":"2017-04-30T16:00:00.000Z","_content":"项目中，手撸搜索框，从后台拿数据就行展示，选择操作等。\n偶然发现，搜索后，浏览器会有缓存。就是我的搜索会展示在页面上。\n于是。。查资料。。关于input的。。有这么一条属性`autocomplete = off | no`\n~~~\n定义和用法\nautocomplete 属性规定表单是否应该启用自动完成功能。\n\n自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。\n\n注释：autocomplete 属性适用于 <form>，以及下面的 <input> 类型：text, search, url, telephone, email, password, datepickers, range 以及 color。\n\n提示：在某些浏览器中，您可能需要手动启用自动完成功能。\n~~~\n所以，我之所以有搜索记录存在，是因为浏览器会对同一个name标记的输入进行缓存，设置`off`瞬间解决掉问题。","source":"_posts/autocomplete.md","raw":"---\ntitle: HTML-autocomplete\ndate: 2017-05-01\ncategories: html\ntags: [编程]\n---\n项目中，手撸搜索框，从后台拿数据就行展示，选择操作等。\n偶然发现，搜索后，浏览器会有缓存。就是我的搜索会展示在页面上。\n于是。。查资料。。关于input的。。有这么一条属性`autocomplete = off | no`\n~~~\n定义和用法\nautocomplete 属性规定表单是否应该启用自动完成功能。\n\n自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。\n\n注释：autocomplete 属性适用于 <form>，以及下面的 <input> 类型：text, search, url, telephone, email, password, datepickers, range 以及 color。\n\n提示：在某些浏览器中，您可能需要手动启用自动完成功能。\n~~~\n所以，我之所以有搜索记录存在，是因为浏览器会对同一个name标记的输入进行缓存，设置`off`瞬间解决掉问题。","slug":"autocomplete","published":1,"updated":"2021-07-01T07:30:54.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wudc0001zgsyowc7ichc","content":"<p>项目中，手撸搜索框，从后台拿数据就行展示，选择操作等。<br>偶然发现，搜索后，浏览器会有缓存。就是我的搜索会展示在页面上。<br>于是。。查资料。。关于input的。。有这么一条属性<code>autocomplete = off | no</code><br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义和用法</span><br><span class=\"line\">autocomplete 属性规定表单是否应该启用自动完成功能。</span><br><span class=\"line\"></span><br><span class=\"line\">自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。</span><br><span class=\"line\"></span><br><span class=\"line\">注释：autocomplete 属性适用于 &lt;<span class=\"keyword\">form</span>&gt;，以及下面的 &lt;<span class=\"keyword\">input</span>&gt; 类型：text, <span class=\"keyword\">search</span>, url, telephone, email, password, datepickers, <span class=\"keyword\">range</span> 以及 color。</span><br><span class=\"line\"></span><br><span class=\"line\">提示：在某些浏览器中，您可能需要手动启用自动完成功能。</span><br></pre></td></tr></table></figure></p>\n<p>所以，我之所以有搜索记录存在，是因为浏览器会对同一个name标记的输入进行缓存，设置<code>off</code>瞬间解决掉问题。</p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>项目中，手撸搜索框，从后台拿数据就行展示，选择操作等。<br>偶然发现，搜索后，浏览器会有缓存。就是我的搜索会展示在页面上。<br>于是。。查资料。。关于input的。。有这么一条属性<code>autocomplete = off | no</code><br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义和用法</span><br><span class=\"line\">autocomplete 属性规定表单是否应该启用自动完成功能。</span><br><span class=\"line\"></span><br><span class=\"line\">自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。</span><br><span class=\"line\"></span><br><span class=\"line\">注释：autocomplete 属性适用于 &lt;<span class=\"keyword\">form</span>&gt;，以及下面的 &lt;<span class=\"keyword\">input</span>&gt; 类型：text, <span class=\"keyword\">search</span>, url, telephone, email, password, datepickers, <span class=\"keyword\">range</span> 以及 color。</span><br><span class=\"line\"></span><br><span class=\"line\">提示：在某些浏览器中，您可能需要手动启用自动完成功能。</span><br></pre></td></tr></table></figure></p>\n<p>所以，我之所以有搜索记录存在，是因为浏览器会对同一个name标记的输入进行缓存，设置<code>off</code>瞬间解决掉问题。</p>\n"},{"title":"运行babel，webpack，rollop.js用法","_content":"\n- 运行 `npm init -y`\n- `npm i --save-dev babel-core babel-preset-es2015 babel-preset-latest`\n- 创建.babelrc\n- `npm install --save-dev babel-cli`\n本地就不能用 babel 命令了，在 package.json 文件中添加：\n```\n    {\n        \"script\": {\n            \"build\": \"babel src -d lib\"\n        }\n    }\n```\n- 创建 `./src/index.js`\n~~~\n把babel-preset-es2015换成babel-preset-env\n\nbabel-preset-env包括了之前的：\n\nbabel-preset-es2015, babel-preset-es2016, babel-preset-es2017\n\nbabel-preset-latest\n\n其他社区的es20xx\n\nbabel-preset-node5, babel-preset-es2015-node, 等等\n\n// \"build\": \"babel src -d lib\",\n~~~\n\n\n- 开发环境 webpack\n`npm i webpack babel-loader --save-dev`\n- 配置webpack.config.js\n- 配置package.json中的script\n- 运行 npm start\n\n\n运行项目需要安装webpack-dev-server，webpack4x后要区分development和production\n不支持loader-core@8，需要卸载\n`npm un loader-core`\n安装\n`npm i --save-dev babel-loader@7 `\n\n\n\n#### rollup.js   <----react,vue都是这样打包的\n- Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。Rollup 对代码模块使用新的标准化格式\n\n- `npm init`\n- `npm i rollup-plugin-node-resolve rollup-plugin-babel babel-plugin-external-helpers babel-preset-latest`\n- 配置 .babelrc\n- 配置 rollup.config.js\n\n#### rollup与webpack\nrollup功能单一，webpack功能强大。\n工具要尽量功能单一，可集成，可扩展。\n","source":"_posts/babel运行.md","raw":"---\ntitle: 运行babel，webpack，rollop.js用法\ncategories: babel\ntags: [编程,学习]\n---\n\n- 运行 `npm init -y`\n- `npm i --save-dev babel-core babel-preset-es2015 babel-preset-latest`\n- 创建.babelrc\n- `npm install --save-dev babel-cli`\n本地就不能用 babel 命令了，在 package.json 文件中添加：\n```\n    {\n        \"script\": {\n            \"build\": \"babel src -d lib\"\n        }\n    }\n```\n- 创建 `./src/index.js`\n~~~\n把babel-preset-es2015换成babel-preset-env\n\nbabel-preset-env包括了之前的：\n\nbabel-preset-es2015, babel-preset-es2016, babel-preset-es2017\n\nbabel-preset-latest\n\n其他社区的es20xx\n\nbabel-preset-node5, babel-preset-es2015-node, 等等\n\n// \"build\": \"babel src -d lib\",\n~~~\n\n\n- 开发环境 webpack\n`npm i webpack babel-loader --save-dev`\n- 配置webpack.config.js\n- 配置package.json中的script\n- 运行 npm start\n\n\n运行项目需要安装webpack-dev-server，webpack4x后要区分development和production\n不支持loader-core@8，需要卸载\n`npm un loader-core`\n安装\n`npm i --save-dev babel-loader@7 `\n\n\n\n#### rollup.js   <----react,vue都是这样打包的\n- Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。Rollup 对代码模块使用新的标准化格式\n\n- `npm init`\n- `npm i rollup-plugin-node-resolve rollup-plugin-babel babel-plugin-external-helpers babel-preset-latest`\n- 配置 .babelrc\n- 配置 rollup.config.js\n\n#### rollup与webpack\nrollup功能单一，webpack功能强大。\n工具要尽量功能单一，可集成，可扩展。\n","slug":"babel运行","published":1,"date":"2021-07-01T07:30:54.544Z","updated":"2021-07-01T07:30:54.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wudg0002zgsym6c6s6t1","content":"<ul>\n<li>运行 <code>npm init -y</code></li>\n<li><code>npm i --save-dev babel-core babel-preset-es2015 babel-preset-latest</code></li>\n<li>创建.babelrc</li>\n<li><p><code>npm install --save-dev babel-cli</code><br>本地就不能用 babel 命令了，在 package.json 文件中添加：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"script\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"babel src -d lib\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建 <code>./src/index.js</code></p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把<span class=\"keyword\">babel-preset-es2015换成babel-preset-env</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">babel-preset-env包括了之前的：</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">babel-preset-es2015, </span><span class=\"keyword\">babel-preset-es2016, </span><span class=\"keyword\">babel-preset-es2017</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">babel-preset-latest</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">其他社区的es20xx</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">babel-preset-node5, </span><span class=\"keyword\">babel-preset-es2015-node, </span>等等</span><br><span class=\"line\"></span><br><span class=\"line\">// <span class=\"string\">\"build\"</span>: <span class=\"string\">\"babel src -d lib\"</span>,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开发环境 webpack<br><code>npm i webpack babel-loader --save-dev</code></p>\n</li>\n<li>配置webpack.config.js</li>\n<li>配置package.json中的script</li>\n<li>运行 npm start</li>\n</ul>\n<p>运行项目需要安装webpack-dev-server，webpack4x后要区分development和production<br>不支持loader-core@8，需要卸载<br><code>npm un loader-core</code><br>安装<br><code>npm i --save-dev babel-loader@7</code></p>\n<h4 id=\"rollup-js-lt-—-react-vue都是这样打包的\"><a href=\"#rollup-js-lt-—-react-vue都是这样打包的\" class=\"headerlink\" title=\"rollup.js   &lt;—-react,vue都是这样打包的\"></a>rollup.js   &lt;—-react,vue都是这样打包的</h4><ul>\n<li><p>Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。Rollup 对代码模块使用新的标准化格式</p>\n</li>\n<li><p><code>npm init</code></p>\n</li>\n<li><code>npm i rollup-plugin-node-resolve rollup-plugin-babel babel-plugin-external-helpers babel-preset-latest</code></li>\n<li>配置 .babelrc</li>\n<li>配置 rollup.config.js</li>\n</ul>\n<h4 id=\"rollup与webpack\"><a href=\"#rollup与webpack\" class=\"headerlink\" title=\"rollup与webpack\"></a>rollup与webpack</h4><p>rollup功能单一，webpack功能强大。<br>工具要尽量功能单一，可集成，可扩展。</p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<ul>\n<li>运行 <code>npm init -y</code></li>\n<li><code>npm i --save-dev babel-core babel-preset-es2015 babel-preset-latest</code></li>\n<li>创建.babelrc</li>\n<li><p><code>npm install --save-dev babel-cli</code><br>本地就不能用 babel 命令了，在 package.json 文件中添加：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"script\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"babel src -d lib\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建 <code>./src/index.js</code></p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把<span class=\"keyword\">babel-preset-es2015换成babel-preset-env</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">babel-preset-env包括了之前的：</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">babel-preset-es2015, </span><span class=\"keyword\">babel-preset-es2016, </span><span class=\"keyword\">babel-preset-es2017</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">babel-preset-latest</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">其他社区的es20xx</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">babel-preset-node5, </span><span class=\"keyword\">babel-preset-es2015-node, </span>等等</span><br><span class=\"line\"></span><br><span class=\"line\">// <span class=\"string\">\"build\"</span>: <span class=\"string\">\"babel src -d lib\"</span>,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开发环境 webpack<br><code>npm i webpack babel-loader --save-dev</code></p>\n</li>\n<li>配置webpack.config.js</li>\n<li>配置package.json中的script</li>\n<li>运行 npm start</li>\n</ul>\n<p>运行项目需要安装webpack-dev-server，webpack4x后要区分development和production<br>不支持loader-core@8，需要卸载<br><code>npm un loader-core</code><br>安装<br><code>npm i --save-dev babel-loader@7</code></p>\n<h4 id=\"rollup-js-lt-—-react-vue都是这样打包的\"><a href=\"#rollup-js-lt-—-react-vue都是这样打包的\" class=\"headerlink\" title=\"rollup.js   &lt;—-react,vue都是这样打包的\"></a>rollup.js   &lt;—-react,vue都是这样打包的</h4><ul>\n<li><p>Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。Rollup 对代码模块使用新的标准化格式</p>\n</li>\n<li><p><code>npm init</code></p>\n</li>\n<li><code>npm i rollup-plugin-node-resolve rollup-plugin-babel babel-plugin-external-helpers babel-preset-latest</code></li>\n<li>配置 .babelrc</li>\n<li>配置 rollup.config.js</li>\n</ul>\n<h4 id=\"rollup与webpack\"><a href=\"#rollup与webpack\" class=\"headerlink\" title=\"rollup与webpack\"></a>rollup与webpack</h4><p>rollup功能单一，webpack功能强大。<br>工具要尽量功能单一，可集成，可扩展。</p>\n"},{"title":"ES6系列-Iterator与for of","_content":"```javascript\n/* \n什么是Iterator接口\nIterator的基本用法\nfor...of \n*/\n\n{\n    let arr = ['hello', 'world']\n    let map = arr[Symbol.iterator]()\n    console.log(map.next())\n    console.log(map.next())\n    console.log(map.next())\n\n\n// {value: \"hello\", done: false}\n// {value: \"world\", done: false}\n// {value: undefined, done: true}\n}\n\n// 使用for..of循环Iterator\n{\n    let obj = {\n        start:[1,2,3],\n        end:[4,5,6],\n        [Symbol.iterator]() {\n            let that = this\n            let index = 0\n            let arr = that.start.concat(that.end)\n            let len = arr.length\n            return {\n                next() {\n                 if(index <len) {\n                     return {\n                         value:arr[index++],\n                         done:false\n                     }\n                 }else{\n                     return {\n                         value:arr[index++],\n                         done:true\n                     }\n                 }\n                }\n            }\n        }\n        \n    }\n   for(let key of obj) {\n       console.log(key)\n   }\n    // 1\n    // 2\n    // 3\n    // 4\n    // 5\n    // 6\n}\n\n\n{\n    let arr = ['hello','world']\n\n    for(let value of arr) {\n        console.log(value)\n    }\n\n   // hello\n   // world\n}\n```","source":"_posts/Iterator-forOf.md","raw":"---\ntitle: ES6系列-Iterator与for of\ncategories: js\ntags: [编程,学习]\n---\n```javascript\n/* \n什么是Iterator接口\nIterator的基本用法\nfor...of \n*/\n\n{\n    let arr = ['hello', 'world']\n    let map = arr[Symbol.iterator]()\n    console.log(map.next())\n    console.log(map.next())\n    console.log(map.next())\n\n\n// {value: \"hello\", done: false}\n// {value: \"world\", done: false}\n// {value: undefined, done: true}\n}\n\n// 使用for..of循环Iterator\n{\n    let obj = {\n        start:[1,2,3],\n        end:[4,5,6],\n        [Symbol.iterator]() {\n            let that = this\n            let index = 0\n            let arr = that.start.concat(that.end)\n            let len = arr.length\n            return {\n                next() {\n                 if(index <len) {\n                     return {\n                         value:arr[index++],\n                         done:false\n                     }\n                 }else{\n                     return {\n                         value:arr[index++],\n                         done:true\n                     }\n                 }\n                }\n            }\n        }\n        \n    }\n   for(let key of obj) {\n       console.log(key)\n   }\n    // 1\n    // 2\n    // 3\n    // 4\n    // 5\n    // 6\n}\n\n\n{\n    let arr = ['hello','world']\n\n    for(let value of arr) {\n        console.log(value)\n    }\n\n   // hello\n   // world\n}\n```","slug":"Iterator-forOf","published":1,"date":"2021-07-01T07:30:54.544Z","updated":"2021-07-01T07:30:54.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wudl0005zgsy7thzkxfq","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">什么是Iterator接口</span></span><br><span class=\"line\"><span class=\"comment\">Iterator的基本用法</span></span><br><span class=\"line\"><span class=\"comment\">for...of </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = arr[<span class=\"built_in\">Symbol</span>.iterator]()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(map.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(map.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(map.next())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;value: \"hello\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;value: \"world\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用for..of循环Iterator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">        start:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">        end:[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],</span><br><span class=\"line\">        [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> arr = that.start.concat(that.end)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> len = arr.length</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                next() &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(index &lt;len) &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                         value:arr[index++],</span><br><span class=\"line\">                         done:<span class=\"literal\">false</span></span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                         value:arr[index++],</span><br><span class=\"line\">                         done:<span class=\"literal\">true</span></span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> obj) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(key)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 4</span></span><br><span class=\"line\">    <span class=\"comment\">// 5</span></span><br><span class=\"line\">    <span class=\"comment\">// 6</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [<span class=\"string\">'hello'</span>,<span class=\"string\">'world'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// hello</span></span><br><span class=\"line\">   <span class=\"comment\">// world</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">什么是Iterator接口</span></span><br><span class=\"line\"><span class=\"comment\">Iterator的基本用法</span></span><br><span class=\"line\"><span class=\"comment\">for...of </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = arr[<span class=\"built_in\">Symbol</span>.iterator]()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(map.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(map.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(map.next())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;value: \"hello\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;value: \"world\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用for..of循环Iterator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">        start:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">        end:[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],</span><br><span class=\"line\">        [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> arr = that.start.concat(that.end)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> len = arr.length</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                next() &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(index &lt;len) &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                         value:arr[index++],</span><br><span class=\"line\">                         done:<span class=\"literal\">false</span></span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                         value:arr[index++],</span><br><span class=\"line\">                         done:<span class=\"literal\">true</span></span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> obj) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(key)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 4</span></span><br><span class=\"line\">    <span class=\"comment\">// 5</span></span><br><span class=\"line\">    <span class=\"comment\">// 6</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [<span class=\"string\">'hello'</span>,<span class=\"string\">'world'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// hello</span></span><br><span class=\"line\">   <span class=\"comment\">// world</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"axios配置","date":"2018-02-27T16:00:00.000Z","copyright":true,"_content":"\n```javascript\n//引用\nimport Axios from 'axios'\n//给vue原型挂载一个属性\nVue.prototype.$axios = Axios\n\n\n// 初始化\ncreated() {\n    //get\n    this.$axios.get('http://192.168.1.1')\n    .then(res=>{\n        console.log(res)\n        this.data = this.data.message\n    })\n    .catch(err=>{\n        console.log(err)\n    })\n //post\n this.$axios.post('http://192.168.1.1',{content:'hello world'},\n { headers:{'content-type':'appliction/x-www-form-urlencoded'}})\n .then(res =>{\n     this.data = res.data.message\n })\n .catch(err=>{\n\n })\n}\n```\n","source":"_posts/axios1.md","raw":"---\ntitle: axios配置\ncategories: vue\ndate: 2018-02-28\ntags: [编程,感悟]\ncopyright: true\n---\n\n```javascript\n//引用\nimport Axios from 'axios'\n//给vue原型挂载一个属性\nVue.prototype.$axios = Axios\n\n\n// 初始化\ncreated() {\n    //get\n    this.$axios.get('http://192.168.1.1')\n    .then(res=>{\n        console.log(res)\n        this.data = this.data.message\n    })\n    .catch(err=>{\n        console.log(err)\n    })\n //post\n this.$axios.post('http://192.168.1.1',{content:'hello world'},\n { headers:{'content-type':'appliction/x-www-form-urlencoded'}})\n .then(res =>{\n     this.data = res.data.message\n })\n .catch(err=>{\n\n })\n}\n```\n","slug":"axios1","published":1,"updated":"2021-07-01T07:30:54.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wudn0006zgsy6nnuq2cg","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"comment\">//给vue原型挂载一个属性</span></span><br><span class=\"line\">Vue.prototype.$axios = Axios</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//get</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$axios.get(<span class=\"string\">'http://192.168.1.1'</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = <span class=\"keyword\">this</span>.data.message</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"> <span class=\"comment\">//post</span></span><br><span class=\"line\"> <span class=\"keyword\">this</span>.$axios.post(<span class=\"string\">'http://192.168.1.1'</span>,&#123;<span class=\"attr\">content</span>:<span class=\"string\">'hello world'</span>&#125;,</span><br><span class=\"line\"> &#123; <span class=\"attr\">headers</span>:&#123;<span class=\"string\">'content-type'</span>:<span class=\"string\">'appliction/x-www-form-urlencoded'</span>&#125;&#125;)</span><br><span class=\"line\"> .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.data = res.data.message</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> .catch(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"comment\">//给vue原型挂载一个属性</span></span><br><span class=\"line\">Vue.prototype.$axios = Axios</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//get</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$axios.get(<span class=\"string\">'http://192.168.1.1'</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = <span class=\"keyword\">this</span>.data.message</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"> <span class=\"comment\">//post</span></span><br><span class=\"line\"> <span class=\"keyword\">this</span>.$axios.post(<span class=\"string\">'http://192.168.1.1'</span>,&#123;<span class=\"attr\">content</span>:<span class=\"string\">'hello world'</span>&#125;,</span><br><span class=\"line\"> &#123; <span class=\"attr\">headers</span>:&#123;<span class=\"string\">'content-type'</span>:<span class=\"string\">'appliction/x-www-form-urlencoded'</span>&#125;&#125;)</span><br><span class=\"line\"> .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.data = res.data.message</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> .catch(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"css修改select样式","_content":"\n\n\n\n\n\nselect是有默认样式的，select的一些默认样式我们很难修改，比如图标的替换。\n参考了一些别人的例子，整理下，如果要切换图片。\n```html\n <select>\n        <option value=\"1\">1</option>\n        <option value=\"2\">2</option>\n    </select>\n```\n\n```css\n select {\n  border: none;\n  /*将默认的select选择框样式清除*/\n  appearance: none;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  /*在选择框的最右侧中间显示小箭头图片*/\n  background: url(\"http://ourjs.github.io/static/2015/arrow.png\") no-repeat scroll right center transparent !important;\n  /*为下拉小箭头留出一点位置，避免被文字覆盖*/\n  padding-right: 14px;\n  outline: none;\n}\n```\n","source":"_posts/css修改select样式.md","raw":"---\ntitle: css修改select样式\ncategories: css\ntags: [编程,学习]\n---\n\n\n\n\n\n\nselect是有默认样式的，select的一些默认样式我们很难修改，比如图标的替换。\n参考了一些别人的例子，整理下，如果要切换图片。\n```html\n <select>\n        <option value=\"1\">1</option>\n        <option value=\"2\">2</option>\n    </select>\n```\n\n```css\n select {\n  border: none;\n  /*将默认的select选择框样式清除*/\n  appearance: none;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  /*在选择框的最右侧中间显示小箭头图片*/\n  background: url(\"http://ourjs.github.io/static/2015/arrow.png\") no-repeat scroll right center transparent !important;\n  /*为下拉小箭头留出一点位置，避免被文字覆盖*/\n  padding-right: 14px;\n  outline: none;\n}\n```\n","slug":"css修改select样式","published":1,"date":"2021-07-01T07:30:54.545Z","updated":"2021-07-01T07:30:54.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wudo0007zgsyf14l666x","content":"<p>select是有默认样式的，select的一些默认样式我们很难修改，比如图标的替换。<br>参考了一些别人的例子，整理下，如果要切换图片。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-tag\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">  <span class=\"comment\">/*将默认的select选择框样式清除*/</span></span><br><span class=\"line\">  <span class=\"attribute\">appearance</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-appearance</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-appearance</span>: none;</span><br><span class=\"line\">  <span class=\"comment\">/*在选择框的最右侧中间显示小箭头图片*/</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"http://ourjs.github.io/static/2015/arrow.png\"</span>) no-repeat scroll right center transparent <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*为下拉小箭头留出一点位置，避免被文字覆盖*/</span></span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>select是有默认样式的，select的一些默认样式我们很难修改，比如图标的替换。<br>参考了一些别人的例子，整理下，如果要切换图片。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-tag\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">  <span class=\"comment\">/*将默认的select选择框样式清除*/</span></span><br><span class=\"line\">  <span class=\"attribute\">appearance</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-appearance</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-appearance</span>: none;</span><br><span class=\"line\">  <span class=\"comment\">/*在选择框的最右侧中间显示小箭头图片*/</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"http://ourjs.github.io/static/2015/arrow.png\"</span>) no-repeat scroll right center transparent <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*为下拉小箭头留出一点位置，避免被文字覆盖*/</span></span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"ES6系列-decorator","_content":"- decorator：修饰器是一个函数，修改行为，修改类的行为。\n```javascript\n{\n    let readonly = (target, name, descriptor) => {\n        descriptor.writable = false\n        return descriptor\n    }\n    class Test {\n        @readonly\n        time() {\n            return '2012-12-12'\n        }\n    }\n    let test = new Test()\n    test.time = () => {\n        console.log('reset time')\n    }\n    console.log(test.time())\n}\n\n\n{\n    let typename = (target, name, descriptor) => {\n        target.myname = 'hello'\n    }\n    @typename\n    class Test {\n\n    }\n    console.log('类的修饰', Test.myname)\n}\n\n{\n    let log = (type) => {\n        return function (target, name, descriptor) {\n            let src_method = descriptor.value;\n            descriptor.value = (...arg)=>{\n                src_method.apply(target.arg);\n                console.log(`log ${type}`)\n            }\n        }\n    }\n    class AD{\n        @log('show')\n        show() {\n            console.log('ad is show')\n        }\n        @log('click')\n        click() {\n            console.log('ad is click')\n        }\n    }\n    let ad = new AD()\n    ad.show()\n    ad.click()\n\n\n    /* \n    ad is show\n    log show\n    ad is click\n    log click\n    */\n}\n\n```","source":"_posts/decorator.md","raw":"---\ntitle: ES6系列-decorator\ncategories: js\ntags: [编程,学习]\n---\n- decorator：修饰器是一个函数，修改行为，修改类的行为。\n```javascript\n{\n    let readonly = (target, name, descriptor) => {\n        descriptor.writable = false\n        return descriptor\n    }\n    class Test {\n        @readonly\n        time() {\n            return '2012-12-12'\n        }\n    }\n    let test = new Test()\n    test.time = () => {\n        console.log('reset time')\n    }\n    console.log(test.time())\n}\n\n\n{\n    let typename = (target, name, descriptor) => {\n        target.myname = 'hello'\n    }\n    @typename\n    class Test {\n\n    }\n    console.log('类的修饰', Test.myname)\n}\n\n{\n    let log = (type) => {\n        return function (target, name, descriptor) {\n            let src_method = descriptor.value;\n            descriptor.value = (...arg)=>{\n                src_method.apply(target.arg);\n                console.log(`log ${type}`)\n            }\n        }\n    }\n    class AD{\n        @log('show')\n        show() {\n            console.log('ad is show')\n        }\n        @log('click')\n        click() {\n            console.log('ad is click')\n        }\n    }\n    let ad = new AD()\n    ad.show()\n    ad.click()\n\n\n    /* \n    ad is show\n    log show\n    ad is click\n    log click\n    */\n}\n\n```","slug":"decorator","published":1,"date":"2021-07-01T07:30:54.545Z","updated":"2021-07-01T07:30:54.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuds000bzgsy84bgkazr","content":"<ul>\n<li>decorator：修饰器是一个函数，修改行为，修改类的行为。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> readonly = <span class=\"function\">(<span class=\"params\">target, name, descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        descriptor.writable = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> descriptor</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">        @readonly</span><br><span class=\"line\">        time() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'2012-12-12'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> Test()</span><br><span class=\"line\">    test.time = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'reset time'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test.time())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> typename = <span class=\"function\">(<span class=\"params\">target, name, descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        target.myname = <span class=\"string\">'hello'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @typename</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'类的修饰'</span>, Test.myname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> log = <span class=\"function\">(<span class=\"params\">type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> src_method = descriptor.value;</span><br><span class=\"line\">            descriptor.value = <span class=\"function\">(<span class=\"params\">...arg</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                src_method.apply(target.arg);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`log <span class=\"subst\">$&#123;type&#125;</span>`</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AD</span></span>&#123;</span><br><span class=\"line\">        @log(<span class=\"string\">'show'</span>)</span><br><span class=\"line\">        show() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ad is show'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @log(<span class=\"string\">'click'</span>)</span><br><span class=\"line\">        click() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ad is click'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ad = <span class=\"keyword\">new</span> AD()</span><br><span class=\"line\">    ad.show()</span><br><span class=\"line\">    ad.click()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">    ad is show</span></span><br><span class=\"line\"><span class=\"comment\">    log show</span></span><br><span class=\"line\"><span class=\"comment\">    ad is click</span></span><br><span class=\"line\"><span class=\"comment\">    log click</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<ul>\n<li>decorator：修饰器是一个函数，修改行为，修改类的行为。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> readonly = <span class=\"function\">(<span class=\"params\">target, name, descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        descriptor.writable = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> descriptor</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">        @readonly</span><br><span class=\"line\">        time() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'2012-12-12'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> Test()</span><br><span class=\"line\">    test.time = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'reset time'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test.time())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> typename = <span class=\"function\">(<span class=\"params\">target, name, descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        target.myname = <span class=\"string\">'hello'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @typename</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'类的修饰'</span>, Test.myname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> log = <span class=\"function\">(<span class=\"params\">type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> src_method = descriptor.value;</span><br><span class=\"line\">            descriptor.value = <span class=\"function\">(<span class=\"params\">...arg</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                src_method.apply(target.arg);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`log <span class=\"subst\">$&#123;type&#125;</span>`</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AD</span></span>&#123;</span><br><span class=\"line\">        @log(<span class=\"string\">'show'</span>)</span><br><span class=\"line\">        show() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ad is show'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @log(<span class=\"string\">'click'</span>)</span><br><span class=\"line\">        click() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ad is click'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ad = <span class=\"keyword\">new</span> AD()</span><br><span class=\"line\">    ad.show()</span><br><span class=\"line\">    ad.click()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">    ad is show</span></span><br><span class=\"line\"><span class=\"comment\">    log show</span></span><br><span class=\"line\"><span class=\"comment\">    ad is click</span></span><br><span class=\"line\"><span class=\"comment\">    log click</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"css奇技淫巧","_content":"\n在项目中总会遇到许多css问题，因此，总结几个常遇到的问题\n- placeholder移动:`text-indent:3`\n- 去除input框:`outline-style:none`\n- background渐变色 :` background: linear-gradient(to bottom, #000000 0%,#ffffff 100%);`\n- 旋转180度带过渡:`-webkit-transform: rotate(180deg);transition: All 0.4s ease-in-out;`\n- 关于垂直居中`vertical-align`可以设置像素值\n- 在组件化的样式中，在类似于‘曰’这种布局的时候，如何动态的把线加载父元素上？\n```css\n.parent{\n    dispaly:flex;\n    flex-direction:row;\n    justify-content:space-around;\n    box-sizing:border-box;\n    &:after{\n        content:'';\n        display:block;\n        width:100%;\n        height:0;\n        box-sizing:border-box;\n        border-bottom:1px solid #ddd;\n        position:relative;\n        top:-208px;\n    }\n}\n```","source":"_posts/css奇淫技巧.md","raw":"---\ntitle: css奇技淫巧\ncategories: css\ntags: [编程,学习]\n---\n\n在项目中总会遇到许多css问题，因此，总结几个常遇到的问题\n- placeholder移动:`text-indent:3`\n- 去除input框:`outline-style:none`\n- background渐变色 :` background: linear-gradient(to bottom, #000000 0%,#ffffff 100%);`\n- 旋转180度带过渡:`-webkit-transform: rotate(180deg);transition: All 0.4s ease-in-out;`\n- 关于垂直居中`vertical-align`可以设置像素值\n- 在组件化的样式中，在类似于‘曰’这种布局的时候，如何动态的把线加载父元素上？\n```css\n.parent{\n    dispaly:flex;\n    flex-direction:row;\n    justify-content:space-around;\n    box-sizing:border-box;\n    &:after{\n        content:'';\n        display:block;\n        width:100%;\n        height:0;\n        box-sizing:border-box;\n        border-bottom:1px solid #ddd;\n        position:relative;\n        top:-208px;\n    }\n}\n```","slug":"css奇淫技巧","published":1,"date":"2021-07-01T07:30:54.545Z","updated":"2021-07-01T07:30:54.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wudu000czgsy1tx0ppuh","content":"<p>在项目中总会遇到许多css问题，因此，总结几个常遇到的问题</p>\n<ul>\n<li>placeholder移动:<code>text-indent:3</code></li>\n<li>去除input框:<code>outline-style:none</code></li>\n<li>background渐变色 :<code>background: linear-gradient(to bottom, #000000 0%,#ffffff 100%);</code></li>\n<li>旋转180度带过渡:<code>-webkit-transform: rotate(180deg);transition: All 0.4s ease-in-out;</code></li>\n<li>关于垂直居中<code>vertical-align</code>可以设置像素值</li>\n<li>在组件化的样式中，在类似于‘曰’这种布局的时候，如何动态的把线加载父元素上？<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">dispaly</span>:flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>:row;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>:space-around;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">    &amp;:after&#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">content</span><span class=\"selector-pseudo\">:''</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:block</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100</span>%;</span><br><span class=\"line\">        <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">box-sizing</span><span class=\"selector-pseudo\">:border-box</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">border-bottom</span><span class=\"selector-pseudo\">:1px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ddd</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:relative</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:-208px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>在项目中总会遇到许多css问题，因此，总结几个常遇到的问题</p>\n<ul>\n<li>placeholder移动:<code>text-indent:3</code></li>\n<li>去除input框:<code>outline-style:none</code></li>\n<li>background渐变色 :<code>background: linear-gradient(to bottom, #000000 0%,#ffffff 100%);</code></li>\n<li>旋转180度带过渡:<code>-webkit-transform: rotate(180deg);transition: All 0.4s ease-in-out;</code></li>\n<li>关于垂直居中<code>vertical-align</code>可以设置像素值</li>\n<li>在组件化的样式中，在类似于‘曰’这种布局的时候，如何动态的把线加载父元素上？<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">dispaly</span>:flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>:row;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>:space-around;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">    &amp;:after&#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">content</span><span class=\"selector-pseudo\">:''</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:block</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100</span>%;</span><br><span class=\"line\">        <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:0</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">box-sizing</span><span class=\"selector-pseudo\">:border-box</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">border-bottom</span><span class=\"selector-pseudo\">:1px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ddd</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:relative</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">top</span><span class=\"selector-pseudo\">:-208px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"ES6 理解api","date":"2017-04-30T16:00:00.000Z","_content":"\n\n```javascript\nfunction sum(x,y,z) {\n    let total = 0;\n    if(x) total += x;\n    if(y) total += y;\n    if(z) total += z;\n    console.log(`total:${total}`)\n}\nsum(1,'',2)\n\nfunction sum2(...m) {    //...rest参数，动态的，不确定的\n    let total = 0;\n    for(var i of m) {\n        total += i\n    }\n    console.log(`total:${total}`)\n}\nsum2(1,2,3) //不能传入字符串，否则会解析为字符串\n\n\nlet sum3 =(...m) =>{\n    let total = 0;\n    for(var i of m) {\n        total += i;\n    }\n    console.log(`total:${total}`)\n}\nsum3(1,2,3)\n\n\n\nvar [x,y] = [4,8] //解构\nconsole.log(...[4,8]) //\n\nlet arr1 = [1,2]\nlet arr2 = [3,4]\nconsole.log(...arr1,...arr2)\nconsole.log([...arr1,...arr2]) //concat\n\nvar [x,...y] = [4,8,12,13] // y : 8,12,13\n\n\nlet [a,b,c] = 'es6' //a:e,b:s,c:6\nlet xy = [...'es6'] //拆解\n```\n\n##### ...放函数里是rest参数，放数组里会进行运算，拆解\n```javascript\nlet checkLogin = function() {\n    return new Promise(function(resolve,reject) {\n        let flag = document.cookie.indexOf('userId') > -1 ? true : false;\n\n        if(flag) {\n            resolve({\n                status:0,\n                result:true\n            })\n        }else{\n            reject('error')  //报错\n        }\n    })\n};\nlet getUserInfo = () => {\n    return new Promise((resolve,reject)=>{\n        let userInfo = {'101'\n        }\n        resolve(userInfo);\n    })\n}\ncheckLogin().then(res=>{\n    if(res.status == 0) {\n        console.log('login');\n        return getUserInfo()\n    }\n}).catch(error=>{\n    console.log('error')\n}).then((res2) =>{\n    console.log(`userId:${userId}`)\n})\n\nPromise.all([checkLogin(),getUserInfo()]).then(([res1,res2])=>{\n    console.log(`result:`${res1.result})\n})\n```\n\n#### import,export\n```javascript\n//utils.js\nexport let sum = (x,y)=>{\n    return x + y;\n}\nexport let sale = (m,n) =>{\n    return m - n;\n}\n\n//router.js\nimport {sum,sale} from './utils'\nconsole.log(`sum:${sum(1,2)}`)\n\n\nimport *as util from './utils'\nconsole.log(`sum:`${util.sum(1,2)})\n\n// import可以异步加载 \n<span @click=\"add\"></span>\nadd(){\n    import('./utils')\n}\n```\n##### AMD,CMD,CommonJs,ES6\n- 模块化，规范，标准\n- AMD是requireJs在推广中对模块定义的规范化产出-同步模块定义 -- 依赖前置\n```javascript\ndefine(['package/lib'],function(lib) {\n    function foo() {\n        lib.log('hello world')\n    }\n    return {\n        foo:foo\n    }\n})\n```\n- CMD是SeaJs在推广过程中对模块定义的规范化产出-同步模块定义--依赖就近\n```javascript\n//所有模块通过define来定义\ndefine(function(require,exports,module) {\n    //通过require引入依赖\n    var $ = require('jquery')\n    var Spinning = require('./spinning')\n})\n```\n- commonJs---module.exports\n* 在浏览器不支持 ==>在node中使用\n```javascript\nexports.area = function() {\n    return Math.PI * r * r;\n}\nexports.circumference = function() {\n    return 2 * Math.PI * r\n}\n```\n\n\n\n- 解构赋值\n```javascript\n\n{\n    let [a,b]  = [1,2]\n}\n\n{\n    let [a,b,c = 3] = [1,2,4]\n    console.log(a,b,c)\n}\n\n{\n    function sum() {\n        return [1,2]\n    }\n    let [a,b] = sum()\n}\n\n{\n    let {a,b} = {a:1,b:2}\n}\n\n{\n    var list = {\n        title:'hello',\n        core:[{\n            title:'tom',\n            age:'34'\n        },{\n            title:'lele',\n            age:'22'\n        }]\n    }\n\n    var {title:newTitle,core:[{title:contentTitle,age:contentAge}]} = list\n    console.log(newTitle,contentTitle,contentAge) //hello tom 34\n\n}\n\n{\n      var list = [{\n            title:'tom',\n            age:'34'\n        },{\n            title:'lele',\n            age:'22'\n        }]\n    \n\n    for(var {title:cTitle,age:cAge} of list) {\n            console.log(cTitle,cAge)//tom 34 lele 22\n    }\n}\n\n\n{\n    let [a,,b] = [1,2,3]  //1,3\n}\n\n\n{\n    let [a,...b] = [1,2,3,4]//1,[2,3,4]\n}\n\n\n{\n    let [a,b] = [2,3]\n    console.log(b);//3\n    [b,a] = [a,b];\n    console.log(b)//2\n   \n}\n\n{\n    let o = {\n        p:42,\n        q:true\n    }\n    let {p,q} = o\n    console.log(p,q)\n}\n\n```\n\n- 字符串扩展\n```javascript\n{\n    let str = 'string'\n    console.log(str.includes('g'),str.startsWith('st'),str.endsWith('ng'))//true true true\n}\n\n\n{\n    let str = 'string'\n    console.log(str.repeat(2)) //stringstring\n}\n\n{\n    // 补白\n    console.log('1'.padStart(2,'0'))\n    console.log('1'.padEnd(2,'0'))\n}\n\n{\n    // 标签模板 适用于多语言和xss攻击\n     let user = {\n         name:'Tom',\n         age:'23'\n     }\n     function person(s,v1,v2) {\n         return s + v1 + v2\n     }\n     person`i am ${user.name},my age is ${user.age}`\n\n}\n```\n- 数值扩展\n```javascript\n{\n    Number.isFinite(12)\n    Number.isNaN(NaN)\n    Number.isInteger(2)\n    Number.isSafeInteger(2) //是否在有效范围之内\n    Math.trunc(3.2)//返回小数的整数部分,3\n    Math.sign(-5)//-1,0,1 ==>判断是正数负数还是0\n    Math.cbrt(-2)\n}\n```\n- 数组扩展\n`Array.form,Array.of,copyWithin,find/findIndex,fill,entries/keys/values,inludes`\n```javascript\nlet arr = Array.of(1,2,3,4,5) //把一组数据变量转化为数组类型\n// 把一些集合转化为数组\nArray.from([1,2,3,4,5],item=>item*2)   //2,4,6,8,10\n\n[1,2,3].fill(7)  //[7,7,7]\n[1,'a',undefined,3].fill(9) //(4) [9, 9, 9, 9]\n[1,2,3,4,5,6,7].fill(8,1,3) \n[1,2,3,4,5,6,7].fill(8,1,3) //(7) [1, 8, 8, 4, 5, 6, 7]\n\nfor(let index of [1,2,3,4,5].keys()) {\n    console.log(index)  //0,1,2,3,4\n}\n\nfor(var val of ['a',1,'b'].values()) {\n    console.log(val) //a,1,b\n}\n\n\nfor(let [index,val] of [1,'a','cc',9].entries()) {\n    console.log(index,val)\n}\n//  0 1\n//  1 \"a\"\n//  2 \"cc\"\n//  3 9\n[1,2,3,4,5].copyWithin(0,2,4) //(5) [3, 4, 3, 4, 5]\n\n\n//查找一个元素是否在一个数组中\n[1,2,3,4,5].find(item => item > 3 ) //4 只找一个\n[1,2,3,4,5].findIndex(item =>item > 3) //返回当前符合元素的下标\n[1,2,3].includes(2)\n\n[NaN].includes(NaN) //true\n\n```\n- 函数扩展\n```javascript \n function test(x,y = 'world') {\n     console.log(x,y)\n }\n test() //undefined,world\n\n\nlet x = 'one'\nfunction test(x,y = x) {\n    console.log(x,y)\n}\ntest('two') //two,two\n\n\nlet x = 'one'\nfunction test(c,y = x) {\n    console.log(x,y)\n}\ntest('two') //two,one\n\n\nfunction test(...args) {\n    for(let val of args) {\n        console.log(val)\n    }\n}\ntest(1,2,3,4,5)   //1,2,3,4,5\n// 把数组转化为离散的值\nconsole.log(...[1,2,3])\n//合并\nconsole.log(...[1,3,4],...[9,8])\n\nlet arrow = item =>item * 2\narrow(3) //6\n\n//尾调用\nfunction tail(x) {\n    console.log(x)\n}\nfunction tx(x) {\n    return tail(x)\n}\ntx(4) //4\n```\n- 对象扩展\n```javascript\n//简介表达式\nlet name = 'lele'\nlet age = 12\n\nlet dog = {\n    name,\n    age,\n    }\n//属性表达式\nlet a = 'b'\nlet es5 = {\n    a:'c',\n    b:'c'\n}\nlet es6 = {\n    [a]:'c'\n}\nconsole.log(es5,es6)\n\n//{a: \"c\", b: \"c\"}, {b: \"c\"}\n\n// 新增api\nObject.is('abc','abc')\nObject.assign({a:1},{b:'b'}) //{a: 1, b: \"b\"}\n\n\nlet test = {k:123,v:456}\nfor(let [key,val] of Object.entries(test)) {\n    console.log(key,val)\n}\n// k 123\n// v 456\n```\n- Symbol\n```javascript   \nlet a1 = Symbol()\nlet a2 = Symbol()\na1 == a2 //false\n\nlet a3 = Symbol.for('a3')\nlet a4 = Symbol.for('a3')\na3 == a4 //true\n\nlet aa = Symbol.for('abc')\nlet obj = {\n    [aa]:123,\n    'abc':345,\n    'c':456\n}\nconsole.log(obj)\n\n/* \n{abc: 345, c: 456, Symbol(abc): 123}\nabc: 345\nc: 456\nSymbol(abc): 123 \n*/\n\nfor(let [attr,val] of Object.entries(obj)) {\n    console.log(attr,val)\n}\n\n/* \nabc 345\nc 456 \n不会循环到Symbol*/\n\nObject.getOwnPropertySymbols(obj).forEach(item=>console.log(item,obj[item]))\n//Symbol(abc),123\n\nReflect.ownKeys(obj).forEach(item=>console.log(item))\n/*\nabc\nc\nSymbol(abc) */\n```\n- set-map结构\n```javascript\nlet a1 = new Set()\na1.add(2)\na1.add(3)\nadd.size; //2\n\n\n{\n   let arr = [1,2,3,4]\n   let list = new Set(arr)\n   lise.size;//4 \n}\n//可用于数组去重\n{\n    let arr = [1,2,1,2,1]\n    let arr1 = Array.from(new Set(arr))   //[1, 2]\n    arr instanceof Array  //true\n}\n\n{\n    let arr = ['add','delete','clear','has']\n    let list = new Set(arr)\n    list.has('add')  //true\n    list.delete('add') //list ==> {\"delete\", \"clear\", \"has\"}\n    list.clear() //list ==> {}\n}\n\n//遍历\nfor(let val of arr.values()) {\n    console.log(val)\n}\n\n/* \nadd\ndelete\nclear\nhas \n*/\n\nfor(let attr of arr.keys()) {\n    console.log(attr)\n}\n/* \n0\n1\n2\n3 \n*/\n\nfor(let [attr,val] of arr.entries()) {\n    console.log(attr,val)\n}\n/*\n0 \"add\"\n1 \"delete\"\n2 \"clear\"\n3 \"has\" \n*/\n\nlist.forEach(item =>console.log(item))\n/* \nadd\ndelete\nclear\nhas\n */\n\n\n{\n    //weekSet()必须是对象，不会检测，不用担心内存泄漏，如果别的对象不引用该对象， 这个对象会被垃圾回收机制自动回收；\n    let weakList = new WeakSet()\n    let arg = {}\n    weakList.add(arg)\n    weakList.add(2) //报错\n    // 没有clear方法，没有set属性，不能遍历\n    console.log(weakList)\n}\n\n\n{\n    let list = new Map()\n    let arr = ['123']\n    list.set(arr,456)\n    console.log(list,list.get(arr)) //Map(1) {Array(1) => 456} 456\n}\n\n{\n    let map = new Map([['a',123],['b',456]])\n    console.log(map) //Map(2) {\"a\" => 123, \"b\" => 456}\n    map.size; //2\n    map.delete('a')\n    map.clear()\n}\n\n{\n    let weakMap = new WeakMap()   //===>和WeakSet()相同\n}\n\n// set-map与数组和对象的对比\n{\n    let map = new Map()\n    let array = []\n    // 增\n    map.set('t',1)\n    array.push({t:1})\n    console.info(map,array)\n    // Map(1) {\"t\" => 1} [{t: 1}]\n\n    // 删\n    map.delete('t')\n    let index = array.findIndex(item =>item.t)\n    array.splice(index,1)\n    console.info(map,array)\n    // Map(0) {} []\n\n    //改\n    map.set('t',2)\n    // array['t'] = 2\n    array.forEach(item=>item.t? item.t = 2:'')\n    console.info(map,array)\n    // Map(1) {\"t\" => 2} [t: 2]\n\n    // 查\n    map.has('t')\n    array.find(item=>item.t)\n     // Map(1) {\"t\" => 2} [t: 2]\n}\n\n{\n    let set = new Set()\n    let array = []\n    // 增\n    set.add('t',1)\n    array.push({t:1})\n    console.log(set,array)\n    // {\"t\" => 1} [{t: 1}]\n\n    // 删\n    set.delete('t')\n    let index = array.forEach(item=>item.t)\n    array.splice(index,1)\n    console.log(set,array)\n\n    // 改 ==>有问题\n    set.forEach(item=>item.t?item.t = 2:'')\n    array.forEach(item=>item.t?item.t = 2:'')\n     console.log(set,array)\n\n    // 查  ==》有问题\n    set.has('t')\n    console.log(set)\n}\n\n{\n    let set = new Set()\n    let map = new Map()\n    let obj = {}\n    // 增\n    set.add('t',1)\n    map.set('t',1)\n    obj['t'] = 1\n    console.log(set,map,obj)\n    // Set(1) {\"t\"} Map(1) {\"t\" => 1} {k: 1}\n\n    // 删\n    set.delete('t')\n    map.delete('t')\n    delete obj['t']\n    console.log(set,map,obj) \n    //{}{}{}\n    // 改\n    map.set('t',2)\n    obj['t'] = 2\n    // 查\n    console.log({\n        a: set.has('t'),\n        b:map.has('t'),\n        c:'t' in obj\n    })\n    //true true true\n}\n```\n","source":"_posts/es6.md","raw":"---\ntitle: ES6 理解api\ndate: 2017-05-01\ncategories: js\ntags: [编程,学习]\n---\n\n\n```javascript\nfunction sum(x,y,z) {\n    let total = 0;\n    if(x) total += x;\n    if(y) total += y;\n    if(z) total += z;\n    console.log(`total:${total}`)\n}\nsum(1,'',2)\n\nfunction sum2(...m) {    //...rest参数，动态的，不确定的\n    let total = 0;\n    for(var i of m) {\n        total += i\n    }\n    console.log(`total:${total}`)\n}\nsum2(1,2,3) //不能传入字符串，否则会解析为字符串\n\n\nlet sum3 =(...m) =>{\n    let total = 0;\n    for(var i of m) {\n        total += i;\n    }\n    console.log(`total:${total}`)\n}\nsum3(1,2,3)\n\n\n\nvar [x,y] = [4,8] //解构\nconsole.log(...[4,8]) //\n\nlet arr1 = [1,2]\nlet arr2 = [3,4]\nconsole.log(...arr1,...arr2)\nconsole.log([...arr1,...arr2]) //concat\n\nvar [x,...y] = [4,8,12,13] // y : 8,12,13\n\n\nlet [a,b,c] = 'es6' //a:e,b:s,c:6\nlet xy = [...'es6'] //拆解\n```\n\n##### ...放函数里是rest参数，放数组里会进行运算，拆解\n```javascript\nlet checkLogin = function() {\n    return new Promise(function(resolve,reject) {\n        let flag = document.cookie.indexOf('userId') > -1 ? true : false;\n\n        if(flag) {\n            resolve({\n                status:0,\n                result:true\n            })\n        }else{\n            reject('error')  //报错\n        }\n    })\n};\nlet getUserInfo = () => {\n    return new Promise((resolve,reject)=>{\n        let userInfo = {'101'\n        }\n        resolve(userInfo);\n    })\n}\ncheckLogin().then(res=>{\n    if(res.status == 0) {\n        console.log('login');\n        return getUserInfo()\n    }\n}).catch(error=>{\n    console.log('error')\n}).then((res2) =>{\n    console.log(`userId:${userId}`)\n})\n\nPromise.all([checkLogin(),getUserInfo()]).then(([res1,res2])=>{\n    console.log(`result:`${res1.result})\n})\n```\n\n#### import,export\n```javascript\n//utils.js\nexport let sum = (x,y)=>{\n    return x + y;\n}\nexport let sale = (m,n) =>{\n    return m - n;\n}\n\n//router.js\nimport {sum,sale} from './utils'\nconsole.log(`sum:${sum(1,2)}`)\n\n\nimport *as util from './utils'\nconsole.log(`sum:`${util.sum(1,2)})\n\n// import可以异步加载 \n<span @click=\"add\"></span>\nadd(){\n    import('./utils')\n}\n```\n##### AMD,CMD,CommonJs,ES6\n- 模块化，规范，标准\n- AMD是requireJs在推广中对模块定义的规范化产出-同步模块定义 -- 依赖前置\n```javascript\ndefine(['package/lib'],function(lib) {\n    function foo() {\n        lib.log('hello world')\n    }\n    return {\n        foo:foo\n    }\n})\n```\n- CMD是SeaJs在推广过程中对模块定义的规范化产出-同步模块定义--依赖就近\n```javascript\n//所有模块通过define来定义\ndefine(function(require,exports,module) {\n    //通过require引入依赖\n    var $ = require('jquery')\n    var Spinning = require('./spinning')\n})\n```\n- commonJs---module.exports\n* 在浏览器不支持 ==>在node中使用\n```javascript\nexports.area = function() {\n    return Math.PI * r * r;\n}\nexports.circumference = function() {\n    return 2 * Math.PI * r\n}\n```\n\n\n\n- 解构赋值\n```javascript\n\n{\n    let [a,b]  = [1,2]\n}\n\n{\n    let [a,b,c = 3] = [1,2,4]\n    console.log(a,b,c)\n}\n\n{\n    function sum() {\n        return [1,2]\n    }\n    let [a,b] = sum()\n}\n\n{\n    let {a,b} = {a:1,b:2}\n}\n\n{\n    var list = {\n        title:'hello',\n        core:[{\n            title:'tom',\n            age:'34'\n        },{\n            title:'lele',\n            age:'22'\n        }]\n    }\n\n    var {title:newTitle,core:[{title:contentTitle,age:contentAge}]} = list\n    console.log(newTitle,contentTitle,contentAge) //hello tom 34\n\n}\n\n{\n      var list = [{\n            title:'tom',\n            age:'34'\n        },{\n            title:'lele',\n            age:'22'\n        }]\n    \n\n    for(var {title:cTitle,age:cAge} of list) {\n            console.log(cTitle,cAge)//tom 34 lele 22\n    }\n}\n\n\n{\n    let [a,,b] = [1,2,3]  //1,3\n}\n\n\n{\n    let [a,...b] = [1,2,3,4]//1,[2,3,4]\n}\n\n\n{\n    let [a,b] = [2,3]\n    console.log(b);//3\n    [b,a] = [a,b];\n    console.log(b)//2\n   \n}\n\n{\n    let o = {\n        p:42,\n        q:true\n    }\n    let {p,q} = o\n    console.log(p,q)\n}\n\n```\n\n- 字符串扩展\n```javascript\n{\n    let str = 'string'\n    console.log(str.includes('g'),str.startsWith('st'),str.endsWith('ng'))//true true true\n}\n\n\n{\n    let str = 'string'\n    console.log(str.repeat(2)) //stringstring\n}\n\n{\n    // 补白\n    console.log('1'.padStart(2,'0'))\n    console.log('1'.padEnd(2,'0'))\n}\n\n{\n    // 标签模板 适用于多语言和xss攻击\n     let user = {\n         name:'Tom',\n         age:'23'\n     }\n     function person(s,v1,v2) {\n         return s + v1 + v2\n     }\n     person`i am ${user.name},my age is ${user.age}`\n\n}\n```\n- 数值扩展\n```javascript\n{\n    Number.isFinite(12)\n    Number.isNaN(NaN)\n    Number.isInteger(2)\n    Number.isSafeInteger(2) //是否在有效范围之内\n    Math.trunc(3.2)//返回小数的整数部分,3\n    Math.sign(-5)//-1,0,1 ==>判断是正数负数还是0\n    Math.cbrt(-2)\n}\n```\n- 数组扩展\n`Array.form,Array.of,copyWithin,find/findIndex,fill,entries/keys/values,inludes`\n```javascript\nlet arr = Array.of(1,2,3,4,5) //把一组数据变量转化为数组类型\n// 把一些集合转化为数组\nArray.from([1,2,3,4,5],item=>item*2)   //2,4,6,8,10\n\n[1,2,3].fill(7)  //[7,7,7]\n[1,'a',undefined,3].fill(9) //(4) [9, 9, 9, 9]\n[1,2,3,4,5,6,7].fill(8,1,3) \n[1,2,3,4,5,6,7].fill(8,1,3) //(7) [1, 8, 8, 4, 5, 6, 7]\n\nfor(let index of [1,2,3,4,5].keys()) {\n    console.log(index)  //0,1,2,3,4\n}\n\nfor(var val of ['a',1,'b'].values()) {\n    console.log(val) //a,1,b\n}\n\n\nfor(let [index,val] of [1,'a','cc',9].entries()) {\n    console.log(index,val)\n}\n//  0 1\n//  1 \"a\"\n//  2 \"cc\"\n//  3 9\n[1,2,3,4,5].copyWithin(0,2,4) //(5) [3, 4, 3, 4, 5]\n\n\n//查找一个元素是否在一个数组中\n[1,2,3,4,5].find(item => item > 3 ) //4 只找一个\n[1,2,3,4,5].findIndex(item =>item > 3) //返回当前符合元素的下标\n[1,2,3].includes(2)\n\n[NaN].includes(NaN) //true\n\n```\n- 函数扩展\n```javascript \n function test(x,y = 'world') {\n     console.log(x,y)\n }\n test() //undefined,world\n\n\nlet x = 'one'\nfunction test(x,y = x) {\n    console.log(x,y)\n}\ntest('two') //two,two\n\n\nlet x = 'one'\nfunction test(c,y = x) {\n    console.log(x,y)\n}\ntest('two') //two,one\n\n\nfunction test(...args) {\n    for(let val of args) {\n        console.log(val)\n    }\n}\ntest(1,2,3,4,5)   //1,2,3,4,5\n// 把数组转化为离散的值\nconsole.log(...[1,2,3])\n//合并\nconsole.log(...[1,3,4],...[9,8])\n\nlet arrow = item =>item * 2\narrow(3) //6\n\n//尾调用\nfunction tail(x) {\n    console.log(x)\n}\nfunction tx(x) {\n    return tail(x)\n}\ntx(4) //4\n```\n- 对象扩展\n```javascript\n//简介表达式\nlet name = 'lele'\nlet age = 12\n\nlet dog = {\n    name,\n    age,\n    }\n//属性表达式\nlet a = 'b'\nlet es5 = {\n    a:'c',\n    b:'c'\n}\nlet es6 = {\n    [a]:'c'\n}\nconsole.log(es5,es6)\n\n//{a: \"c\", b: \"c\"}, {b: \"c\"}\n\n// 新增api\nObject.is('abc','abc')\nObject.assign({a:1},{b:'b'}) //{a: 1, b: \"b\"}\n\n\nlet test = {k:123,v:456}\nfor(let [key,val] of Object.entries(test)) {\n    console.log(key,val)\n}\n// k 123\n// v 456\n```\n- Symbol\n```javascript   \nlet a1 = Symbol()\nlet a2 = Symbol()\na1 == a2 //false\n\nlet a3 = Symbol.for('a3')\nlet a4 = Symbol.for('a3')\na3 == a4 //true\n\nlet aa = Symbol.for('abc')\nlet obj = {\n    [aa]:123,\n    'abc':345,\n    'c':456\n}\nconsole.log(obj)\n\n/* \n{abc: 345, c: 456, Symbol(abc): 123}\nabc: 345\nc: 456\nSymbol(abc): 123 \n*/\n\nfor(let [attr,val] of Object.entries(obj)) {\n    console.log(attr,val)\n}\n\n/* \nabc 345\nc 456 \n不会循环到Symbol*/\n\nObject.getOwnPropertySymbols(obj).forEach(item=>console.log(item,obj[item]))\n//Symbol(abc),123\n\nReflect.ownKeys(obj).forEach(item=>console.log(item))\n/*\nabc\nc\nSymbol(abc) */\n```\n- set-map结构\n```javascript\nlet a1 = new Set()\na1.add(2)\na1.add(3)\nadd.size; //2\n\n\n{\n   let arr = [1,2,3,4]\n   let list = new Set(arr)\n   lise.size;//4 \n}\n//可用于数组去重\n{\n    let arr = [1,2,1,2,1]\n    let arr1 = Array.from(new Set(arr))   //[1, 2]\n    arr instanceof Array  //true\n}\n\n{\n    let arr = ['add','delete','clear','has']\n    let list = new Set(arr)\n    list.has('add')  //true\n    list.delete('add') //list ==> {\"delete\", \"clear\", \"has\"}\n    list.clear() //list ==> {}\n}\n\n//遍历\nfor(let val of arr.values()) {\n    console.log(val)\n}\n\n/* \nadd\ndelete\nclear\nhas \n*/\n\nfor(let attr of arr.keys()) {\n    console.log(attr)\n}\n/* \n0\n1\n2\n3 \n*/\n\nfor(let [attr,val] of arr.entries()) {\n    console.log(attr,val)\n}\n/*\n0 \"add\"\n1 \"delete\"\n2 \"clear\"\n3 \"has\" \n*/\n\nlist.forEach(item =>console.log(item))\n/* \nadd\ndelete\nclear\nhas\n */\n\n\n{\n    //weekSet()必须是对象，不会检测，不用担心内存泄漏，如果别的对象不引用该对象， 这个对象会被垃圾回收机制自动回收；\n    let weakList = new WeakSet()\n    let arg = {}\n    weakList.add(arg)\n    weakList.add(2) //报错\n    // 没有clear方法，没有set属性，不能遍历\n    console.log(weakList)\n}\n\n\n{\n    let list = new Map()\n    let arr = ['123']\n    list.set(arr,456)\n    console.log(list,list.get(arr)) //Map(1) {Array(1) => 456} 456\n}\n\n{\n    let map = new Map([['a',123],['b',456]])\n    console.log(map) //Map(2) {\"a\" => 123, \"b\" => 456}\n    map.size; //2\n    map.delete('a')\n    map.clear()\n}\n\n{\n    let weakMap = new WeakMap()   //===>和WeakSet()相同\n}\n\n// set-map与数组和对象的对比\n{\n    let map = new Map()\n    let array = []\n    // 增\n    map.set('t',1)\n    array.push({t:1})\n    console.info(map,array)\n    // Map(1) {\"t\" => 1} [{t: 1}]\n\n    // 删\n    map.delete('t')\n    let index = array.findIndex(item =>item.t)\n    array.splice(index,1)\n    console.info(map,array)\n    // Map(0) {} []\n\n    //改\n    map.set('t',2)\n    // array['t'] = 2\n    array.forEach(item=>item.t? item.t = 2:'')\n    console.info(map,array)\n    // Map(1) {\"t\" => 2} [t: 2]\n\n    // 查\n    map.has('t')\n    array.find(item=>item.t)\n     // Map(1) {\"t\" => 2} [t: 2]\n}\n\n{\n    let set = new Set()\n    let array = []\n    // 增\n    set.add('t',1)\n    array.push({t:1})\n    console.log(set,array)\n    // {\"t\" => 1} [{t: 1}]\n\n    // 删\n    set.delete('t')\n    let index = array.forEach(item=>item.t)\n    array.splice(index,1)\n    console.log(set,array)\n\n    // 改 ==>有问题\n    set.forEach(item=>item.t?item.t = 2:'')\n    array.forEach(item=>item.t?item.t = 2:'')\n     console.log(set,array)\n\n    // 查  ==》有问题\n    set.has('t')\n    console.log(set)\n}\n\n{\n    let set = new Set()\n    let map = new Map()\n    let obj = {}\n    // 增\n    set.add('t',1)\n    map.set('t',1)\n    obj['t'] = 1\n    console.log(set,map,obj)\n    // Set(1) {\"t\"} Map(1) {\"t\" => 1} {k: 1}\n\n    // 删\n    set.delete('t')\n    map.delete('t')\n    delete obj['t']\n    console.log(set,map,obj) \n    //{}{}{}\n    // 改\n    map.set('t',2)\n    obj['t'] = 2\n    // 查\n    console.log({\n        a: set.has('t'),\n        b:map.has('t'),\n        c:'t' in obj\n    })\n    //true true true\n}\n```\n","slug":"es6","published":1,"updated":"2021-07-01T07:30:54.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wudx000gzgsyhb66gzrj","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x,y,z</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x) total += x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y) total += y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(z) total += z;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`total:<span class=\"subst\">$&#123;total&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(<span class=\"number\">1</span>,<span class=\"string\">''</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum2</span>(<span class=\"params\">...m</span>) </span>&#123;    <span class=\"comment\">//...rest参数，动态的，不确定的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> m) &#123;</span><br><span class=\"line\">        total += i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`total:<span class=\"subst\">$&#123;total&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum2(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">//不能传入字符串，否则会解析为字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sum3 =<span class=\"function\">(<span class=\"params\">...m</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> m) &#123;</span><br><span class=\"line\">        total += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`total:<span class=\"subst\">$&#123;total&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum3(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [x,y] = [<span class=\"number\">4</span>,<span class=\"number\">8</span>] <span class=\"comment\">//解构</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">4</span>,<span class=\"number\">8</span>]) <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...arr1,...arr2)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...arr1,...arr2]) <span class=\"comment\">//concat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [x,...y] = [<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>] <span class=\"comment\">// y : 8,12,13</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = <span class=\"string\">'es6'</span> <span class=\"comment\">//a:e,b:s,c:6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> xy = [...<span class=\"string\">'es6'</span>] <span class=\"comment\">//拆解</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"…放函数里是rest参数，放数组里会进行运算，拆解\"><a href=\"#…放函数里是rest参数，放数组里会进行运算，拆解\" class=\"headerlink\" title=\"…放函数里是rest参数，放数组里会进行运算，拆解\"></a>…放函数里是rest参数，放数组里会进行运算，拆解</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> checkLogin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> flag = <span class=\"built_in\">document</span>.cookie.indexOf(<span class=\"string\">'userId'</span>) &gt; <span class=\"number\">-1</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag) &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">                status:<span class=\"number\">0</span>,</span><br><span class=\"line\">                result:<span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'error'</span>)  <span class=\"comment\">//报错</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> getUserInfo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> userInfo = &#123;<span class=\"string\">'101'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resolve(userInfo);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">checkLogin().then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res.status == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'login'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getUserInfo()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">res2</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`userId:<span class=\"subst\">$&#123;userId&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([checkLogin(),getUserInfo()]).then(<span class=\"function\">(<span class=\"params\">[res1,res2]</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`result:`</span>$&#123;res1.result&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"import-export\"><a href=\"#import-export\" class=\"headerlink\" title=\"import,export\"></a>import,export</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//utils.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> sum = <span class=\"function\">(<span class=\"params\">x,y</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> sale = <span class=\"function\">(<span class=\"params\">m,n</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m - n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//router.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;sum,sale&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./utils'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`sum:<span class=\"subst\">$&#123;sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>)&#125;</span>`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> *<span class=\"keyword\">as</span> util <span class=\"keyword\">from</span> <span class=\"string\">'./utils'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`sum:`</span>$&#123;util.sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// import可以异步加载 </span></span><br><span class=\"line\">&lt;span @click=<span class=\"string\">\"add\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">add()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"AMD-CMD-CommonJs-ES6\"><a href=\"#AMD-CMD-CommonJs-ES6\" class=\"headerlink\" title=\"AMD,CMD,CommonJs,ES6\"></a>AMD,CMD,CommonJs,ES6</h5><ul>\n<li>模块化，规范，标准</li>\n<li><p>AMD是requireJs在推广中对模块定义的规范化产出-同步模块定义 – 依赖前置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'package/lib'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">lib</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        lib.log(<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        foo:foo</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CMD是SeaJs在推广过程中对模块定义的规范化产出-同步模块定义–依赖就近</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有模块通过define来定义</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require,exports,module</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过require引入依赖</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Spinning = <span class=\"built_in\">require</span>(<span class=\"string\">'./spinning'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>commonJs—module.exports</p>\n</li>\n</ul>\n<ul>\n<li>在浏览器不支持 ==&gt;在node中使用<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.area = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * r * r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.circumference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * r</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>解构赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a,b]  = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a,b,c = <span class=\"number\">3</span>] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a,b,c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a,b] = sum()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;a,b&#125; = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> list = &#123;</span><br><span class=\"line\">        title:<span class=\"string\">'hello'</span>,</span><br><span class=\"line\">        core:[&#123;</span><br><span class=\"line\">            title:<span class=\"string\">'tom'</span>,</span><br><span class=\"line\">            age:<span class=\"string\">'34'</span></span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">            title:<span class=\"string\">'lele'</span>,</span><br><span class=\"line\">            age:<span class=\"string\">'22'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> &#123;<span class=\"attr\">title</span>:newTitle,<span class=\"attr\">core</span>:[&#123;<span class=\"attr\">title</span>:contentTitle,<span class=\"attr\">age</span>:contentAge&#125;]&#125; = list</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newTitle,contentTitle,contentAge) <span class=\"comment\">//hello tom 34</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> list = [&#123;</span><br><span class=\"line\">            title:<span class=\"string\">'tom'</span>,</span><br><span class=\"line\">            age:<span class=\"string\">'34'</span></span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">            title:<span class=\"string\">'lele'</span>,</span><br><span class=\"line\">            age:<span class=\"string\">'22'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> &#123;<span class=\"attr\">title</span>:cTitle,<span class=\"attr\">age</span>:cAge&#125; <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(cTitle,cAge)<span class=\"comment\">//tom 34 lele 22</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a,,b] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]  <span class=\"comment\">//1,3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a,...b] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]<span class=\"comment\">//1,[2,3,4]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a,b] = [<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);<span class=\"comment\">//3</span></span><br><span class=\"line\">    [b,a] = [a,b];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b)<span class=\"comment\">//2</span></span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> o = &#123;</span><br><span class=\"line\">        p:<span class=\"number\">42</span>,</span><br><span class=\"line\">        q:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;p,q&#125; = o</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p,q)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串扩展</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">'string'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">'g'</span>),str.startsWith(<span class=\"string\">'st'</span>),str.endsWith(<span class=\"string\">'ng'</span>))<span class=\"comment\">//true true true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">'string'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str.repeat(<span class=\"number\">2</span>)) <span class=\"comment\">//stringstring</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 补白</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>.padStart(<span class=\"number\">2</span>,<span class=\"string\">'0'</span>))</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>.padEnd(<span class=\"number\">2</span>,<span class=\"string\">'0'</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 标签模板 适用于多语言和xss攻击</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">         name:<span class=\"string\">'Tom'</span>,</span><br><span class=\"line\">         age:<span class=\"string\">'23'</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">s,v1,v2</span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> s + v1 + v2</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     person<span class=\"string\">`i am <span class=\"subst\">$&#123;user.name&#125;</span>,my age is <span class=\"subst\">$&#123;user.age&#125;</span>`</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数值扩展</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">12</span>)</span><br><span class=\"line\">    <span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\">    <span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">Number</span>.isSafeInteger(<span class=\"number\">2</span>) <span class=\"comment\">//是否在有效范围之内</span></span><br><span class=\"line\">    <span class=\"built_in\">Math</span>.trunc(<span class=\"number\">3.2</span>)<span class=\"comment\">//返回小数的整数部分,3</span></span><br><span class=\"line\">    <span class=\"built_in\">Math</span>.sign(<span class=\"number\">-5</span>)<span class=\"comment\">//-1,0,1 ==&gt;判断是正数负数还是0</span></span><br><span class=\"line\">    <span class=\"built_in\">Math</span>.cbrt(<span class=\"number\">-2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组扩展<br><code>Array.form,Array.of,copyWithin,find/findIndex,fill,entries/keys/values,inludes</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>) <span class=\"comment\">//把一组数据变量转化为数组类型</span></span><br><span class=\"line\"><span class=\"comment\">// 把一些集合转化为数组</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>],item=&gt;item*<span class=\"number\">2</span>)   <span class=\"comment\">//2,4,6,8,10</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].fill(<span class=\"number\">7</span>)  <span class=\"comment\">//[7,7,7]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"string\">'a'</span>,<span class=\"literal\">undefined</span>,<span class=\"number\">3</span>].fill(<span class=\"number\">9</span>) <span class=\"comment\">//(4) [9, 9, 9, 9]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>].fill(<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>) </span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>].fill(<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>) <span class=\"comment\">//(7) [1, 8, 8, 4, 5, 6, 7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].keys()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index)  <span class=\"comment\">//0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>,<span class=\"number\">1</span>,<span class=\"string\">'b'</span>].values()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val) <span class=\"comment\">//a,1,b</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [index,val] <span class=\"keyword\">of</span> [<span class=\"number\">1</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'cc'</span>,<span class=\"number\">9</span>].entries()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index,val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  0 1</span></span><br><span class=\"line\"><span class=\"comment\">//  1 \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">//  2 \"cc\"</span></span><br><span class=\"line\"><span class=\"comment\">//  3 9</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>) <span class=\"comment\">//(5) [3, 4, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查找一个元素是否在一个数组中</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].find(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item &gt; <span class=\"number\">3</span> ) <span class=\"comment\">//4 只找一个</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].findIndex(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span>item &gt; <span class=\"number\">3</span>) <span class=\"comment\">//返回当前符合元素的下标</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].includes(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数扩展</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">x,y = <span class=\"string\">'world'</span></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(x,y)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> test() <span class=\"comment\">//undefined,world</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"string\">'one'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">x,y = x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x,y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"string\">'two'</span>) <span class=\"comment\">//two,two</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"string\">'one'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">c,y = x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x,y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"string\">'two'</span>) <span class=\"comment\">//two,one</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> val <span class=\"keyword\">of</span> args) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)   <span class=\"comment\">//1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// 把数组转化为离散的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">//合并</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],...[<span class=\"number\">9</span>,<span class=\"number\">8</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrow = <span class=\"function\"><span class=\"params\">item</span> =&gt;</span>item * <span class=\"number\">2</span></span><br><span class=\"line\">arrow(<span class=\"number\">3</span>) <span class=\"comment\">//6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尾调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tail</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tx</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tail(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">tx(<span class=\"number\">4</span>) <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象扩展</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简介表达式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'lele'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//属性表达式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> es5 = &#123;</span><br><span class=\"line\">    a:<span class=\"string\">'c'</span>,</span><br><span class=\"line\">    b:<span class=\"string\">'c'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> es6 = &#123;</span><br><span class=\"line\">    [a]:<span class=\"string\">'c'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es5,es6)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123;a: \"c\", b: \"c\"&#125;, &#123;b: \"c\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新增api</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"string\">'abc'</span>,<span class=\"string\">'abc'</span>)</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'b'</span>&#125;) <span class=\"comment\">//&#123;a: 1, b: \"b\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> test = &#123;<span class=\"attr\">k</span>:<span class=\"number\">123</span>,<span class=\"attr\">v</span>:<span class=\"number\">456</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [key,val] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(test)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key,val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// k 123</span></span><br><span class=\"line\"><span class=\"comment\">// v 456</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Symbol</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a1 = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\">a1 == a2 <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a3 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'a3'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a4 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'a3'</span>)</span><br><span class=\"line\">a3 == a4 <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> aa = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'abc'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    [aa]:<span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"string\">'abc'</span>:<span class=\"number\">345</span>,</span><br><span class=\"line\">    <span class=\"string\">'c'</span>:<span class=\"number\">456</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">&#123;abc: 345, c: 456, Symbol(abc): 123&#125;</span></span><br><span class=\"line\"><span class=\"comment\">abc: 345</span></span><br><span class=\"line\"><span class=\"comment\">c: 456</span></span><br><span class=\"line\"><span class=\"comment\">Symbol(abc): 123 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [attr,val] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(obj)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(attr,val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">abc 345</span></span><br><span class=\"line\"><span class=\"comment\">c 456 </span></span><br><span class=\"line\"><span class=\"comment\">不会循环到Symbol*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertySymbols(obj).forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span><span class=\"built_in\">console</span>.log(item,obj[item]))</span><br><span class=\"line\"><span class=\"comment\">//Symbol(abc),123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.ownKeys(obj).forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span><span class=\"built_in\">console</span>.log(item))</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">abc</span></span><br><span class=\"line\"><span class=\"comment\">c</span></span><br><span class=\"line\"><span class=\"comment\">Symbol(abc) */</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>set-map结构</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">a1.add(<span class=\"number\">2</span>)</span><br><span class=\"line\">a1.add(<span class=\"number\">3</span>)</span><br><span class=\"line\">add.size; <span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">   <span class=\"keyword\">let</span> list = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr)</span><br><span class=\"line\">   lise.size;<span class=\"comment\">//4 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可用于数组去重</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr1 = <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr))   <span class=\"comment\">//[1, 2]</span></span><br><span class=\"line\">    arr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>  <span class=\"comment\">//true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [<span class=\"string\">'add'</span>,<span class=\"string\">'delete'</span>,<span class=\"string\">'clear'</span>,<span class=\"string\">'has'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr)</span><br><span class=\"line\">    list.has(<span class=\"string\">'add'</span>)  <span class=\"comment\">//true</span></span><br><span class=\"line\">    list.delete(<span class=\"string\">'add'</span>) <span class=\"comment\">//list ==&gt; &#123;\"delete\", \"clear\", \"has\"&#125;</span></span><br><span class=\"line\">    list.clear() <span class=\"comment\">//list ==&gt; &#123;&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> val <span class=\"keyword\">of</span> arr.values()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">add</span></span><br><span class=\"line\"><span class=\"comment\">delete</span></span><br><span class=\"line\"><span class=\"comment\">clear</span></span><br><span class=\"line\"><span class=\"comment\">has </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> attr <span class=\"keyword\">of</span> arr.keys()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(attr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">0</span></span><br><span class=\"line\"><span class=\"comment\">1</span></span><br><span class=\"line\"><span class=\"comment\">2</span></span><br><span class=\"line\"><span class=\"comment\">3 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [attr,val] <span class=\"keyword\">of</span> arr.entries()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(attr,val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0 \"add\"</span></span><br><span class=\"line\"><span class=\"comment\">1 \"delete\"</span></span><br><span class=\"line\"><span class=\"comment\">2 \"clear\"</span></span><br><span class=\"line\"><span class=\"comment\">3 \"has\" </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">list.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span><span class=\"built_in\">console</span>.log(item))</span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">add</span></span><br><span class=\"line\"><span class=\"comment\">delete</span></span><br><span class=\"line\"><span class=\"comment\">clear</span></span><br><span class=\"line\"><span class=\"comment\">has</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//weekSet()必须是对象，不会检测，不用担心内存泄漏，如果别的对象不引用该对象， 这个对象会被垃圾回收机制自动回收；</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> weakList = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arg = &#123;&#125;</span><br><span class=\"line\">    weakList.add(arg)</span><br><span class=\"line\">    weakList.add(<span class=\"number\">2</span>) <span class=\"comment\">//报错</span></span><br><span class=\"line\">    <span class=\"comment\">// 没有clear方法，没有set属性，不能遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(weakList)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [<span class=\"string\">'123'</span>]</span><br><span class=\"line\">    list.set(arr,<span class=\"number\">456</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(list,list.get(arr)) <span class=\"comment\">//Map(1) &#123;Array(1) =&gt; 456&#125; 456</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'a'</span>,<span class=\"number\">123</span>],[<span class=\"string\">'b'</span>,<span class=\"number\">456</span>]])</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(map) <span class=\"comment\">//Map(2) &#123;\"a\" =&gt; 123, \"b\" =&gt; 456&#125;</span></span><br><span class=\"line\">    map.size; <span class=\"comment\">//2</span></span><br><span class=\"line\">    map.delete(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">    map.clear()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> weakMap = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>()   <span class=\"comment\">//===&gt;和WeakSet()相同</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// set-map与数组和对象的对比</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> array = []</span><br><span class=\"line\">    <span class=\"comment\">// 增</span></span><br><span class=\"line\">    map.set(<span class=\"string\">'t'</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    array.push(&#123;<span class=\"attr\">t</span>:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(map,array)</span><br><span class=\"line\">    <span class=\"comment\">// Map(1) &#123;\"t\" =&gt; 1&#125; [&#123;t: 1&#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删</span></span><br><span class=\"line\">    map.delete(<span class=\"string\">'t'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = array.findIndex(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span>item.t)</span><br><span class=\"line\">    array.splice(index,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(map,array)</span><br><span class=\"line\">    <span class=\"comment\">// Map(0) &#123;&#125; []</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//改</span></span><br><span class=\"line\">    map.set(<span class=\"string\">'t'</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">// array['t'] = 2</span></span><br><span class=\"line\">    array.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item.t? item.t = <span class=\"number\">2</span>:<span class=\"string\">''</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(map,array)</span><br><span class=\"line\">    <span class=\"comment\">// Map(1) &#123;\"t\" =&gt; 2&#125; [t: 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查</span></span><br><span class=\"line\">    map.has(<span class=\"string\">'t'</span>)</span><br><span class=\"line\">    array.find(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item.t)</span><br><span class=\"line\">     <span class=\"comment\">// Map(1) &#123;\"t\" =&gt; 2&#125; [t: 2]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> array = []</span><br><span class=\"line\">    <span class=\"comment\">// 增</span></span><br><span class=\"line\">    set.add(<span class=\"string\">'t'</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    array.push(&#123;<span class=\"attr\">t</span>:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(set,array)</span><br><span class=\"line\">    <span class=\"comment\">// &#123;\"t\" =&gt; 1&#125; [&#123;t: 1&#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删</span></span><br><span class=\"line\">    set.delete(<span class=\"string\">'t'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = array.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item.t)</span><br><span class=\"line\">    array.splice(index,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(set,array)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 改 ==&gt;有问题</span></span><br><span class=\"line\">    set.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item.t?item.t = <span class=\"number\">2</span>:<span class=\"string\">''</span>)</span><br><span class=\"line\">    array.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item.t?item.t = <span class=\"number\">2</span>:<span class=\"string\">''</span>)</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(set,array)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查  ==》有问题</span></span><br><span class=\"line\">    set.has(<span class=\"string\">'t'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(set)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 增</span></span><br><span class=\"line\">    set.add(<span class=\"string\">'t'</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    map.set(<span class=\"string\">'t'</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    obj[<span class=\"string\">'t'</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(set,map,obj)</span><br><span class=\"line\">    <span class=\"comment\">// Set(1) &#123;\"t\"&#125; Map(1) &#123;\"t\" =&gt; 1&#125; &#123;k: 1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删</span></span><br><span class=\"line\">    set.delete(<span class=\"string\">'t'</span>)</span><br><span class=\"line\">    map.delete(<span class=\"string\">'t'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> obj[<span class=\"string\">'t'</span>]</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(set,map,obj) </span><br><span class=\"line\">    <span class=\"comment\">//&#123;&#125;&#123;&#125;&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 改</span></span><br><span class=\"line\">    map.set(<span class=\"string\">'t'</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    obj[<span class=\"string\">'t'</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"comment\">// 查</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(&#123;</span><br><span class=\"line\">        a: set.has(<span class=\"string\">'t'</span>),</span><br><span class=\"line\">        b:map.has(<span class=\"string\">'t'</span>),</span><br><span class=\"line\">        c:<span class=\"string\">'t'</span> <span class=\"keyword\">in</span> obj</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">//true true true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x,y,z</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x) total += x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y) total += y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(z) total += z;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`total:<span class=\"subst\">$&#123;total&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(<span class=\"number\">1</span>,<span class=\"string\">''</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum2</span>(<span class=\"params\">...m</span>) </span>&#123;    <span class=\"comment\">//...rest参数，动态的，不确定的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> m) &#123;</span><br><span class=\"line\">        total += i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`total:<span class=\"subst\">$&#123;total&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum2(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">//不能传入字符串，否则会解析为字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sum3 =<span class=\"function\">(<span class=\"params\">...m</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> m) &#123;</span><br><span class=\"line\">        total += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`total:<span class=\"subst\">$&#123;total&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum3(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [x,y] = [<span class=\"number\">4</span>,<span class=\"number\">8</span>] <span class=\"comment\">//解构</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">4</span>,<span class=\"number\">8</span>]) <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...arr1,...arr2)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([...arr1,...arr2]) <span class=\"comment\">//concat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [x,...y] = [<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>] <span class=\"comment\">// y : 8,12,13</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = <span class=\"string\">'es6'</span> <span class=\"comment\">//a:e,b:s,c:6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> xy = [...<span class=\"string\">'es6'</span>] <span class=\"comment\">//拆解</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"…放函数里是rest参数，放数组里会进行运算，拆解\"><a href=\"#…放函数里是rest参数，放数组里会进行运算，拆解\" class=\"headerlink\" title=\"…放函数里是rest参数，放数组里会进行运算，拆解\"></a>…放函数里是rest参数，放数组里会进行运算，拆解</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> checkLogin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> flag = <span class=\"built_in\">document</span>.cookie.indexOf(<span class=\"string\">'userId'</span>) &gt; <span class=\"number\">-1</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag) &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">                status:<span class=\"number\">0</span>,</span><br><span class=\"line\">                result:<span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'error'</span>)  <span class=\"comment\">//报错</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> getUserInfo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> userInfo = &#123;<span class=\"string\">'101'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resolve(userInfo);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">checkLogin().then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res.status == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'login'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getUserInfo()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">res2</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`userId:<span class=\"subst\">$&#123;userId&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([checkLogin(),getUserInfo()]).then(<span class=\"function\">(<span class=\"params\">[res1,res2]</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`result:`</span>$&#123;res1.result&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"import-export\"><a href=\"#import-export\" class=\"headerlink\" title=\"import,export\"></a>import,export</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//utils.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> sum = <span class=\"function\">(<span class=\"params\">x,y</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> sale = <span class=\"function\">(<span class=\"params\">m,n</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m - n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//router.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;sum,sale&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./utils'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`sum:<span class=\"subst\">$&#123;sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>)&#125;</span>`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> *<span class=\"keyword\">as</span> util <span class=\"keyword\">from</span> <span class=\"string\">'./utils'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`sum:`</span>$&#123;util.sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// import可以异步加载 </span></span><br><span class=\"line\">&lt;span @click=<span class=\"string\">\"add\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">add()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"AMD-CMD-CommonJs-ES6\"><a href=\"#AMD-CMD-CommonJs-ES6\" class=\"headerlink\" title=\"AMD,CMD,CommonJs,ES6\"></a>AMD,CMD,CommonJs,ES6</h5><ul>\n<li>模块化，规范，标准</li>\n<li><p>AMD是requireJs在推广中对模块定义的规范化产出-同步模块定义 – 依赖前置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'package/lib'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">lib</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        lib.log(<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        foo:foo</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CMD是SeaJs在推广过程中对模块定义的规范化产出-同步模块定义–依赖就近</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有模块通过define来定义</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require,exports,module</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过require引入依赖</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Spinning = <span class=\"built_in\">require</span>(<span class=\"string\">'./spinning'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>commonJs—module.exports</p>\n</li>\n</ul>\n<ul>\n<li>在浏览器不支持 ==&gt;在node中使用<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.area = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * r * r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.circumference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * r</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>解构赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a,b]  = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a,b,c = <span class=\"number\">3</span>] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a,b,c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a,b] = sum()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;a,b&#125; = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> list = &#123;</span><br><span class=\"line\">        title:<span class=\"string\">'hello'</span>,</span><br><span class=\"line\">        core:[&#123;</span><br><span class=\"line\">            title:<span class=\"string\">'tom'</span>,</span><br><span class=\"line\">            age:<span class=\"string\">'34'</span></span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">            title:<span class=\"string\">'lele'</span>,</span><br><span class=\"line\">            age:<span class=\"string\">'22'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> &#123;<span class=\"attr\">title</span>:newTitle,<span class=\"attr\">core</span>:[&#123;<span class=\"attr\">title</span>:contentTitle,<span class=\"attr\">age</span>:contentAge&#125;]&#125; = list</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newTitle,contentTitle,contentAge) <span class=\"comment\">//hello tom 34</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> list = [&#123;</span><br><span class=\"line\">            title:<span class=\"string\">'tom'</span>,</span><br><span class=\"line\">            age:<span class=\"string\">'34'</span></span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">            title:<span class=\"string\">'lele'</span>,</span><br><span class=\"line\">            age:<span class=\"string\">'22'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> &#123;<span class=\"attr\">title</span>:cTitle,<span class=\"attr\">age</span>:cAge&#125; <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(cTitle,cAge)<span class=\"comment\">//tom 34 lele 22</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a,,b] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]  <span class=\"comment\">//1,3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a,...b] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]<span class=\"comment\">//1,[2,3,4]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a,b] = [<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);<span class=\"comment\">//3</span></span><br><span class=\"line\">    [b,a] = [a,b];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b)<span class=\"comment\">//2</span></span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> o = &#123;</span><br><span class=\"line\">        p:<span class=\"number\">42</span>,</span><br><span class=\"line\">        q:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;p,q&#125; = o</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p,q)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串扩展</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">'string'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">'g'</span>),str.startsWith(<span class=\"string\">'st'</span>),str.endsWith(<span class=\"string\">'ng'</span>))<span class=\"comment\">//true true true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">'string'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str.repeat(<span class=\"number\">2</span>)) <span class=\"comment\">//stringstring</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 补白</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>.padStart(<span class=\"number\">2</span>,<span class=\"string\">'0'</span>))</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>.padEnd(<span class=\"number\">2</span>,<span class=\"string\">'0'</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 标签模板 适用于多语言和xss攻击</span></span><br><span class=\"line\">     <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">         name:<span class=\"string\">'Tom'</span>,</span><br><span class=\"line\">         age:<span class=\"string\">'23'</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">s,v1,v2</span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> s + v1 + v2</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     person<span class=\"string\">`i am <span class=\"subst\">$&#123;user.name&#125;</span>,my age is <span class=\"subst\">$&#123;user.age&#125;</span>`</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数值扩展</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">12</span>)</span><br><span class=\"line\">    <span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\">    <span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">Number</span>.isSafeInteger(<span class=\"number\">2</span>) <span class=\"comment\">//是否在有效范围之内</span></span><br><span class=\"line\">    <span class=\"built_in\">Math</span>.trunc(<span class=\"number\">3.2</span>)<span class=\"comment\">//返回小数的整数部分,3</span></span><br><span class=\"line\">    <span class=\"built_in\">Math</span>.sign(<span class=\"number\">-5</span>)<span class=\"comment\">//-1,0,1 ==&gt;判断是正数负数还是0</span></span><br><span class=\"line\">    <span class=\"built_in\">Math</span>.cbrt(<span class=\"number\">-2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组扩展<br><code>Array.form,Array.of,copyWithin,find/findIndex,fill,entries/keys/values,inludes</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>) <span class=\"comment\">//把一组数据变量转化为数组类型</span></span><br><span class=\"line\"><span class=\"comment\">// 把一些集合转化为数组</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>],item=&gt;item*<span class=\"number\">2</span>)   <span class=\"comment\">//2,4,6,8,10</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].fill(<span class=\"number\">7</span>)  <span class=\"comment\">//[7,7,7]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"string\">'a'</span>,<span class=\"literal\">undefined</span>,<span class=\"number\">3</span>].fill(<span class=\"number\">9</span>) <span class=\"comment\">//(4) [9, 9, 9, 9]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>].fill(<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>) </span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>].fill(<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>) <span class=\"comment\">//(7) [1, 8, 8, 4, 5, 6, 7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].keys()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index)  <span class=\"comment\">//0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>,<span class=\"number\">1</span>,<span class=\"string\">'b'</span>].values()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val) <span class=\"comment\">//a,1,b</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [index,val] <span class=\"keyword\">of</span> [<span class=\"number\">1</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'cc'</span>,<span class=\"number\">9</span>].entries()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index,val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  0 1</span></span><br><span class=\"line\"><span class=\"comment\">//  1 \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">//  2 \"cc\"</span></span><br><span class=\"line\"><span class=\"comment\">//  3 9</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>) <span class=\"comment\">//(5) [3, 4, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查找一个元素是否在一个数组中</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].find(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item &gt; <span class=\"number\">3</span> ) <span class=\"comment\">//4 只找一个</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].findIndex(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span>item &gt; <span class=\"number\">3</span>) <span class=\"comment\">//返回当前符合元素的下标</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].includes(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数扩展</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">x,y = <span class=\"string\">'world'</span></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(x,y)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> test() <span class=\"comment\">//undefined,world</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"string\">'one'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">x,y = x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x,y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"string\">'two'</span>) <span class=\"comment\">//two,two</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"string\">'one'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">c,y = x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x,y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"string\">'two'</span>) <span class=\"comment\">//two,one</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> val <span class=\"keyword\">of</span> args) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)   <span class=\"comment\">//1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// 把数组转化为离散的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">//合并</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],...[<span class=\"number\">9</span>,<span class=\"number\">8</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrow = <span class=\"function\"><span class=\"params\">item</span> =&gt;</span>item * <span class=\"number\">2</span></span><br><span class=\"line\">arrow(<span class=\"number\">3</span>) <span class=\"comment\">//6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//尾调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tail</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tx</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tail(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">tx(<span class=\"number\">4</span>) <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象扩展</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简介表达式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'lele'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//属性表达式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> es5 = &#123;</span><br><span class=\"line\">    a:<span class=\"string\">'c'</span>,</span><br><span class=\"line\">    b:<span class=\"string\">'c'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> es6 = &#123;</span><br><span class=\"line\">    [a]:<span class=\"string\">'c'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(es5,es6)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123;a: \"c\", b: \"c\"&#125;, &#123;b: \"c\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新增api</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"string\">'abc'</span>,<span class=\"string\">'abc'</span>)</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"attr\">b</span>:<span class=\"string\">'b'</span>&#125;) <span class=\"comment\">//&#123;a: 1, b: \"b\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> test = &#123;<span class=\"attr\">k</span>:<span class=\"number\">123</span>,<span class=\"attr\">v</span>:<span class=\"number\">456</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [key,val] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(test)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key,val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// k 123</span></span><br><span class=\"line\"><span class=\"comment\">// v 456</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Symbol</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a1 = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\">a1 == a2 <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a3 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'a3'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a4 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'a3'</span>)</span><br><span class=\"line\">a3 == a4 <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> aa = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'abc'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    [aa]:<span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"string\">'abc'</span>:<span class=\"number\">345</span>,</span><br><span class=\"line\">    <span class=\"string\">'c'</span>:<span class=\"number\">456</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">&#123;abc: 345, c: 456, Symbol(abc): 123&#125;</span></span><br><span class=\"line\"><span class=\"comment\">abc: 345</span></span><br><span class=\"line\"><span class=\"comment\">c: 456</span></span><br><span class=\"line\"><span class=\"comment\">Symbol(abc): 123 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [attr,val] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(obj)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(attr,val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">abc 345</span></span><br><span class=\"line\"><span class=\"comment\">c 456 </span></span><br><span class=\"line\"><span class=\"comment\">不会循环到Symbol*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertySymbols(obj).forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span><span class=\"built_in\">console</span>.log(item,obj[item]))</span><br><span class=\"line\"><span class=\"comment\">//Symbol(abc),123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.ownKeys(obj).forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span><span class=\"built_in\">console</span>.log(item))</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">abc</span></span><br><span class=\"line\"><span class=\"comment\">c</span></span><br><span class=\"line\"><span class=\"comment\">Symbol(abc) */</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>set-map结构</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">a1.add(<span class=\"number\">2</span>)</span><br><span class=\"line\">a1.add(<span class=\"number\">3</span>)</span><br><span class=\"line\">add.size; <span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">   <span class=\"keyword\">let</span> list = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr)</span><br><span class=\"line\">   lise.size;<span class=\"comment\">//4 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可用于数组去重</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr1 = <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr))   <span class=\"comment\">//[1, 2]</span></span><br><span class=\"line\">    arr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>  <span class=\"comment\">//true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [<span class=\"string\">'add'</span>,<span class=\"string\">'delete'</span>,<span class=\"string\">'clear'</span>,<span class=\"string\">'has'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr)</span><br><span class=\"line\">    list.has(<span class=\"string\">'add'</span>)  <span class=\"comment\">//true</span></span><br><span class=\"line\">    list.delete(<span class=\"string\">'add'</span>) <span class=\"comment\">//list ==&gt; &#123;\"delete\", \"clear\", \"has\"&#125;</span></span><br><span class=\"line\">    list.clear() <span class=\"comment\">//list ==&gt; &#123;&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> val <span class=\"keyword\">of</span> arr.values()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">add</span></span><br><span class=\"line\"><span class=\"comment\">delete</span></span><br><span class=\"line\"><span class=\"comment\">clear</span></span><br><span class=\"line\"><span class=\"comment\">has </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> attr <span class=\"keyword\">of</span> arr.keys()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(attr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">0</span></span><br><span class=\"line\"><span class=\"comment\">1</span></span><br><span class=\"line\"><span class=\"comment\">2</span></span><br><span class=\"line\"><span class=\"comment\">3 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [attr,val] <span class=\"keyword\">of</span> arr.entries()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(attr,val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0 \"add\"</span></span><br><span class=\"line\"><span class=\"comment\">1 \"delete\"</span></span><br><span class=\"line\"><span class=\"comment\">2 \"clear\"</span></span><br><span class=\"line\"><span class=\"comment\">3 \"has\" </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">list.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span><span class=\"built_in\">console</span>.log(item))</span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">add</span></span><br><span class=\"line\"><span class=\"comment\">delete</span></span><br><span class=\"line\"><span class=\"comment\">clear</span></span><br><span class=\"line\"><span class=\"comment\">has</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//weekSet()必须是对象，不会检测，不用担心内存泄漏，如果别的对象不引用该对象， 这个对象会被垃圾回收机制自动回收；</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> weakList = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arg = &#123;&#125;</span><br><span class=\"line\">    weakList.add(arg)</span><br><span class=\"line\">    weakList.add(<span class=\"number\">2</span>) <span class=\"comment\">//报错</span></span><br><span class=\"line\">    <span class=\"comment\">// 没有clear方法，没有set属性，不能遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(weakList)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [<span class=\"string\">'123'</span>]</span><br><span class=\"line\">    list.set(arr,<span class=\"number\">456</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(list,list.get(arr)) <span class=\"comment\">//Map(1) &#123;Array(1) =&gt; 456&#125; 456</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'a'</span>,<span class=\"number\">123</span>],[<span class=\"string\">'b'</span>,<span class=\"number\">456</span>]])</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(map) <span class=\"comment\">//Map(2) &#123;\"a\" =&gt; 123, \"b\" =&gt; 456&#125;</span></span><br><span class=\"line\">    map.size; <span class=\"comment\">//2</span></span><br><span class=\"line\">    map.delete(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">    map.clear()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> weakMap = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>()   <span class=\"comment\">//===&gt;和WeakSet()相同</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// set-map与数组和对象的对比</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> array = []</span><br><span class=\"line\">    <span class=\"comment\">// 增</span></span><br><span class=\"line\">    map.set(<span class=\"string\">'t'</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    array.push(&#123;<span class=\"attr\">t</span>:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(map,array)</span><br><span class=\"line\">    <span class=\"comment\">// Map(1) &#123;\"t\" =&gt; 1&#125; [&#123;t: 1&#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删</span></span><br><span class=\"line\">    map.delete(<span class=\"string\">'t'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = array.findIndex(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span>item.t)</span><br><span class=\"line\">    array.splice(index,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(map,array)</span><br><span class=\"line\">    <span class=\"comment\">// Map(0) &#123;&#125; []</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//改</span></span><br><span class=\"line\">    map.set(<span class=\"string\">'t'</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">// array['t'] = 2</span></span><br><span class=\"line\">    array.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item.t? item.t = <span class=\"number\">2</span>:<span class=\"string\">''</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(map,array)</span><br><span class=\"line\">    <span class=\"comment\">// Map(1) &#123;\"t\" =&gt; 2&#125; [t: 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查</span></span><br><span class=\"line\">    map.has(<span class=\"string\">'t'</span>)</span><br><span class=\"line\">    array.find(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item.t)</span><br><span class=\"line\">     <span class=\"comment\">// Map(1) &#123;\"t\" =&gt; 2&#125; [t: 2]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> array = []</span><br><span class=\"line\">    <span class=\"comment\">// 增</span></span><br><span class=\"line\">    set.add(<span class=\"string\">'t'</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    array.push(&#123;<span class=\"attr\">t</span>:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(set,array)</span><br><span class=\"line\">    <span class=\"comment\">// &#123;\"t\" =&gt; 1&#125; [&#123;t: 1&#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删</span></span><br><span class=\"line\">    set.delete(<span class=\"string\">'t'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = array.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item.t)</span><br><span class=\"line\">    array.splice(index,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(set,array)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 改 ==&gt;有问题</span></span><br><span class=\"line\">    set.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item.t?item.t = <span class=\"number\">2</span>:<span class=\"string\">''</span>)</span><br><span class=\"line\">    array.forEach(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item.t?item.t = <span class=\"number\">2</span>:<span class=\"string\">''</span>)</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(set,array)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查  ==》有问题</span></span><br><span class=\"line\">    set.has(<span class=\"string\">'t'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(set)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 增</span></span><br><span class=\"line\">    set.add(<span class=\"string\">'t'</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    map.set(<span class=\"string\">'t'</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    obj[<span class=\"string\">'t'</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(set,map,obj)</span><br><span class=\"line\">    <span class=\"comment\">// Set(1) &#123;\"t\"&#125; Map(1) &#123;\"t\" =&gt; 1&#125; &#123;k: 1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删</span></span><br><span class=\"line\">    set.delete(<span class=\"string\">'t'</span>)</span><br><span class=\"line\">    map.delete(<span class=\"string\">'t'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> obj[<span class=\"string\">'t'</span>]</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(set,map,obj) </span><br><span class=\"line\">    <span class=\"comment\">//&#123;&#125;&#123;&#125;&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 改</span></span><br><span class=\"line\">    map.set(<span class=\"string\">'t'</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    obj[<span class=\"string\">'t'</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"comment\">// 查</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(&#123;</span><br><span class=\"line\">        a: set.has(<span class=\"string\">'t'</span>),</span><br><span class=\"line\">        b:map.has(<span class=\"string\">'t'</span>),</span><br><span class=\"line\">        c:<span class=\"string\">'t'</span> <span class=\"keyword\">in</span> obj</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">//true true true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"ES6系列-proxy,Reflect","date":"2017-04-30T16:00:00.000Z","_content":"\n```javascript\n\n// 代理 proxy 连接用户和最真实的层\n\n// reflect反射 ==> object\n\n{\n    let obj = {\n        name: 'lele',\n        time: '2012-12-12',\n        _r: 123\n    }\n    let monitor = new Proxy(obj, {\n        // 拦截对象属性的读取\n        get(target, key) {\n            return target[key].replace('2012', '2018')\n        },\n        // 拦截对象设置属性\n        set(target, key, value) {\n            if (key == 'name') {\n                return target[key] = value\n            } else {\n                return target[key]\n            }\n        },\n        // 拦截key in object操作\n        has(target, key) {\n            if (key == 'name') {\n                return target[key]\n            } else {\n                return false\n            }\n        },\n        // 拦截delete\n        deleteProperty(target, key) {\n            if (key.indexOf('_') > -1) {\n                delete target[key]\n                return true\n            } else {\n                return target[key]\n            }\n        },\n        // 拦截Object.keys,Object.getOwnProperty,Object,getOwnPropertyNames\n        ownKeys(target) {\n            return Object.keys(target).filter(item => item != 'time')\n        }\n    })\n    console.log('get', monitor.time) //2018-12-12\n    monitor.name = 'dd'\n    console.log('set', monitor) //Proxy {name: \"dd\", time: \"2012-12-12\", _r: 123}\n    console.log('has', 'name' in monitor, 'time' in monitor) //has true false\n    delete monitor.name;\n    delete monitor._r\n    console.log('delete', monitor) //delete Proxy {name: \"dd\", time: \"2012-12-12\"}\n    console.log('ownkey', Object.keys(monitor)) //ownkey (2) [\"name\", \"_r\"]\n}\n\n{\n    let obj = {\n        name: 'lele',\n        time: '2012-12-12',\n        _r: 'dog'\n    }\n    let monitor = Reflect.get(obj, 'time')\n    console.log(monitor) //2012-12-12\n    let setName = Reflect.set(obj, 'name', 'yoyo')\n    console.log(\"setName\", setName)  //true\n    Reflect.set(obj, 'name', 'pp')\n    console.log(obj) //{name: \"pp\", time: \"2012-12-12\", _r: \"dog\"}\n\n    console.log('has', Reflect.has(obj, 'name')) //true\n\n}\n\n//对数据进行校验 ====>使用场景\n// 建立函数，提供代理\n{\n    function validator(target, validator) {\n        return new Proxy(target, {\n            _validator : validator,\n            set(target, key, value, proxy) {\n                if (target.hasOwnProperty(key)) {\n                    //判断是否满足条件\n                    let va = this._validator[key];\n                    if (!!va(value)) {\n                        return Reflect.set(target, key, value, proxy)\n                    } else {\n                        throw Error(`不可以设置`)\n                    }\n                } else {\n                    throw Error(`${key} 报错了`)\n                }\n            }\n        })\n    }\n    // 校验条件\n    const personValidator = {\n        name(val) {\n            return typeof val === 'string'\n        },\n        age(val) {\n            return typeof val === 'number' && val > 18\n        }\n    }\n    class Person {\n        constructor(name, age) {\n            this.name = name\n            this.age = age\n            return validator(this, personValidator)\n        }\n    }\n    const people = new Person('lili', 28)\n    console.log(people) //Proxy {name: \"lili\", age: 28}\n   /*  people.name = 'rr'\n    console.log(people)\n    people.age = 12\n    console.log(people) */\n    const people1 = new Person('yoy',12)\n    console.log(people1)\n}\n```","source":"_posts/es6-proxy.md","raw":"---\ntitle: ES6系列-proxy,Reflect\ndate: 2017-05-01\ncategories: js\ntags: [编程,学习]\n---\n\n```javascript\n\n// 代理 proxy 连接用户和最真实的层\n\n// reflect反射 ==> object\n\n{\n    let obj = {\n        name: 'lele',\n        time: '2012-12-12',\n        _r: 123\n    }\n    let monitor = new Proxy(obj, {\n        // 拦截对象属性的读取\n        get(target, key) {\n            return target[key].replace('2012', '2018')\n        },\n        // 拦截对象设置属性\n        set(target, key, value) {\n            if (key == 'name') {\n                return target[key] = value\n            } else {\n                return target[key]\n            }\n        },\n        // 拦截key in object操作\n        has(target, key) {\n            if (key == 'name') {\n                return target[key]\n            } else {\n                return false\n            }\n        },\n        // 拦截delete\n        deleteProperty(target, key) {\n            if (key.indexOf('_') > -1) {\n                delete target[key]\n                return true\n            } else {\n                return target[key]\n            }\n        },\n        // 拦截Object.keys,Object.getOwnProperty,Object,getOwnPropertyNames\n        ownKeys(target) {\n            return Object.keys(target).filter(item => item != 'time')\n        }\n    })\n    console.log('get', monitor.time) //2018-12-12\n    monitor.name = 'dd'\n    console.log('set', monitor) //Proxy {name: \"dd\", time: \"2012-12-12\", _r: 123}\n    console.log('has', 'name' in monitor, 'time' in monitor) //has true false\n    delete monitor.name;\n    delete monitor._r\n    console.log('delete', monitor) //delete Proxy {name: \"dd\", time: \"2012-12-12\"}\n    console.log('ownkey', Object.keys(monitor)) //ownkey (2) [\"name\", \"_r\"]\n}\n\n{\n    let obj = {\n        name: 'lele',\n        time: '2012-12-12',\n        _r: 'dog'\n    }\n    let monitor = Reflect.get(obj, 'time')\n    console.log(monitor) //2012-12-12\n    let setName = Reflect.set(obj, 'name', 'yoyo')\n    console.log(\"setName\", setName)  //true\n    Reflect.set(obj, 'name', 'pp')\n    console.log(obj) //{name: \"pp\", time: \"2012-12-12\", _r: \"dog\"}\n\n    console.log('has', Reflect.has(obj, 'name')) //true\n\n}\n\n//对数据进行校验 ====>使用场景\n// 建立函数，提供代理\n{\n    function validator(target, validator) {\n        return new Proxy(target, {\n            _validator : validator,\n            set(target, key, value, proxy) {\n                if (target.hasOwnProperty(key)) {\n                    //判断是否满足条件\n                    let va = this._validator[key];\n                    if (!!va(value)) {\n                        return Reflect.set(target, key, value, proxy)\n                    } else {\n                        throw Error(`不可以设置`)\n                    }\n                } else {\n                    throw Error(`${key} 报错了`)\n                }\n            }\n        })\n    }\n    // 校验条件\n    const personValidator = {\n        name(val) {\n            return typeof val === 'string'\n        },\n        age(val) {\n            return typeof val === 'number' && val > 18\n        }\n    }\n    class Person {\n        constructor(name, age) {\n            this.name = name\n            this.age = age\n            return validator(this, personValidator)\n        }\n    }\n    const people = new Person('lili', 28)\n    console.log(people) //Proxy {name: \"lili\", age: 28}\n   /*  people.name = 'rr'\n    console.log(people)\n    people.age = 12\n    console.log(people) */\n    const people1 = new Person('yoy',12)\n    console.log(people1)\n}\n```","slug":"es6-proxy","published":1,"updated":"2021-07-01T07:30:54.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wudy000hzgsy3blgjnmr","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代理 proxy 连接用户和最真实的层</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reflect反射 ==&gt; object</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'lele'</span>,</span><br><span class=\"line\">        time: <span class=\"string\">'2012-12-12'</span>,</span><br><span class=\"line\">        _r: <span class=\"number\">123</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> monitor = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拦截对象属性的读取</span></span><br><span class=\"line\">        get(target, key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> target[key].replace(<span class=\"string\">'2012'</span>, <span class=\"string\">'2018'</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 拦截对象设置属性</span></span><br><span class=\"line\">        set(target, key, value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key == <span class=\"string\">'name'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key] = value</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 拦截key in object操作</span></span><br><span class=\"line\">        has(target, key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key == <span class=\"string\">'name'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 拦截delete</span></span><br><span class=\"line\">        deleteProperty(target, key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.indexOf(<span class=\"string\">'_'</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> target[key]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 拦截Object.keys,Object.getOwnProperty,Object,getOwnPropertyNames</span></span><br><span class=\"line\">        ownKeys(target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(target).filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item != <span class=\"string\">'time'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get'</span>, monitor.time) <span class=\"comment\">//2018-12-12</span></span><br><span class=\"line\">    monitor.name = <span class=\"string\">'dd'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'set'</span>, monitor) <span class=\"comment\">//Proxy &#123;name: \"dd\", time: \"2012-12-12\", _r: 123&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'has'</span>, <span class=\"string\">'name'</span> <span class=\"keyword\">in</span> monitor, <span class=\"string\">'time'</span> <span class=\"keyword\">in</span> monitor) <span class=\"comment\">//has true false</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> monitor.name;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> monitor._r</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'delete'</span>, monitor) <span class=\"comment\">//delete Proxy &#123;name: \"dd\", time: \"2012-12-12\"&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ownkey'</span>, <span class=\"built_in\">Object</span>.keys(monitor)) <span class=\"comment\">//ownkey (2) [\"name\", \"_r\"]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'lele'</span>,</span><br><span class=\"line\">        time: <span class=\"string\">'2012-12-12'</span>,</span><br><span class=\"line\">        _r: <span class=\"string\">'dog'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> monitor = <span class=\"built_in\">Reflect</span>.get(obj, <span class=\"string\">'time'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(monitor) <span class=\"comment\">//2012-12-12</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> setName = <span class=\"built_in\">Reflect</span>.set(obj, <span class=\"string\">'name'</span>, <span class=\"string\">'yoyo'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"setName\"</span>, setName)  <span class=\"comment\">//true</span></span><br><span class=\"line\">    <span class=\"built_in\">Reflect</span>.set(obj, <span class=\"string\">'name'</span>, <span class=\"string\">'pp'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//&#123;name: \"pp\", time: \"2012-12-12\", _r: \"dog\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'has'</span>, <span class=\"built_in\">Reflect</span>.has(obj, <span class=\"string\">'name'</span>)) <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对数据进行校验 ====&gt;使用场景</span></span><br><span class=\"line\"><span class=\"comment\">// 建立函数，提供代理</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validator</span>(<span class=\"params\">target, validator</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">            _validator : validator,</span><br><span class=\"line\">            set(target, key, value, proxy) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//判断是否满足条件</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> va = <span class=\"keyword\">this</span>._validator[key];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!!va(value)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, key, value, proxy)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`不可以设置`</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span> 报错了`</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 校验条件</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> personValidator = &#123;</span><br><span class=\"line\">        name(val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">'string'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        age(val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">'number'</span> &amp;&amp; val &gt; <span class=\"number\">18</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">            <span class=\"keyword\">return</span> validator(<span class=\"keyword\">this</span>, personValidator)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> people = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lili'</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(people) <span class=\"comment\">//Proxy &#123;name: \"lili\", age: 28&#125;</span></span><br><span class=\"line\">   <span class=\"comment\">/*  people.name = 'rr'</span></span><br><span class=\"line\"><span class=\"comment\">    console.log(people)</span></span><br><span class=\"line\"><span class=\"comment\">    people.age = 12</span></span><br><span class=\"line\"><span class=\"comment\">    console.log(people) */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> people1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'yoy'</span>,<span class=\"number\">12</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(people1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 代理 proxy 连接用户和最真实的层</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reflect反射 ==&gt; object</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'lele'</span>,</span><br><span class=\"line\">        time: <span class=\"string\">'2012-12-12'</span>,</span><br><span class=\"line\">        _r: <span class=\"number\">123</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> monitor = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拦截对象属性的读取</span></span><br><span class=\"line\">        get(target, key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> target[key].replace(<span class=\"string\">'2012'</span>, <span class=\"string\">'2018'</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 拦截对象设置属性</span></span><br><span class=\"line\">        set(target, key, value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key == <span class=\"string\">'name'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key] = value</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 拦截key in object操作</span></span><br><span class=\"line\">        has(target, key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key == <span class=\"string\">'name'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 拦截delete</span></span><br><span class=\"line\">        deleteProperty(target, key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.indexOf(<span class=\"string\">'_'</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> target[key]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 拦截Object.keys,Object.getOwnProperty,Object,getOwnPropertyNames</span></span><br><span class=\"line\">        ownKeys(target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(target).filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item != <span class=\"string\">'time'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get'</span>, monitor.time) <span class=\"comment\">//2018-12-12</span></span><br><span class=\"line\">    monitor.name = <span class=\"string\">'dd'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'set'</span>, monitor) <span class=\"comment\">//Proxy &#123;name: \"dd\", time: \"2012-12-12\", _r: 123&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'has'</span>, <span class=\"string\">'name'</span> <span class=\"keyword\">in</span> monitor, <span class=\"string\">'time'</span> <span class=\"keyword\">in</span> monitor) <span class=\"comment\">//has true false</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> monitor.name;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> monitor._r</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'delete'</span>, monitor) <span class=\"comment\">//delete Proxy &#123;name: \"dd\", time: \"2012-12-12\"&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ownkey'</span>, <span class=\"built_in\">Object</span>.keys(monitor)) <span class=\"comment\">//ownkey (2) [\"name\", \"_r\"]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'lele'</span>,</span><br><span class=\"line\">        time: <span class=\"string\">'2012-12-12'</span>,</span><br><span class=\"line\">        _r: <span class=\"string\">'dog'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> monitor = <span class=\"built_in\">Reflect</span>.get(obj, <span class=\"string\">'time'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(monitor) <span class=\"comment\">//2012-12-12</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> setName = <span class=\"built_in\">Reflect</span>.set(obj, <span class=\"string\">'name'</span>, <span class=\"string\">'yoyo'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"setName\"</span>, setName)  <span class=\"comment\">//true</span></span><br><span class=\"line\">    <span class=\"built_in\">Reflect</span>.set(obj, <span class=\"string\">'name'</span>, <span class=\"string\">'pp'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//&#123;name: \"pp\", time: \"2012-12-12\", _r: \"dog\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'has'</span>, <span class=\"built_in\">Reflect</span>.has(obj, <span class=\"string\">'name'</span>)) <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对数据进行校验 ====&gt;使用场景</span></span><br><span class=\"line\"><span class=\"comment\">// 建立函数，提供代理</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validator</span>(<span class=\"params\">target, validator</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">            _validator : validator,</span><br><span class=\"line\">            set(target, key, value, proxy) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//判断是否满足条件</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> va = <span class=\"keyword\">this</span>._validator[key];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!!va(value)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, key, value, proxy)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`不可以设置`</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span> 报错了`</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 校验条件</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> personValidator = &#123;</span><br><span class=\"line\">        name(val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">'string'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        age(val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">'number'</span> &amp;&amp; val &gt; <span class=\"number\">18</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">            <span class=\"keyword\">return</span> validator(<span class=\"keyword\">this</span>, personValidator)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> people = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lili'</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(people) <span class=\"comment\">//Proxy &#123;name: \"lili\", age: 28&#125;</span></span><br><span class=\"line\">   <span class=\"comment\">/*  people.name = 'rr'</span></span><br><span class=\"line\"><span class=\"comment\">    console.log(people)</span></span><br><span class=\"line\"><span class=\"comment\">    people.age = 12</span></span><br><span class=\"line\"><span class=\"comment\">    console.log(people) */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> people1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'yoy'</span>,<span class=\"number\">12</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(people1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"ES6系列-generator","date":"2021-03-17T07:33:03.000Z","_content":"1. generator基本定义,返回的结果类似于Iterator，其实就是返回的Iterator接口，当函数运行的时候，调用一次next(),会执行一个yield.一个遍历器生成函数，赋值给Symbol.iterator，从而使这个接口Iterator\n2. 任何一个iterator接口都会指向Symbol.iterator属性上\n```javascript\n// 异步编程的解决方案\n{\n    let fn = function* () {\n        yield 'a'\n        yield 'b'\n        return 'c'\n    }\n    let test = fn()\n    console.log(test.next())\n    console.log(test.next())\n    console.log(test.next())\n    console.log(test.next())\n\n    // {value: \"a\", done: false}\n    //{value: \"b\", done: false}\n    //{value: \"c\", done: true}\n    //{value: undefined, done: true}\n\n}\n\n//  改写Iterator，使用for..of循环对象\n\n{\n    let obj = {}\n    obj[Symbol.iterator] = function* () {\n        yield 1\n        yield 2\n        yield 3\n    }\n    for (let value of obj) {\n        console.log(value)\n    }\n\n    /* \n        1\n        2\n        3\n    */\n}\n// 什么时候优势最大 -- 状态机  a-b-c-a...\n{\n    let state = function* () {\n        while (1) {\n            yield 'a'\n            yield 'b'\n            yield 'c'\n        }\n    }\n    let status = state()\n    console.log(status.next())\n    console.log(status.next())\n    console.log(status.next())\n    console.log(status.next())\n    console.log(status.next())\n\n\n    // {value: \"a\", done: false}\n    // {value: \"b\", done: false}\n    // {value: \"c\", done: false}\n    // {value: \"a\", done: false}\n    // {value: \"b\", done: false}\n}\n// 语法糖 async\n{\n    let state = async function () {\n        while (1) {\n            await 'a';\n            await 'b';\n            await 'c';\n        }\n\n    }\n    let status = state()\n    console.log(status.next())\n    console.log(status.next())\n    console.log(status.next())\n    console.log(status.next())\n    console.log(status.next())\n\n}\n\n// 抽奖逻辑\n{\n    let draw = count => {\n        //具体逻辑。。\n        console.log(`还剩下${count}次`)\n    }\n\n    let residus = function* (count) {\n        while (count > 0) {\n            count--;\n            yield draw(count)\n        }\n    }\n    let start = residus(5) //5为从后台取得值\n    let btn = document.createElement('button')\n    btn.innerHTML = '按钮'\n    btn.id = 'startBtn'\n    document.body.appendChild(btn)\n    btn.addEventListener('click', function () {\n        start.next()\n    }, false)\n\n}\n\n\n{\n    //长轮询\n    let ajax = function* () {\n        yield new Promise((resolve, reject) => {\n            setTimeout(() => {\n                reslove({ code: 1 })\n            }, 200);\n        })\n    }\n    let pull = () => {\n        let generator = ajax()\n        let step = generator.next()\n        step.value.then(d => {\n            if (d.value != 0) {\n                setTimeout(() => {\n                    console.log('wait')\n                }, 1000);\n            } else {\n                console.log(d)\n            }\n        })\n    }\n}\n```","source":"_posts/generator.md","raw":"---\ntitle: ES6系列-generator\ndate: 2021-03-17 15:33:03\ncategories: js\ntags: [编程,学习]\n---\n1. generator基本定义,返回的结果类似于Iterator，其实就是返回的Iterator接口，当函数运行的时候，调用一次next(),会执行一个yield.一个遍历器生成函数，赋值给Symbol.iterator，从而使这个接口Iterator\n2. 任何一个iterator接口都会指向Symbol.iterator属性上\n```javascript\n// 异步编程的解决方案\n{\n    let fn = function* () {\n        yield 'a'\n        yield 'b'\n        return 'c'\n    }\n    let test = fn()\n    console.log(test.next())\n    console.log(test.next())\n    console.log(test.next())\n    console.log(test.next())\n\n    // {value: \"a\", done: false}\n    //{value: \"b\", done: false}\n    //{value: \"c\", done: true}\n    //{value: undefined, done: true}\n\n}\n\n//  改写Iterator，使用for..of循环对象\n\n{\n    let obj = {}\n    obj[Symbol.iterator] = function* () {\n        yield 1\n        yield 2\n        yield 3\n    }\n    for (let value of obj) {\n        console.log(value)\n    }\n\n    /* \n        1\n        2\n        3\n    */\n}\n// 什么时候优势最大 -- 状态机  a-b-c-a...\n{\n    let state = function* () {\n        while (1) {\n            yield 'a'\n            yield 'b'\n            yield 'c'\n        }\n    }\n    let status = state()\n    console.log(status.next())\n    console.log(status.next())\n    console.log(status.next())\n    console.log(status.next())\n    console.log(status.next())\n\n\n    // {value: \"a\", done: false}\n    // {value: \"b\", done: false}\n    // {value: \"c\", done: false}\n    // {value: \"a\", done: false}\n    // {value: \"b\", done: false}\n}\n// 语法糖 async\n{\n    let state = async function () {\n        while (1) {\n            await 'a';\n            await 'b';\n            await 'c';\n        }\n\n    }\n    let status = state()\n    console.log(status.next())\n    console.log(status.next())\n    console.log(status.next())\n    console.log(status.next())\n    console.log(status.next())\n\n}\n\n// 抽奖逻辑\n{\n    let draw = count => {\n        //具体逻辑。。\n        console.log(`还剩下${count}次`)\n    }\n\n    let residus = function* (count) {\n        while (count > 0) {\n            count--;\n            yield draw(count)\n        }\n    }\n    let start = residus(5) //5为从后台取得值\n    let btn = document.createElement('button')\n    btn.innerHTML = '按钮'\n    btn.id = 'startBtn'\n    document.body.appendChild(btn)\n    btn.addEventListener('click', function () {\n        start.next()\n    }, false)\n\n}\n\n\n{\n    //长轮询\n    let ajax = function* () {\n        yield new Promise((resolve, reject) => {\n            setTimeout(() => {\n                reslove({ code: 1 })\n            }, 200);\n        })\n    }\n    let pull = () => {\n        let generator = ajax()\n        let step = generator.next()\n        step.value.then(d => {\n            if (d.value != 0) {\n                setTimeout(() => {\n                    console.log('wait')\n                }, 1000);\n            } else {\n                console.log(d)\n            }\n        })\n    }\n}\n```","slug":"generator","published":1,"updated":"2021-07-02T11:27:57.599Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wue0000mzgsyyinjqy7k","content":"<ol>\n<li>generator基本定义,返回的结果类似于Iterator，其实就是返回的Iterator接口，当函数运行的时候，调用一次next(),会执行一个yield.一个遍历器生成函数，赋值给Symbol.iterator，从而使这个接口Iterator</li>\n<li>任何一个iterator接口都会指向Symbol.iterator属性上<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异步编程的解决方案</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'c'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> test = fn()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test.next())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: \"a\", done: false&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//&#123;value: \"b\", done: false&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//&#123;value: \"c\", done: true&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//&#123;value: undefined, done: true&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  改写Iterator，使用for..of循环对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\">    obj[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">        1</span></span><br><span class=\"line\"><span class=\"comment\">        2</span></span><br><span class=\"line\"><span class=\"comment\">        3</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 什么时候优势最大 -- 状态机  a-b-c-a...</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span></span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span></span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"string\">'c'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> status = state()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: \"a\", done: false&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: \"b\", done: false&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: \"c\", done: false&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: \"a\", done: false&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: \"b\", done: false&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 语法糖 async</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"string\">'b'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"string\">'c'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> status = state()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽奖逻辑</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> draw = <span class=\"function\"><span class=\"params\">count</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//具体逻辑。。</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`还剩下<span class=\"subst\">$&#123;count&#125;</span>次`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> residus = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            count--;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> draw(count)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> start = residus(<span class=\"number\">5</span>) <span class=\"comment\">//5为从后台取得值</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>)</span><br><span class=\"line\">    btn.innerHTML = <span class=\"string\">'按钮'</span></span><br><span class=\"line\">    btn.id = <span class=\"string\">'startBtn'</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(btn)</span><br><span class=\"line\">    btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        start.next()</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//长轮询</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ajax = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                reslove(&#123; <span class=\"attr\">code</span>: <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\">            &#125;, <span class=\"number\">200</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pull = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> generator = ajax()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> step = generator.next()</span><br><span class=\"line\">        step.value.then(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d.value != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'wait'</span>)</span><br><span class=\"line\">                &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(d)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<ol>\n<li>generator基本定义,返回的结果类似于Iterator，其实就是返回的Iterator接口，当函数运行的时候，调用一次next(),会执行一个yield.一个遍历器生成函数，赋值给Symbol.iterator，从而使这个接口Iterator</li>\n<li>任何一个iterator接口都会指向Symbol.iterator属性上<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异步编程的解决方案</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'c'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> test = fn()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(test.next())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: \"a\", done: false&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//&#123;value: \"b\", done: false&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//&#123;value: \"c\", done: true&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//&#123;value: undefined, done: true&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  改写Iterator，使用for..of循环对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\">    obj[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">        1</span></span><br><span class=\"line\"><span class=\"comment\">        2</span></span><br><span class=\"line\"><span class=\"comment\">        3</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 什么时候优势最大 -- 状态机  a-b-c-a...</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span></span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span></span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"string\">'c'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> status = state()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: \"a\", done: false&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: \"b\", done: false&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: \"c\", done: false&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: \"a\", done: false&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: \"b\", done: false&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 语法糖 async</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"string\">'b'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"string\">'c'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> status = state()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(status.next())</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽奖逻辑</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> draw = <span class=\"function\"><span class=\"params\">count</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//具体逻辑。。</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`还剩下<span class=\"subst\">$&#123;count&#125;</span>次`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> residus = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            count--;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> draw(count)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> start = residus(<span class=\"number\">5</span>) <span class=\"comment\">//5为从后台取得值</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> btn = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'button'</span>)</span><br><span class=\"line\">    btn.innerHTML = <span class=\"string\">'按钮'</span></span><br><span class=\"line\">    btn.id = <span class=\"string\">'startBtn'</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(btn)</span><br><span class=\"line\">    btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        start.next()</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//长轮询</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ajax = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                reslove(&#123; <span class=\"attr\">code</span>: <span class=\"number\">1</span> &#125;)</span><br><span class=\"line\">            &#125;, <span class=\"number\">200</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pull = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> generator = ajax()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> step = generator.next()</span><br><span class=\"line\">        step.value.then(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d.value != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'wait'</span>)</span><br><span class=\"line\">                &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(d)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"上传文件报错","date":"2017-04-30T16:00:00.000Z","_content":"\n今日上传代码，遇到一个坑，\n`hexo h`报错：\n```\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\nTemplate render error: (unknown path) [Line 5, Column 20]\n  expected variable end\n    at Object._prettifyError (/Users/shuan/Desktop/blog/blog/node_modules/nunjucks/src/lib.js:36:11)\n    at Template.render (/Users/shuan/Desktop/blog/blog/node_modules/nunjucks/src/environment.js:524:21)\n    at Environment.renderString (/Users/shuan/Desktop/blog/blog/node_modules/nunjucks/src/environment.js:362:17)\n    at Promise (/Users/shuan/Desktop/blog/blog/node_modules/hexo/lib/extend/tag.js:66:9)\n    at Promise._execute (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/debuggability.js:313:9)\n    at Promise._resolveFromExecutor (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/promise.js:483:18)\n    at new Promise (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/promise.js:79:10)\n    at Tag.render (/Users/shuan/Desktop/blog/blog/node_modules/hexo/lib/extend/tag.js:64:10)\n    at Object.tagFilter [as onRenderEnd] (/Users/shuan/Desktop/blog/blog/node_modules/hexo/lib/hexo/post.js:230:16)\n    at Promise.then.then.result (/Users/shuan/Desktop/blog/blog/node_modules/hexo/lib/hexo/render.js:65:19)\n    at tryCatcher (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/util.js:16:23)\n    at Promise._settlePromiseFromHandler (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/promise.js:512:31)\n    at Promise._settlePromise (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/promise.js:569:18)\n    at Promise._settlePromise0 (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/promise.js:614:10)\n    at Promise._settlePromises (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/promise.js:694:18)\n    at _drainQueueStep (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/async.js:138:12)\n    at _drainQueue (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/async.js:131:9)\n    at Async._drainQueues (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/async.js:147:5)\n    at Immediate.Async.drainQueues [as _onImmediate] (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/async.js:17:14)\n    at runCallback (timers.js:794:20)\n    at tryOnImmediate (timers.js:752:5)\n    at processImmediate [as _immediateCallback] (timers.js:729:5)\n```\n\n\n可能是标记异常，想到今天写的一篇关于vue的文档，赶紧回原文看了看。\n原来是文章中使用了大括号 { } 这个特殊字符,且没有转义导致编译不通过\n> Template render error 模板渲染错误\n> 解决方案：将 { } 的大括号通过`&#123;`和` &#125;` 进行转换","source":"_posts/hexo.md","raw":"---\ntitle: 上传文件报错\ndate: 2017-05-01\ncategories: hexo\ntags: [编程,学习]\n---\n\n今日上传代码，遇到一个坑，\n`hexo h`报错：\n```\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\nTemplate render error: (unknown path) [Line 5, Column 20]\n  expected variable end\n    at Object._prettifyError (/Users/shuan/Desktop/blog/blog/node_modules/nunjucks/src/lib.js:36:11)\n    at Template.render (/Users/shuan/Desktop/blog/blog/node_modules/nunjucks/src/environment.js:524:21)\n    at Environment.renderString (/Users/shuan/Desktop/blog/blog/node_modules/nunjucks/src/environment.js:362:17)\n    at Promise (/Users/shuan/Desktop/blog/blog/node_modules/hexo/lib/extend/tag.js:66:9)\n    at Promise._execute (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/debuggability.js:313:9)\n    at Promise._resolveFromExecutor (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/promise.js:483:18)\n    at new Promise (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/promise.js:79:10)\n    at Tag.render (/Users/shuan/Desktop/blog/blog/node_modules/hexo/lib/extend/tag.js:64:10)\n    at Object.tagFilter [as onRenderEnd] (/Users/shuan/Desktop/blog/blog/node_modules/hexo/lib/hexo/post.js:230:16)\n    at Promise.then.then.result (/Users/shuan/Desktop/blog/blog/node_modules/hexo/lib/hexo/render.js:65:19)\n    at tryCatcher (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/util.js:16:23)\n    at Promise._settlePromiseFromHandler (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/promise.js:512:31)\n    at Promise._settlePromise (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/promise.js:569:18)\n    at Promise._settlePromise0 (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/promise.js:614:10)\n    at Promise._settlePromises (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/promise.js:694:18)\n    at _drainQueueStep (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/async.js:138:12)\n    at _drainQueue (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/async.js:131:9)\n    at Async._drainQueues (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/async.js:147:5)\n    at Immediate.Async.drainQueues [as _onImmediate] (/Users/shuan/Desktop/blog/blog/node_modules/bluebird/js/release/async.js:17:14)\n    at runCallback (timers.js:794:20)\n    at tryOnImmediate (timers.js:752:5)\n    at processImmediate [as _immediateCallback] (timers.js:729:5)\n```\n\n\n可能是标记异常，想到今天写的一篇关于vue的文档，赶紧回原文看了看。\n原来是文章中使用了大括号 { } 这个特殊字符,且没有转义导致编译不通过\n> Template render error 模板渲染错误\n> 解决方案：将 { } 的大括号通过`&#123;`和` &#125;` 进行转换","slug":"hexo","published":1,"updated":"2021-07-01T07:30:54.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wue1000ozgsy4ky0zlu7","content":"<p>今日上传代码，遇到一个坑，<br><code>hexo h</code>报错：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">Template render error: (unknown path) [Line 5, Column 20]</span><br><span class=\"line\">  expected variable <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">at</span> Object._prettifyError (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/nunjucks/src/lib.js:<span class=\"number\">36</span>:<span class=\"number\">11</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Template.render (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/nunjucks/src/environment.js:<span class=\"number\">524</span>:<span class=\"number\">21</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Environment.renderString (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/nunjucks/src/environment.js:<span class=\"number\">362</span>:<span class=\"number\">17</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/hexo/lib/extend/tag.js:<span class=\"number\">66</span>:<span class=\"number\">9</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise._execute (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/debuggability.js:<span class=\"number\">313</span>:<span class=\"number\">9</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise._resolveFromExecutor (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/promise.js:<span class=\"number\">483</span>:<span class=\"number\">18</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> <span class=\"keyword\">new</span> Promise (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/promise.js:<span class=\"number\">79</span>:<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Tag.render (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/hexo/lib/extend/tag.js:<span class=\"number\">64</span>:<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Object.tagFilter [<span class=\"keyword\">as</span> onRenderEnd] (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/hexo/lib/hexo/post.js:<span class=\"number\">230</span>:<span class=\"number\">16</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise.then.then.result (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/hexo/lib/hexo/render.js:<span class=\"number\">65</span>:<span class=\"number\">19</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> tryCatcher (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/util.js:<span class=\"number\">16</span>:<span class=\"number\">23</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise._settlePromiseFromHandler (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/promise.js:<span class=\"number\">512</span>:<span class=\"number\">31</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise._settlePromise (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/promise.js:<span class=\"number\">569</span>:<span class=\"number\">18</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise._settlePromise0 (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/promise.js:<span class=\"number\">614</span>:<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise._settlePromises (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/promise.js:<span class=\"number\">694</span>:<span class=\"number\">18</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> _drainQueueStep (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/async.js:<span class=\"number\">138</span>:<span class=\"number\">12</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> _drainQueue (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/async.js:<span class=\"number\">131</span>:<span class=\"number\">9</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Async._drainQueues (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/async.js:<span class=\"number\">147</span>:<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Immediate.Async.drainQueues [<span class=\"keyword\">as</span> _onImmediate] (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/async.js:<span class=\"number\">17</span>:<span class=\"number\">14</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> runCallback (timers.js:<span class=\"number\">794</span>:<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> tryOnImmediate (timers.js:<span class=\"number\">752</span>:<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> processImmediate [<span class=\"keyword\">as</span> _immediateCallback] (timers.js:<span class=\"number\">729</span>:<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure></p>\n<p>可能是标记异常，想到今天写的一篇关于vue的文档，赶紧回原文看了看。<br>原来是文章中使用了大括号 { } 这个特殊字符,且没有转义导致编译不通过</p>\n<blockquote>\n<p>Template render error 模板渲染错误<br>解决方案：将 { } 的大括号通过<code>&amp;#123;</code>和<code>&amp;#125;</code> 进行转换</p>\n</blockquote>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>今日上传代码，遇到一个坑，<br><code>hexo h</code>报错：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">Template render error: (unknown path) [Line 5, Column 20]</span><br><span class=\"line\">  expected variable <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">at</span> Object._prettifyError (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/nunjucks/src/lib.js:<span class=\"number\">36</span>:<span class=\"number\">11</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Template.render (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/nunjucks/src/environment.js:<span class=\"number\">524</span>:<span class=\"number\">21</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Environment.renderString (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/nunjucks/src/environment.js:<span class=\"number\">362</span>:<span class=\"number\">17</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/hexo/lib/extend/tag.js:<span class=\"number\">66</span>:<span class=\"number\">9</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise._execute (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/debuggability.js:<span class=\"number\">313</span>:<span class=\"number\">9</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise._resolveFromExecutor (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/promise.js:<span class=\"number\">483</span>:<span class=\"number\">18</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> <span class=\"keyword\">new</span> Promise (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/promise.js:<span class=\"number\">79</span>:<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Tag.render (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/hexo/lib/extend/tag.js:<span class=\"number\">64</span>:<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Object.tagFilter [<span class=\"keyword\">as</span> onRenderEnd] (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/hexo/lib/hexo/post.js:<span class=\"number\">230</span>:<span class=\"number\">16</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise.then.then.result (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/hexo/lib/hexo/render.js:<span class=\"number\">65</span>:<span class=\"number\">19</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> tryCatcher (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/util.js:<span class=\"number\">16</span>:<span class=\"number\">23</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise._settlePromiseFromHandler (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/promise.js:<span class=\"number\">512</span>:<span class=\"number\">31</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise._settlePromise (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/promise.js:<span class=\"number\">569</span>:<span class=\"number\">18</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise._settlePromise0 (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/promise.js:<span class=\"number\">614</span>:<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Promise._settlePromises (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/promise.js:<span class=\"number\">694</span>:<span class=\"number\">18</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> _drainQueueStep (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/async.js:<span class=\"number\">138</span>:<span class=\"number\">12</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> _drainQueue (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/async.js:<span class=\"number\">131</span>:<span class=\"number\">9</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Async._drainQueues (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/async.js:<span class=\"number\">147</span>:<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> Immediate.Async.drainQueues [<span class=\"keyword\">as</span> _onImmediate] (/<span class=\"keyword\">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class=\"keyword\">release</span>/async.js:<span class=\"number\">17</span>:<span class=\"number\">14</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> runCallback (timers.js:<span class=\"number\">794</span>:<span class=\"number\">20</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> tryOnImmediate (timers.js:<span class=\"number\">752</span>:<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">at</span> processImmediate [<span class=\"keyword\">as</span> _immediateCallback] (timers.js:<span class=\"number\">729</span>:<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure></p>\n<p>可能是标记异常，想到今天写的一篇关于vue的文档，赶紧回原文看了看。<br>原来是文章中使用了大括号 { } 这个特殊字符,且没有转义导致编译不通过</p>\n<blockquote>\n<p>Template render error 模板渲染错误<br>解决方案：将 { } 的大括号通过<code>&amp;#123;</code>和<code>&amp;#125;</code> 进行转换</p>\n</blockquote>\n"},{"title":"github访问代理映射","date":"2021-07-02T02:39:40.000Z","keywords":"github访问","copyright":true,"_content":"<blockquote class=\"blockquote-center\">\n为本地 hosts 文件添加 Github 相关映射\n</blockquote>\n<!-- more -->\n\n1. 打开本地 hosts 文件 win + r => `C:\\WINDOWS\\system32\\drivers\\etc`进入\n2. 获取 Github 相关网站的 IP\n\n- 访问 https://www.ipaddress.com\n- 输入 github.global.ssl.fastly.net 和 github.com，查询ip地址\n\n3. 将查询到的内容填写到hosts文件中：\n\n```shell\n140.82.112.3      github.com\n199.232.69.194    github.global.ssl.fastly.net\n```\n\n4. 使用`ping github.com`查询是否配置成功\n    ","source":"_posts/github访问代理映射.md","raw":"---\ntitle: github访问代理映射 \ndate: 2021-07-02 10:39:40 \ntags: [编程,技巧]\nkeywords: github访问 \ncopyright: true\n---\n<blockquote class=\"blockquote-center\">\n为本地 hosts 文件添加 Github 相关映射\n</blockquote>\n<!-- more -->\n\n1. 打开本地 hosts 文件 win + r => `C:\\WINDOWS\\system32\\drivers\\etc`进入\n2. 获取 Github 相关网站的 IP\n\n- 访问 https://www.ipaddress.com\n- 输入 github.global.ssl.fastly.net 和 github.com，查询ip地址\n\n3. 将查询到的内容填写到hosts文件中：\n\n```shell\n140.82.112.3      github.com\n199.232.69.194    github.global.ssl.fastly.net\n```\n\n4. 使用`ping github.com`查询是否配置成功\n    ","slug":"github访问代理映射","published":1,"updated":"2021-07-02T11:30:04.692Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wue4000tzgsy5staxs04","content":"<p><blockquote class=\"blockquote-center\"><br>为本地 hosts 文件添加 Github 相关映射<br></blockquote><br><a id=\"more\"></a></p>\n<ol>\n<li>打开本地 hosts 文件 win + r =&gt; <code>C:\\WINDOWS\\system32\\drivers\\etc</code>进入</li>\n<li>获取 Github 相关网站的 IP</li>\n</ol>\n<ul>\n<li>访问 <a href=\"https://www.ipaddress.com\" target=\"_blank\" rel=\"noopener\">https://www.ipaddress.com</a></li>\n<li>输入 github.global.ssl.fastly.net 和 github.com，查询ip地址</li>\n</ul>\n<ol start=\"3\">\n<li>将查询到的内容填写到hosts文件中：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">140.82.112.3      github.com</span><br><span class=\"line\">199.232.69.194    github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>使用<code>ping github.com</code>查询是否配置成功</li>\n</ol>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"<p><blockquote class=\"blockquote-center\"><br>为本地 hosts 文件添加 Github 相关映射<br></blockquote><br></p>","more":"<p></p>\n<ol>\n<li>打开本地 hosts 文件 win + r =&gt; <code>C:\\WINDOWS\\system32\\drivers\\etc</code>进入</li>\n<li>获取 Github 相关网站的 IP</li>\n</ol>\n<ul>\n<li>访问 <a href=\"https://www.ipaddress.com\" target=\"_blank\" rel=\"noopener\">https://www.ipaddress.com</a></li>\n<li>输入 github.global.ssl.fastly.net 和 github.com，查询ip地址</li>\n</ul>\n<ol start=\"3\">\n<li>将查询到的内容填写到hosts文件中：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">140.82.112.3      github.com</span><br><span class=\"line\">199.232.69.194    github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>使用<code>ping github.com</code>查询是否配置成功</li>\n</ol>"},{"title":"html组件","_content":"\n今日读了掘金上面的一篇文章，讲的是html组件。\n===\n#### 四大 Web 组件标准\n四大 Web 组件标准分别为：HTML Template、Shadow DOM、Custom Elements 和 HTML Imports。实际上其中一个已经被废弃了，所以变成“三大”了。\n\nHTML Template,简单的讲也就是 HTML5 中的` <template>` 标签，正常情况下它无色无味，感知不到它的存在，甚至它下面的 img 都不会被下载，script 都不会被执行。<template> 就如它的名字一样，它只是一个模版，只有到你用到它时，它才会变得有意义。\n\n\nShadow DOM 则是原生组件封装的基本工具，它可以实现组件与组件之间的独立性。\nCustom Elements 是用来包装原生组件的容器，通过它，你就只需要写一个标签，就能得到一个完整的组件。\n\n\nHTML Imports 则是 HTML 中类似于 ES6 Module 的一个东西，你可以直接 import 另一个 html 文件，然后使用其中的 DOM 节点。但是，由于 HTML Imports 和 ES6 Module 实在是太像了，并且除了 Chrome 以外没有浏览器愿意实现它，所以它已经被废弃并不推荐使用了。未来会使用 ES6 Module 来取代它，但是现在貌似还没有取代的方案，在新版的 Chrome 中这个功能已经被删除了，并且在使用的时候会在 Console 中给出警告。警告中说使用 ES Modules 来取代，但是我测试在 Chrome 71 中 ES Module 会强制检测文件的 MIME 类型必须为 JavaScript 类型，应该是暂时还没有实现支持。\n\n\n![](https://user-gold-cdn.xitu.io/2018/10/18/16684f2ad0409535?imageslim)\n\n##### Shadow DOM\nDOM，在 HTML 中作为一个最基础的骨架而存在，它是一个树结构，树上的每一个节点都是 HTML 中的一部分。DOM 作为一棵树，它拥有着上下级的层级关系，我们通常使用“父节点”、“子节点”、“兄弟节点”等来进行描述（当然有人觉得这些称谓强调性别，所以也创造了一些性别无关的称谓）。子节点在一定程度上会继承父节点的一些东西，也会因兄弟节点而产生一定的影响，比较明显的是在应用 CSS Style 的时候，子节点会从父节点那里继承一些样式。\n\n\n而 Shadow DOM，也是 DOM 的一种，所以它也是一颗树，只不过它是长在 DOM 树上的一棵特殊的子树。\n\n\nShadow DOM 的特别之处就在于它致力于创建一个相对独立的一个空间，虽然也是长在 DOM 树上的，但是它的环境却是与外界隔离的，当然这个隔离是相对的，在这个隔离空间中，你可以选择性地从 DOM 树上的父节点继承一些属性，甚至是继承一棵 DOM 树进来。\n利用 Shadow DOM 的隔离性，我们就可以创造原生的 HTML 组件了。\n实际上，浏览器已经通过 Shadow DOM 实现了一些组件了，只是我们使用过却没有察觉而已，这也是 Shadow DOM 封装的组件的魅力所在：你只管写一个 HTML 标签，其他的交给我。（是不是有点像 React 的 JSX 啊？）\n```html\n<video controls src=\"./video.mp4\" width=\"400\" height=\"300\"></video>\n```\n![](https://user-gold-cdn.xitu.io/2018/10/18/16684f31a0ba2ada?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n![](https://user-gold-cdn.xitu.io/2018/10/18/16684f3402275323?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n> 注：浏览器默认隐藏自身的 Shadow DOM 实现，但如果是用户通过脚本创造的 Shadow DOM，是不会被隐藏的。\n![](https://user-gold-cdn.xitu.io/2018/10/18/16684f3694275a9b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\nshadow DOM 中的节点大多都有 pseudo 属性，根据这个属性，你就可以在外面编写 CSS 样式来控制对应的节点样式了。比如，将上面这个 \npseudo=\"-webkit-media-controls-overlay-play-button\" 的 input 按钮的背景色改为橙色：\n```css\nvideo::-webkit-media-controls-overlay-play-button {\n  background-color: orange;\n}\n```\n![](https://user-gold-cdn.xitu.io/2018/10/18/16684f3b4eabacd8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n\n由于 Shadow DOM 实际上也是 DOM 的一种，所以在 Shadow DOM 中还可以继续嵌套 Shadow DOM，就像上面那样。\n\n\n浏览器中还有很多 Element 都使用了 Shadow DOM 的形式进行封装，比如 `<input>`、`<select>`、`<audio>` 等，这里就不一一展示了。\n由于 Shadow DOM 的隔离性，所以即便是你在外面写了个样式：`div { background-color: red !important; }`，Shadow DOM 内部的 div 也不会受到任何影响。\n\n\n也就是说，写样式的时候，该用 id 的时候就用 id，该用 class 的时候就用 class，一个按钮的 class 应该写成 .button 就写成 .button。完全不用考虑当前组件中的 id、class 可能会与其他组件冲突，你只要确保一个组件内部不冲突就好——这很容易做到。\n\n\n这解决了现在绝大多数的组件化框架都面临的问题：Element 的 class(className) 到底怎么写？用前缀命名空间的形式会导致 class 名太长，像这样：`.header-nav-list-sublist-button-icon`；而使用一些 CSS-in-JS 工具，可以创造一些唯一的 class 名称，像这样：`.Nav__welcomeWrapper___lKXTg`，这样的名称仍旧有点长，还带了冗余信息。\n\n\n##### ShadowRoot\nShadowRoot 是 Shadow DOM 下面的根，你可以把它当做 DOM 中的 <body> 一样看待，但是它不是 <body>，所以你不能使用 <body> 上的一些属性，甚至它不是一个节点。\n\n\n你可以通过 ShadowRoot 下面的 appendChild、querySelectorAll 之类的属性或方法去操作整个 Shadow DOM 树。\n\n\n对于一个普通的 Element，比如 `<div>`，你可以通过调用它上面的 attachShadow 方法来创建一个 ShadowRoot（还有一个 createShadowRoot 方法，已经过时不推荐使用），attachShadow 接受一个对象进行初始化：`{ mode: 'open' }`，这个对象有一个 mode 属性，它有两个取值：'open' 和 'closed'，这个属性是在创造 ShadowRoot 的时候需要初始化提供的，并在创建 ShadowRoot 之后成为一个只读属性。\nmode: 'open' 和 mode: 'closed' 有什么区别呢？在调用 attachShadow 创建 ShadowRoot 之后，attachShdow 方法会返回 ShadowRoot 对象实例，你可以通过这个返回值去构造整个 Shadow DOM。当 mode 为 'open' 时，在用于创建 ShadowRoot 的外部普通节点（比如` <div>`）上，会有一个 shadowRoot 属性，这个属性也就是创造出来的那个 ShadowRoot，也就是说，在创建 ShadowRoot 之后，还是可以在任何地方通过这个属性再得到 ShadowRoot，继续对其进行改造；而当 mode 为 'closed' 时，你将不能再得到这个属性，这个属性会被设置为 null，也就是说，你只能在 attachShadow 之后得到 ShadowRoot 对象，用于构造整个 Shadow DOM，一旦你失去对这个对象的引用，你就无法再对 Shadow DOM 进行改造了。\n\n\n可以从上面 Shadow DOM 的截图中看到 #shadow-root (user-agent) 的字样，这就是 ShadowRoot 对象了，而括号中的 user-agent 表示这是浏览器内部实现的 Shadow DOM，如果使用通过脚本自己创建的 ShadowRoot，括号中会显示为 open 或 closed 表示 Shadow DOM 的 mode。\n\n![](https://user-gold-cdn.xitu.io/2018/10/18/16684f3f3702ee88?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n> 浏览器内部实现的 user-agent 的 mode 为 closed，所以你不能通过节点的 ShadowRoot 属性去获得其 ShadowRoot 对象，也就意味着你不能通过脚本对这些浏览器内部实现的 Shadow DOM 进行改造。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[链接](https://juejin.im/post/5bc7ead7f265da0afc2c2c6b)\n","source":"_posts/html组件.md","raw":"---\ntitle: html组件\ncategories: html\ntags: [语言,理解]\n---\n\n今日读了掘金上面的一篇文章，讲的是html组件。\n===\n#### 四大 Web 组件标准\n四大 Web 组件标准分别为：HTML Template、Shadow DOM、Custom Elements 和 HTML Imports。实际上其中一个已经被废弃了，所以变成“三大”了。\n\nHTML Template,简单的讲也就是 HTML5 中的` <template>` 标签，正常情况下它无色无味，感知不到它的存在，甚至它下面的 img 都不会被下载，script 都不会被执行。<template> 就如它的名字一样，它只是一个模版，只有到你用到它时，它才会变得有意义。\n\n\nShadow DOM 则是原生组件封装的基本工具，它可以实现组件与组件之间的独立性。\nCustom Elements 是用来包装原生组件的容器，通过它，你就只需要写一个标签，就能得到一个完整的组件。\n\n\nHTML Imports 则是 HTML 中类似于 ES6 Module 的一个东西，你可以直接 import 另一个 html 文件，然后使用其中的 DOM 节点。但是，由于 HTML Imports 和 ES6 Module 实在是太像了，并且除了 Chrome 以外没有浏览器愿意实现它，所以它已经被废弃并不推荐使用了。未来会使用 ES6 Module 来取代它，但是现在貌似还没有取代的方案，在新版的 Chrome 中这个功能已经被删除了，并且在使用的时候会在 Console 中给出警告。警告中说使用 ES Modules 来取代，但是我测试在 Chrome 71 中 ES Module 会强制检测文件的 MIME 类型必须为 JavaScript 类型，应该是暂时还没有实现支持。\n\n\n![](https://user-gold-cdn.xitu.io/2018/10/18/16684f2ad0409535?imageslim)\n\n##### Shadow DOM\nDOM，在 HTML 中作为一个最基础的骨架而存在，它是一个树结构，树上的每一个节点都是 HTML 中的一部分。DOM 作为一棵树，它拥有着上下级的层级关系，我们通常使用“父节点”、“子节点”、“兄弟节点”等来进行描述（当然有人觉得这些称谓强调性别，所以也创造了一些性别无关的称谓）。子节点在一定程度上会继承父节点的一些东西，也会因兄弟节点而产生一定的影响，比较明显的是在应用 CSS Style 的时候，子节点会从父节点那里继承一些样式。\n\n\n而 Shadow DOM，也是 DOM 的一种，所以它也是一颗树，只不过它是长在 DOM 树上的一棵特殊的子树。\n\n\nShadow DOM 的特别之处就在于它致力于创建一个相对独立的一个空间，虽然也是长在 DOM 树上的，但是它的环境却是与外界隔离的，当然这个隔离是相对的，在这个隔离空间中，你可以选择性地从 DOM 树上的父节点继承一些属性，甚至是继承一棵 DOM 树进来。\n利用 Shadow DOM 的隔离性，我们就可以创造原生的 HTML 组件了。\n实际上，浏览器已经通过 Shadow DOM 实现了一些组件了，只是我们使用过却没有察觉而已，这也是 Shadow DOM 封装的组件的魅力所在：你只管写一个 HTML 标签，其他的交给我。（是不是有点像 React 的 JSX 啊？）\n```html\n<video controls src=\"./video.mp4\" width=\"400\" height=\"300\"></video>\n```\n![](https://user-gold-cdn.xitu.io/2018/10/18/16684f31a0ba2ada?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n![](https://user-gold-cdn.xitu.io/2018/10/18/16684f3402275323?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n> 注：浏览器默认隐藏自身的 Shadow DOM 实现，但如果是用户通过脚本创造的 Shadow DOM，是不会被隐藏的。\n![](https://user-gold-cdn.xitu.io/2018/10/18/16684f3694275a9b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\nshadow DOM 中的节点大多都有 pseudo 属性，根据这个属性，你就可以在外面编写 CSS 样式来控制对应的节点样式了。比如，将上面这个 \npseudo=\"-webkit-media-controls-overlay-play-button\" 的 input 按钮的背景色改为橙色：\n```css\nvideo::-webkit-media-controls-overlay-play-button {\n  background-color: orange;\n}\n```\n![](https://user-gold-cdn.xitu.io/2018/10/18/16684f3b4eabacd8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n\n由于 Shadow DOM 实际上也是 DOM 的一种，所以在 Shadow DOM 中还可以继续嵌套 Shadow DOM，就像上面那样。\n\n\n浏览器中还有很多 Element 都使用了 Shadow DOM 的形式进行封装，比如 `<input>`、`<select>`、`<audio>` 等，这里就不一一展示了。\n由于 Shadow DOM 的隔离性，所以即便是你在外面写了个样式：`div { background-color: red !important; }`，Shadow DOM 内部的 div 也不会受到任何影响。\n\n\n也就是说，写样式的时候，该用 id 的时候就用 id，该用 class 的时候就用 class，一个按钮的 class 应该写成 .button 就写成 .button。完全不用考虑当前组件中的 id、class 可能会与其他组件冲突，你只要确保一个组件内部不冲突就好——这很容易做到。\n\n\n这解决了现在绝大多数的组件化框架都面临的问题：Element 的 class(className) 到底怎么写？用前缀命名空间的形式会导致 class 名太长，像这样：`.header-nav-list-sublist-button-icon`；而使用一些 CSS-in-JS 工具，可以创造一些唯一的 class 名称，像这样：`.Nav__welcomeWrapper___lKXTg`，这样的名称仍旧有点长，还带了冗余信息。\n\n\n##### ShadowRoot\nShadowRoot 是 Shadow DOM 下面的根，你可以把它当做 DOM 中的 <body> 一样看待，但是它不是 <body>，所以你不能使用 <body> 上的一些属性，甚至它不是一个节点。\n\n\n你可以通过 ShadowRoot 下面的 appendChild、querySelectorAll 之类的属性或方法去操作整个 Shadow DOM 树。\n\n\n对于一个普通的 Element，比如 `<div>`，你可以通过调用它上面的 attachShadow 方法来创建一个 ShadowRoot（还有一个 createShadowRoot 方法，已经过时不推荐使用），attachShadow 接受一个对象进行初始化：`{ mode: 'open' }`，这个对象有一个 mode 属性，它有两个取值：'open' 和 'closed'，这个属性是在创造 ShadowRoot 的时候需要初始化提供的，并在创建 ShadowRoot 之后成为一个只读属性。\nmode: 'open' 和 mode: 'closed' 有什么区别呢？在调用 attachShadow 创建 ShadowRoot 之后，attachShdow 方法会返回 ShadowRoot 对象实例，你可以通过这个返回值去构造整个 Shadow DOM。当 mode 为 'open' 时，在用于创建 ShadowRoot 的外部普通节点（比如` <div>`）上，会有一个 shadowRoot 属性，这个属性也就是创造出来的那个 ShadowRoot，也就是说，在创建 ShadowRoot 之后，还是可以在任何地方通过这个属性再得到 ShadowRoot，继续对其进行改造；而当 mode 为 'closed' 时，你将不能再得到这个属性，这个属性会被设置为 null，也就是说，你只能在 attachShadow 之后得到 ShadowRoot 对象，用于构造整个 Shadow DOM，一旦你失去对这个对象的引用，你就无法再对 Shadow DOM 进行改造了。\n\n\n可以从上面 Shadow DOM 的截图中看到 #shadow-root (user-agent) 的字样，这就是 ShadowRoot 对象了，而括号中的 user-agent 表示这是浏览器内部实现的 Shadow DOM，如果使用通过脚本自己创建的 ShadowRoot，括号中会显示为 open 或 closed 表示 Shadow DOM 的 mode。\n\n![](https://user-gold-cdn.xitu.io/2018/10/18/16684f3f3702ee88?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n> 浏览器内部实现的 user-agent 的 mode 为 closed，所以你不能通过节点的 ShadowRoot 属性去获得其 ShadowRoot 对象，也就意味着你不能通过脚本对这些浏览器内部实现的 Shadow DOM 进行改造。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[链接](https://juejin.im/post/5bc7ead7f265da0afc2c2c6b)\n","slug":"html组件","published":1,"date":"2021-07-01T07:30:54.547Z","updated":"2021-07-01T07:30:54.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wue5000wzgsyyizku5qu","content":"<h1 id=\"今日读了掘金上面的一篇文章，讲的是html组件。\"><a href=\"#今日读了掘金上面的一篇文章，讲的是html组件。\" class=\"headerlink\" title=\"今日读了掘金上面的一篇文章，讲的是html组件。\"></a>今日读了掘金上面的一篇文章，讲的是html组件。</h1><h4 id=\"四大-Web-组件标准\"><a href=\"#四大-Web-组件标准\" class=\"headerlink\" title=\"四大 Web 组件标准\"></a>四大 Web 组件标准</h4><p>四大 Web 组件标准分别为：HTML Template、Shadow DOM、Custom Elements 和 HTML Imports。实际上其中一个已经被废弃了，所以变成“三大”了。</p>\n<p>HTML Template,简单的讲也就是 HTML5 中的<code>&lt;template&gt;</code> 标签，正常情况下它无色无味，感知不到它的存在，甚至它下面的 img 都不会被下载，script 都不会被执行。<template> 就如它的名字一样，它只是一个模版，只有到你用到它时，它才会变得有意义。</template></p>\n<p>Shadow DOM 则是原生组件封装的基本工具，它可以实现组件与组件之间的独立性。<br>Custom Elements 是用来包装原生组件的容器，通过它，你就只需要写一个标签，就能得到一个完整的组件。</p>\n<p>HTML Imports 则是 HTML 中类似于 ES6 Module 的一个东西，你可以直接 import 另一个 html 文件，然后使用其中的 DOM 节点。但是，由于 HTML Imports 和 ES6 Module 实在是太像了，并且除了 Chrome 以外没有浏览器愿意实现它，所以它已经被废弃并不推荐使用了。未来会使用 ES6 Module 来取代它，但是现在貌似还没有取代的方案，在新版的 Chrome 中这个功能已经被删除了，并且在使用的时候会在 Console 中给出警告。警告中说使用 ES Modules 来取代，但是我测试在 Chrome 71 中 ES Module 会强制检测文件的 MIME 类型必须为 JavaScript 类型，应该是暂时还没有实现支持。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/16684f2ad0409535?imageslim\" alt=\"\"></p>\n<h5 id=\"Shadow-DOM\"><a href=\"#Shadow-DOM\" class=\"headerlink\" title=\"Shadow DOM\"></a>Shadow DOM</h5><p>DOM，在 HTML 中作为一个最基础的骨架而存在，它是一个树结构，树上的每一个节点都是 HTML 中的一部分。DOM 作为一棵树，它拥有着上下级的层级关系，我们通常使用“父节点”、“子节点”、“兄弟节点”等来进行描述（当然有人觉得这些称谓强调性别，所以也创造了一些性别无关的称谓）。子节点在一定程度上会继承父节点的一些东西，也会因兄弟节点而产生一定的影响，比较明显的是在应用 CSS Style 的时候，子节点会从父节点那里继承一些样式。</p>\n<p>而 Shadow DOM，也是 DOM 的一种，所以它也是一颗树，只不过它是长在 DOM 树上的一棵特殊的子树。</p>\n<p>Shadow DOM 的特别之处就在于它致力于创建一个相对独立的一个空间，虽然也是长在 DOM 树上的，但是它的环境却是与外界隔离的，当然这个隔离是相对的，在这个隔离空间中，你可以选择性地从 DOM 树上的父节点继承一些属性，甚至是继承一棵 DOM 树进来。<br>利用 Shadow DOM 的隔离性，我们就可以创造原生的 HTML 组件了。<br>实际上，浏览器已经通过 Shadow DOM 实现了一些组件了，只是我们使用过却没有察觉而已，这也是 Shadow DOM 封装的组件的魅力所在：你只管写一个 HTML 标签，其他的交给我。（是不是有点像 React 的 JSX 啊？）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">controls</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./video.mp4\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"400\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/16684f31a0ba2ada?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"><br><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/16684f3402275323?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<blockquote>\n<p>注：浏览器默认隐藏自身的 Shadow DOM 实现，但如果是用户通过脚本创造的 Shadow DOM，是不会被隐藏的。<br><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/16684f3694275a9b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"><br>shadow DOM 中的节点大多都有 pseudo 属性，根据这个属性，你就可以在外面编写 CSS 样式来控制对应的节点样式了。比如，将上面这个<br>pseudo=”-webkit-media-controls-overlay-play-button” 的 input 按钮的背景色改为橙色：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">video</span><span class=\"selector-pseudo\">::-webkit-media-controls-overlay-play-button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/16684f3b4eabacd8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<p>由于 Shadow DOM 实际上也是 DOM 的一种，所以在 Shadow DOM 中还可以继续嵌套 Shadow DOM，就像上面那样。</p>\n<p>浏览器中还有很多 Element 都使用了 Shadow DOM 的形式进行封装，比如 <code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;audio&gt;</code> 等，这里就不一一展示了。<br>由于 Shadow DOM 的隔离性，所以即便是你在外面写了个样式：<code>div { background-color: red !important; }</code>，Shadow DOM 内部的 div 也不会受到任何影响。</p>\n<p>也就是说，写样式的时候，该用 id 的时候就用 id，该用 class 的时候就用 class，一个按钮的 class 应该写成 .button 就写成 .button。完全不用考虑当前组件中的 id、class 可能会与其他组件冲突，你只要确保一个组件内部不冲突就好——这很容易做到。</p>\n<p>这解决了现在绝大多数的组件化框架都面临的问题：Element 的 class(className) 到底怎么写？用前缀命名空间的形式会导致 class 名太长，像这样：<code>.header-nav-list-sublist-button-icon</code>；而使用一些 CSS-in-JS 工具，可以创造一些唯一的 class 名称，像这样：<code>.Nav__welcomeWrapper___lKXTg</code>，这样的名称仍旧有点长，还带了冗余信息。</p>\n<h5 id=\"ShadowRoot\"><a href=\"#ShadowRoot\" class=\"headerlink\" title=\"ShadowRoot\"></a>ShadowRoot</h5><p>ShadowRoot 是 Shadow DOM 下面的根，你可以把它当做 DOM 中的 <body> 一样看待，但是它不是 <body>，所以你不能使用 <body> 上的一些属性，甚至它不是一个节点。</body></body></body></p>\n<p>你可以通过 ShadowRoot 下面的 appendChild、querySelectorAll 之类的属性或方法去操作整个 Shadow DOM 树。</p>\n<p>对于一个普通的 Element，比如 <code>&lt;div&gt;</code>，你可以通过调用它上面的 attachShadow 方法来创建一个 ShadowRoot（还有一个 createShadowRoot 方法，已经过时不推荐使用），attachShadow 接受一个对象进行初始化：<code>{ mode: &#39;open&#39; }</code>，这个对象有一个 mode 属性，它有两个取值：’open’ 和 ‘closed’，这个属性是在创造 ShadowRoot 的时候需要初始化提供的，并在创建 ShadowRoot 之后成为一个只读属性。<br>mode: ‘open’ 和 mode: ‘closed’ 有什么区别呢？在调用 attachShadow 创建 ShadowRoot 之后，attachShdow 方法会返回 ShadowRoot 对象实例，你可以通过这个返回值去构造整个 Shadow DOM。当 mode 为 ‘open’ 时，在用于创建 ShadowRoot 的外部普通节点（比如<code>&lt;div&gt;</code>）上，会有一个 shadowRoot 属性，这个属性也就是创造出来的那个 ShadowRoot，也就是说，在创建 ShadowRoot 之后，还是可以在任何地方通过这个属性再得到 ShadowRoot，继续对其进行改造；而当 mode 为 ‘closed’ 时，你将不能再得到这个属性，这个属性会被设置为 null，也就是说，你只能在 attachShadow 之后得到 ShadowRoot 对象，用于构造整个 Shadow DOM，一旦你失去对这个对象的引用，你就无法再对 Shadow DOM 进行改造了。</p>\n<p>可以从上面 Shadow DOM 的截图中看到 #shadow-root (user-agent) 的字样，这就是 ShadowRoot 对象了，而括号中的 user-agent 表示这是浏览器内部实现的 Shadow DOM，如果使用通过脚本自己创建的 ShadowRoot，括号中会显示为 open 或 closed 表示 Shadow DOM 的 mode。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/16684f3f3702ee88?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<blockquote>\n<p>浏览器内部实现的 user-agent 的 mode 为 closed，所以你不能通过节点的 ShadowRoot 属性去获得其 ShadowRoot 对象，也就意味着你不能通过脚本对这些浏览器内部实现的 Shadow DOM 进行改造。</p>\n</blockquote>\n<p><a href=\"https://juejin.im/post/5bc7ead7f265da0afc2c2c6b\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<h1 id=\"今日读了掘金上面的一篇文章，讲的是html组件。\"><a href=\"#今日读了掘金上面的一篇文章，讲的是html组件。\" class=\"headerlink\" title=\"今日读了掘金上面的一篇文章，讲的是html组件。\"></a>今日读了掘金上面的一篇文章，讲的是html组件。</h1><h4 id=\"四大-Web-组件标准\"><a href=\"#四大-Web-组件标准\" class=\"headerlink\" title=\"四大 Web 组件标准\"></a>四大 Web 组件标准</h4><p>四大 Web 组件标准分别为：HTML Template、Shadow DOM、Custom Elements 和 HTML Imports。实际上其中一个已经被废弃了，所以变成“三大”了。</p>\n<p>HTML Template,简单的讲也就是 HTML5 中的<code>&lt;template&gt;</code> 标签，正常情况下它无色无味，感知不到它的存在，甚至它下面的 img 都不会被下载，script 都不会被执行。<template> 就如它的名字一样，它只是一个模版，只有到你用到它时，它才会变得有意义。</template></p>\n<p>Shadow DOM 则是原生组件封装的基本工具，它可以实现组件与组件之间的独立性。<br>Custom Elements 是用来包装原生组件的容器，通过它，你就只需要写一个标签，就能得到一个完整的组件。</p>\n<p>HTML Imports 则是 HTML 中类似于 ES6 Module 的一个东西，你可以直接 import 另一个 html 文件，然后使用其中的 DOM 节点。但是，由于 HTML Imports 和 ES6 Module 实在是太像了，并且除了 Chrome 以外没有浏览器愿意实现它，所以它已经被废弃并不推荐使用了。未来会使用 ES6 Module 来取代它，但是现在貌似还没有取代的方案，在新版的 Chrome 中这个功能已经被删除了，并且在使用的时候会在 Console 中给出警告。警告中说使用 ES Modules 来取代，但是我测试在 Chrome 71 中 ES Module 会强制检测文件的 MIME 类型必须为 JavaScript 类型，应该是暂时还没有实现支持。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/16684f2ad0409535?imageslim\" alt=\"\"></p>\n<h5 id=\"Shadow-DOM\"><a href=\"#Shadow-DOM\" class=\"headerlink\" title=\"Shadow DOM\"></a>Shadow DOM</h5><p>DOM，在 HTML 中作为一个最基础的骨架而存在，它是一个树结构，树上的每一个节点都是 HTML 中的一部分。DOM 作为一棵树，它拥有着上下级的层级关系，我们通常使用“父节点”、“子节点”、“兄弟节点”等来进行描述（当然有人觉得这些称谓强调性别，所以也创造了一些性别无关的称谓）。子节点在一定程度上会继承父节点的一些东西，也会因兄弟节点而产生一定的影响，比较明显的是在应用 CSS Style 的时候，子节点会从父节点那里继承一些样式。</p>\n<p>而 Shadow DOM，也是 DOM 的一种，所以它也是一颗树，只不过它是长在 DOM 树上的一棵特殊的子树。</p>\n<p>Shadow DOM 的特别之处就在于它致力于创建一个相对独立的一个空间，虽然也是长在 DOM 树上的，但是它的环境却是与外界隔离的，当然这个隔离是相对的，在这个隔离空间中，你可以选择性地从 DOM 树上的父节点继承一些属性，甚至是继承一棵 DOM 树进来。<br>利用 Shadow DOM 的隔离性，我们就可以创造原生的 HTML 组件了。<br>实际上，浏览器已经通过 Shadow DOM 实现了一些组件了，只是我们使用过却没有察觉而已，这也是 Shadow DOM 封装的组件的魅力所在：你只管写一个 HTML 标签，其他的交给我。（是不是有点像 React 的 JSX 啊？）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">controls</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./video.mp4\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"400\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/16684f31a0ba2ada?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"><br><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/16684f3402275323?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<blockquote>\n<p>注：浏览器默认隐藏自身的 Shadow DOM 实现，但如果是用户通过脚本创造的 Shadow DOM，是不会被隐藏的。<br><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/16684f3694275a9b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"><br>shadow DOM 中的节点大多都有 pseudo 属性，根据这个属性，你就可以在外面编写 CSS 样式来控制对应的节点样式了。比如，将上面这个<br>pseudo=”-webkit-media-controls-overlay-play-button” 的 input 按钮的背景色改为橙色：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">video</span><span class=\"selector-pseudo\">::-webkit-media-controls-overlay-play-button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/16684f3b4eabacd8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<p>由于 Shadow DOM 实际上也是 DOM 的一种，所以在 Shadow DOM 中还可以继续嵌套 Shadow DOM，就像上面那样。</p>\n<p>浏览器中还有很多 Element 都使用了 Shadow DOM 的形式进行封装，比如 <code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;audio&gt;</code> 等，这里就不一一展示了。<br>由于 Shadow DOM 的隔离性，所以即便是你在外面写了个样式：<code>div { background-color: red !important; }</code>，Shadow DOM 内部的 div 也不会受到任何影响。</p>\n<p>也就是说，写样式的时候，该用 id 的时候就用 id，该用 class 的时候就用 class，一个按钮的 class 应该写成 .button 就写成 .button。完全不用考虑当前组件中的 id、class 可能会与其他组件冲突，你只要确保一个组件内部不冲突就好——这很容易做到。</p>\n<p>这解决了现在绝大多数的组件化框架都面临的问题：Element 的 class(className) 到底怎么写？用前缀命名空间的形式会导致 class 名太长，像这样：<code>.header-nav-list-sublist-button-icon</code>；而使用一些 CSS-in-JS 工具，可以创造一些唯一的 class 名称，像这样：<code>.Nav__welcomeWrapper___lKXTg</code>，这样的名称仍旧有点长，还带了冗余信息。</p>\n<h5 id=\"ShadowRoot\"><a href=\"#ShadowRoot\" class=\"headerlink\" title=\"ShadowRoot\"></a>ShadowRoot</h5><p>ShadowRoot 是 Shadow DOM 下面的根，你可以把它当做 DOM 中的 <body> 一样看待，但是它不是 <body>，所以你不能使用 <body> 上的一些属性，甚至它不是一个节点。</body></body></body></p>\n<p>你可以通过 ShadowRoot 下面的 appendChild、querySelectorAll 之类的属性或方法去操作整个 Shadow DOM 树。</p>\n<p>对于一个普通的 Element，比如 <code>&lt;div&gt;</code>，你可以通过调用它上面的 attachShadow 方法来创建一个 ShadowRoot（还有一个 createShadowRoot 方法，已经过时不推荐使用），attachShadow 接受一个对象进行初始化：<code>{ mode: &#39;open&#39; }</code>，这个对象有一个 mode 属性，它有两个取值：’open’ 和 ‘closed’，这个属性是在创造 ShadowRoot 的时候需要初始化提供的，并在创建 ShadowRoot 之后成为一个只读属性。<br>mode: ‘open’ 和 mode: ‘closed’ 有什么区别呢？在调用 attachShadow 创建 ShadowRoot 之后，attachShdow 方法会返回 ShadowRoot 对象实例，你可以通过这个返回值去构造整个 Shadow DOM。当 mode 为 ‘open’ 时，在用于创建 ShadowRoot 的外部普通节点（比如<code>&lt;div&gt;</code>）上，会有一个 shadowRoot 属性，这个属性也就是创造出来的那个 ShadowRoot，也就是说，在创建 ShadowRoot 之后，还是可以在任何地方通过这个属性再得到 ShadowRoot，继续对其进行改造；而当 mode 为 ‘closed’ 时，你将不能再得到这个属性，这个属性会被设置为 null，也就是说，你只能在 attachShadow 之后得到 ShadowRoot 对象，用于构造整个 Shadow DOM，一旦你失去对这个对象的引用，你就无法再对 Shadow DOM 进行改造了。</p>\n<p>可以从上面 Shadow DOM 的截图中看到 #shadow-root (user-agent) 的字样，这就是 ShadowRoot 对象了，而括号中的 user-agent 表示这是浏览器内部实现的 Shadow DOM，如果使用通过脚本自己创建的 ShadowRoot，括号中会显示为 open 或 closed 表示 Shadow DOM 的 mode。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/10/18/16684f3f3702ee88?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<blockquote>\n<p>浏览器内部实现的 user-agent 的 mode 为 closed，所以你不能通过节点的 ShadowRoot 属性去获得其 ShadowRoot 对象，也就意味着你不能通过脚本对这些浏览器内部实现的 Shadow DOM 进行改造。</p>\n</blockquote>\n<p><a href=\"https://juejin.im/post/5bc7ead7f265da0afc2c2c6b\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n"},{"title":"gulp了解","_content":"\n* 安装 gulp `$ npm install --global gulp`\n* 任务管理文件 `gulpfile.js`\n```javascript\n//引入\nconst gulp = require('gulp')\nconst shelljs = require('shelljs')\n//定义任务，默认default\ngulp.task('default',()=>{\n   // console.log('this is deafult')\n   //执行\n})\n```\n* 运行 `$ gulp`\n\n","source":"_posts/gulp.md","raw":"---\ntitle: gulp了解\ncategories: gulp\ntags: [语言,感悟]\n---\n\n* 安装 gulp `$ npm install --global gulp`\n* 任务管理文件 `gulpfile.js`\n```javascript\n//引入\nconst gulp = require('gulp')\nconst shelljs = require('shelljs')\n//定义任务，默认default\ngulp.task('default',()=>{\n   // console.log('this is deafult')\n   //执行\n})\n```\n* 运行 `$ gulp`\n\n","slug":"gulp","published":1,"date":"2021-07-01T07:30:54.546Z","updated":"2021-07-01T07:30:54.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wue70010zgsymq3q5hjo","content":"<ul>\n<li>安装 gulp <code>$ npm install --global gulp</code></li>\n<li><p>任务管理文件 <code>gulpfile.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> shelljs = <span class=\"built_in\">require</span>(<span class=\"string\">'shelljs'</span>)</span><br><span class=\"line\"><span class=\"comment\">//定义任务，默认default</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,()=&gt;&#123;</span><br><span class=\"line\">   <span class=\"comment\">// console.log('this is deafult')</span></span><br><span class=\"line\">   <span class=\"comment\">//执行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行 <code>$ gulp</code></p>\n</li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<ul>\n<li>安装 gulp <code>$ npm install --global gulp</code></li>\n<li><p>任务管理文件 <code>gulpfile.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> shelljs = <span class=\"built_in\">require</span>(<span class=\"string\">'shelljs'</span>)</span><br><span class=\"line\"><span class=\"comment\">//定义任务，默认default</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,()=&gt;&#123;</span><br><span class=\"line\">   <span class=\"comment\">// console.log('this is deafult')</span></span><br><span class=\"line\">   <span class=\"comment\">//执行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行 <code>$ gulp</code></p>\n</li>\n</ul>\n"},{"title":"js八道题","date":"2018-03-31T16:00:00.000Z","_content":"\n##### 1，写出判断一个变量变量名为arr是数组的方法。\n```bash\narr instanceof Array\nif(typeof arr.isArray == undefined) {\n    return Array.prototype.toString.call = ['object Array']\n}\n//用一些数组方法去检测，比如slice()\n```\n\n##### 2,一下代码输入的结果是？\n```bash\nvar object = {\n    foo: 'bar',\n    func:function() {\n        var self = this;\n        console.log(this.foo);  //bar\n        console.log(self.foo);  //bar\n        (function() {\n            console.log(this.foo) //undefined\n            console.log(self.foo) //bar\n        })()\n    }\n}\nobject.func()\n\n//前两个的输出是因为在同一个作用域，this指向当前函数对象，第二次输出，因为是立即执行函数，所以this指向全局window，但是self指向的是当前作用域中的this\n//self这个变量会在整个func作用域中生效，同样，立即执行函数IIFE也在func作用域中，因此可以访问self，但IIFE由于缺乏对象this指向了window，但self提前保留了func的作用域this\n```\n\n##### 3，请实现以下findList方法\n```bash\nvar docs = [\n    { id: 1, words: ['hello', 'world'] },\n    { id: 2, words: ['hello', 'China'] },\n    { id: 3, words: ['zzz', 'hello'] },\n    { id: 4, words: ['world', 'China'] }\n];\nfindList(docs, ['hello']) //1,2,3\nfindList(docs, ['hello', 'world']) //1\n\nfunction findList(docs, arr) {\n    for (var i = 0; i < docs.length; i++) {\n        var bin = false\n        for (var j = 0; j < arr.length; j++) {\n            var str = arr[j]\n            if (docs[i].words.indexOf(str) == -1) {\n                bin = true\n            }\n        }\n        if(!bin) {\n            console.log(docs[i].id)\n        }\n    }\n}\n```\n\n##### 4，移动端如何适配不同手机屏幕，有什么解决方案\n- 目前知道的有百分比，rem，vh，flexible。。。\n\n##### 5，编写javascript深度克隆deepClone\n```bash\n//浅拷贝\nvar json1 = {\n    name: 'a',\n    age:12,\n    data:{\n        a:1,\n        b:2\n    }\n}\nfunction copy(parent,child) {\n    var child = child || {}\n    for(var i in parent) {\n        child[i] = parent[i]\n    }\n    return child\n}\nvar json2 = copy(json1)\njson2.data.a = 3\nconsole.log(json1.data.a)//3\nconsole.log(json2.data.a)//3\n\n//深拷贝\nvar json1 = {\n    name:'aa',\n    age:12,\n    data:{\n        a:1,\n        b:2\n    }\n}\n\nfunction deepCopy(parent,child) {\n    var child = child || {}\n    for(var i in parent) {\n        if(typeof parent[i] == 'object') {\n            child[i] = (parent[i].constructor === Array) ? [] : {}  //child.data = {}\n            deepCopy(parent[i],child[i]);//{a:1,b:2} 传过去的是child.data的空json\n        }else{\n            child[i] = parent[i]; //child.data.a ..\n        }\n    }\n    return child\n}\n\nvar json2 = deepCopy(json1)\njson2.data.a = 3;\nconsole.log(json1.data.a) //1\nconsole.log(json2.data.a) //3\n```\n\n##### 6，有一个数组a = [8, 10, 30, 55, 78, 90, 1]，新建一个数组b，b从a中一次随机选取一个元素，取完为止。\n```bash\nvar a = [8,10,30,55,78,90,1]\nvar b = []\nfor(var i = 0; i<a.length;i++) {\n    var randomNum = Math.floor(Math.random() * a.length) //7个随机数\n    var newStr = a.splice(randomNum,1).toString() //随机删除一个，并且把它转换为字符串\n    console.log(newStr)\n    i--;\n    b.push(newStr)\n}\nconsole.log(b)\n```\n##### 7,假设发现有一篇文章，var content = \"大量文字...\"，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色.\n```bash \n//正则\nfunction filter(content) {\n    var result = ''\n    var errWorld = ['坏','蠢']\n    for( var i  = 0; i<content.length;i++) {\n        var reg = new RegExp(errWorld[i],'ig')\n        result = content.replace(reg,'')\n    }\n    return result\n}\n```\n##### 8，编写sum()函数求和，非number类型参数需要进行过滤\n```bash\nfunction sum() {\n    var result = 0;\n    for(var i = 0; i<arguments.length;i++) {\n        if(isNaN(arguments[i])) {\n            continue\n        }else if(typeof arguments[i] === 'number'){\nresult +=arguments[i]\n        }\n    }\n    return result\n}\nsum(1,'aaaa',2,'ccc','2','33333',3)\n```\n\n","source":"_posts/js八道题.md","raw":"---\ntitle: js八道题\ndate: 2018-04-01\ncategories: js\ntags: [编程,感悟]\n---\n\n##### 1，写出判断一个变量变量名为arr是数组的方法。\n```bash\narr instanceof Array\nif(typeof arr.isArray == undefined) {\n    return Array.prototype.toString.call = ['object Array']\n}\n//用一些数组方法去检测，比如slice()\n```\n\n##### 2,一下代码输入的结果是？\n```bash\nvar object = {\n    foo: 'bar',\n    func:function() {\n        var self = this;\n        console.log(this.foo);  //bar\n        console.log(self.foo);  //bar\n        (function() {\n            console.log(this.foo) //undefined\n            console.log(self.foo) //bar\n        })()\n    }\n}\nobject.func()\n\n//前两个的输出是因为在同一个作用域，this指向当前函数对象，第二次输出，因为是立即执行函数，所以this指向全局window，但是self指向的是当前作用域中的this\n//self这个变量会在整个func作用域中生效，同样，立即执行函数IIFE也在func作用域中，因此可以访问self，但IIFE由于缺乏对象this指向了window，但self提前保留了func的作用域this\n```\n\n##### 3，请实现以下findList方法\n```bash\nvar docs = [\n    { id: 1, words: ['hello', 'world'] },\n    { id: 2, words: ['hello', 'China'] },\n    { id: 3, words: ['zzz', 'hello'] },\n    { id: 4, words: ['world', 'China'] }\n];\nfindList(docs, ['hello']) //1,2,3\nfindList(docs, ['hello', 'world']) //1\n\nfunction findList(docs, arr) {\n    for (var i = 0; i < docs.length; i++) {\n        var bin = false\n        for (var j = 0; j < arr.length; j++) {\n            var str = arr[j]\n            if (docs[i].words.indexOf(str) == -1) {\n                bin = true\n            }\n        }\n        if(!bin) {\n            console.log(docs[i].id)\n        }\n    }\n}\n```\n\n##### 4，移动端如何适配不同手机屏幕，有什么解决方案\n- 目前知道的有百分比，rem，vh，flexible。。。\n\n##### 5，编写javascript深度克隆deepClone\n```bash\n//浅拷贝\nvar json1 = {\n    name: 'a',\n    age:12,\n    data:{\n        a:1,\n        b:2\n    }\n}\nfunction copy(parent,child) {\n    var child = child || {}\n    for(var i in parent) {\n        child[i] = parent[i]\n    }\n    return child\n}\nvar json2 = copy(json1)\njson2.data.a = 3\nconsole.log(json1.data.a)//3\nconsole.log(json2.data.a)//3\n\n//深拷贝\nvar json1 = {\n    name:'aa',\n    age:12,\n    data:{\n        a:1,\n        b:2\n    }\n}\n\nfunction deepCopy(parent,child) {\n    var child = child || {}\n    for(var i in parent) {\n        if(typeof parent[i] == 'object') {\n            child[i] = (parent[i].constructor === Array) ? [] : {}  //child.data = {}\n            deepCopy(parent[i],child[i]);//{a:1,b:2} 传过去的是child.data的空json\n        }else{\n            child[i] = parent[i]; //child.data.a ..\n        }\n    }\n    return child\n}\n\nvar json2 = deepCopy(json1)\njson2.data.a = 3;\nconsole.log(json1.data.a) //1\nconsole.log(json2.data.a) //3\n```\n\n##### 6，有一个数组a = [8, 10, 30, 55, 78, 90, 1]，新建一个数组b，b从a中一次随机选取一个元素，取完为止。\n```bash\nvar a = [8,10,30,55,78,90,1]\nvar b = []\nfor(var i = 0; i<a.length;i++) {\n    var randomNum = Math.floor(Math.random() * a.length) //7个随机数\n    var newStr = a.splice(randomNum,1).toString() //随机删除一个，并且把它转换为字符串\n    console.log(newStr)\n    i--;\n    b.push(newStr)\n}\nconsole.log(b)\n```\n##### 7,假设发现有一篇文章，var content = \"大量文字...\"，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色.\n```bash \n//正则\nfunction filter(content) {\n    var result = ''\n    var errWorld = ['坏','蠢']\n    for( var i  = 0; i<content.length;i++) {\n        var reg = new RegExp(errWorld[i],'ig')\n        result = content.replace(reg,'')\n    }\n    return result\n}\n```\n##### 8，编写sum()函数求和，非number类型参数需要进行过滤\n```bash\nfunction sum() {\n    var result = 0;\n    for(var i = 0; i<arguments.length;i++) {\n        if(isNaN(arguments[i])) {\n            continue\n        }else if(typeof arguments[i] === 'number'){\nresult +=arguments[i]\n        }\n    }\n    return result\n}\nsum(1,'aaaa',2,'ccc','2','33333',3)\n```\n\n","slug":"js八道题","published":1,"updated":"2021-07-01T07:30:54.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wue90014zgsy4hi18e15","content":"<h5 id=\"1，写出判断一个变量变量名为arr是数组的方法。\"><a href=\"#1，写出判断一个变量变量名为arr是数组的方法。\" class=\"headerlink\" title=\"1，写出判断一个变量变量名为arr是数组的方法。\"></a>1，写出判断一个变量变量名为arr是数组的方法。</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr instanceof Array</span><br><span class=\"line\"><span class=\"keyword\">if</span>(typeof arr.isArray == undefined) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> Array.prototype.toString.call = [<span class=\"string\">'object Array'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//用一些数组方法去检测，比如slice()</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-一下代码输入的结果是？\"><a href=\"#2-一下代码输入的结果是？\" class=\"headerlink\" title=\"2,一下代码输入的结果是？\"></a>2,一下代码输入的结果是？</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var object = &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">    func:<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        var self = this;</span><br><span class=\"line\">        console.log(this.foo);  //bar</span><br><span class=\"line\">        console.log(self.foo);  //bar</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            console.log(this.foo) //undefined</span><br><span class=\"line\">            console.log(self.foo) //bar</span><br><span class=\"line\">        &#125;)()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">object.func()</span><br><span class=\"line\"></span><br><span class=\"line\">//前两个的输出是因为在同一个作用域，this指向当前函数对象，第二次输出，因为是立即执行函数，所以this指向全局window，但是self指向的是当前作用域中的this</span><br><span class=\"line\">//self这个变量会在整个func作用域中生效，同样，立即执行函数IIFE也在func作用域中，因此可以访问self，但IIFE由于缺乏对象this指向了window，但self提前保留了func的作用域this</span><br></pre></td></tr></table></figure>\n<h5 id=\"3，请实现以下findList方法\"><a href=\"#3，请实现以下findList方法\" class=\"headerlink\" title=\"3，请实现以下findList方法\"></a>3，请实现以下findList方法</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var docs = [</span><br><span class=\"line\">    &#123; id: 1, words: [<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>] &#125;,</span><br><span class=\"line\">    &#123; id: 2, words: [<span class=\"string\">'hello'</span>, <span class=\"string\">'China'</span>] &#125;,</span><br><span class=\"line\">    &#123; id: 3, words: [<span class=\"string\">'zzz'</span>, <span class=\"string\">'hello'</span>] &#125;,</span><br><span class=\"line\">    &#123; id: 4, words: [<span class=\"string\">'world'</span>, <span class=\"string\">'China'</span>] &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">findList(docs, [<span class=\"string\">'hello'</span>]) //1,2,3</span><br><span class=\"line\">findList(docs, [<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>]) //1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> findList(docs, arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (var i = 0; i &lt; docs.length; i++) &#123;</span><br><span class=\"line\">        var bin = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (var j = 0; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            var str = arr[j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (docs[i].words.indexOf(str) == -1) &#123;</span><br><span class=\"line\">                bin = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!bin) &#123;</span><br><span class=\"line\">            console.log(docs[i].id)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4，移动端如何适配不同手机屏幕，有什么解决方案\"><a href=\"#4，移动端如何适配不同手机屏幕，有什么解决方案\" class=\"headerlink\" title=\"4，移动端如何适配不同手机屏幕，有什么解决方案\"></a>4，移动端如何适配不同手机屏幕，有什么解决方案</h5><ul>\n<li>目前知道的有百分比，rem，vh，flexible。。。</li>\n</ul>\n<h5 id=\"5，编写javascript深度克隆deepClone\"><a href=\"#5，编写javascript深度克隆deepClone\" class=\"headerlink\" title=\"5，编写javascript深度克隆deepClone\"></a>5，编写javascript深度克隆deepClone</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//浅拷贝</span><br><span class=\"line\">var json1 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">    age:12,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        a:1,</span><br><span class=\"line\">        b:2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> copy(parent,child) &#123;</span><br><span class=\"line\">    var child = child || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">        child[i] = parent[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> child</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var json2 = copy(json1)</span><br><span class=\"line\">json2.data.a = 3</span><br><span class=\"line\">console.log(json1.data.a)//3</span><br><span class=\"line\">console.log(json2.data.a)//3</span><br><span class=\"line\"></span><br><span class=\"line\">//深拷贝</span><br><span class=\"line\">var json1 = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">'aa'</span>,</span><br><span class=\"line\">    age:12,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        a:1,</span><br><span class=\"line\">        b:2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> deepCopy(parent,child) &#123;</span><br><span class=\"line\">    var child = child || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(typeof parent[i] == <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">            child[i] = (parent[i].constructor === Array) ? [] : &#123;&#125;  //child.data = &#123;&#125;</span><br><span class=\"line\">            deepCopy(parent[i],child[i]);//&#123;a:1,b:2&#125; 传过去的是child.data的空json</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            child[i] = parent[i]; //child.data.a ..</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> child</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var json2 = deepCopy(json1)</span><br><span class=\"line\">json2.data.a = 3;</span><br><span class=\"line\">console.log(json1.data.a) //1</span><br><span class=\"line\">console.log(json2.data.a) //3</span><br></pre></td></tr></table></figure>\n<h5 id=\"6，有一个数组a-8-10-30-55-78-90-1-，新建一个数组b，b从a中一次随机选取一个元素，取完为止。\"><a href=\"#6，有一个数组a-8-10-30-55-78-90-1-，新建一个数组b，b从a中一次随机选取一个元素，取完为止。\" class=\"headerlink\" title=\"6，有一个数组a = [8, 10, 30, 55, 78, 90, 1]，新建一个数组b，b从a中一次随机选取一个元素，取完为止。\"></a>6，有一个数组a = [8, 10, 30, 55, 78, 90, 1]，新建一个数组b，b从a中一次随机选取一个元素，取完为止。</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [8,10,30,55,78,90,1]</span><br><span class=\"line\">var b = []</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i = 0; i&lt;a.length;i++) &#123;</span><br><span class=\"line\">    var randomNum = Math.floor(Math.random() * a.length) //7个随机数</span><br><span class=\"line\">    var newStr = a.splice(randomNum,1).toString() //随机删除一个，并且把它转换为字符串</span><br><span class=\"line\">    console.log(newStr)</span><br><span class=\"line\">    i--;</span><br><span class=\"line\">    b.push(newStr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(b)</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-假设发现有一篇文章，var-content-“大量文字…”，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色\"><a href=\"#7-假设发现有一篇文章，var-content-“大量文字…”，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色\" class=\"headerlink\" title=\"7,假设发现有一篇文章，var content = “大量文字…”，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色.\"></a>7,假设发现有一篇文章，var content = “大量文字…”，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色.</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//正则</span><br><span class=\"line\"><span class=\"keyword\">function</span> filter(content) &#123;</span><br><span class=\"line\">    var result = <span class=\"string\">''</span></span><br><span class=\"line\">    var errWorld = [<span class=\"string\">'坏'</span>,<span class=\"string\">'蠢'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( var i  = 0; i&lt;content.length;i++) &#123;</span><br><span class=\"line\">        var reg = new RegExp(errWorld[i],<span class=\"string\">'ig'</span>)</span><br><span class=\"line\">        result = content.replace(reg,<span class=\"string\">''</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"8，编写sum-函数求和，非number类型参数需要进行过滤\"><a href=\"#8，编写sum-函数求和，非number类型参数需要进行过滤\" class=\"headerlink\" title=\"8，编写sum()函数求和，非number类型参数需要进行过滤\"></a>8，编写sum()函数求和，非number类型参数需要进行过滤</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">sum</span></span>() &#123;</span><br><span class=\"line\">    var result = 0;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i = 0; i&lt;arguments.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isNaN(arguments[i])) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">continue</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(typeof arguments[i] === <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">result +=arguments[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(1,<span class=\"string\">'aaaa'</span>,2,<span class=\"string\">'ccc'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'33333'</span>,3)</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<h5 id=\"1，写出判断一个变量变量名为arr是数组的方法。\"><a href=\"#1，写出判断一个变量变量名为arr是数组的方法。\" class=\"headerlink\" title=\"1，写出判断一个变量变量名为arr是数组的方法。\"></a>1，写出判断一个变量变量名为arr是数组的方法。</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr instanceof Array</span><br><span class=\"line\"><span class=\"keyword\">if</span>(typeof arr.isArray == undefined) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> Array.prototype.toString.call = [<span class=\"string\">'object Array'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//用一些数组方法去检测，比如slice()</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-一下代码输入的结果是？\"><a href=\"#2-一下代码输入的结果是？\" class=\"headerlink\" title=\"2,一下代码输入的结果是？\"></a>2,一下代码输入的结果是？</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var object = &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">    func:<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">        var self = this;</span><br><span class=\"line\">        console.log(this.foo);  //bar</span><br><span class=\"line\">        console.log(self.foo);  //bar</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">            console.log(this.foo) //undefined</span><br><span class=\"line\">            console.log(self.foo) //bar</span><br><span class=\"line\">        &#125;)()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">object.func()</span><br><span class=\"line\"></span><br><span class=\"line\">//前两个的输出是因为在同一个作用域，this指向当前函数对象，第二次输出，因为是立即执行函数，所以this指向全局window，但是self指向的是当前作用域中的this</span><br><span class=\"line\">//self这个变量会在整个func作用域中生效，同样，立即执行函数IIFE也在func作用域中，因此可以访问self，但IIFE由于缺乏对象this指向了window，但self提前保留了func的作用域this</span><br></pre></td></tr></table></figure>\n<h5 id=\"3，请实现以下findList方法\"><a href=\"#3，请实现以下findList方法\" class=\"headerlink\" title=\"3，请实现以下findList方法\"></a>3，请实现以下findList方法</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var docs = [</span><br><span class=\"line\">    &#123; id: 1, words: [<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>] &#125;,</span><br><span class=\"line\">    &#123; id: 2, words: [<span class=\"string\">'hello'</span>, <span class=\"string\">'China'</span>] &#125;,</span><br><span class=\"line\">    &#123; id: 3, words: [<span class=\"string\">'zzz'</span>, <span class=\"string\">'hello'</span>] &#125;,</span><br><span class=\"line\">    &#123; id: 4, words: [<span class=\"string\">'world'</span>, <span class=\"string\">'China'</span>] &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">findList(docs, [<span class=\"string\">'hello'</span>]) //1,2,3</span><br><span class=\"line\">findList(docs, [<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>]) //1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> findList(docs, arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (var i = 0; i &lt; docs.length; i++) &#123;</span><br><span class=\"line\">        var bin = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (var j = 0; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            var str = arr[j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (docs[i].words.indexOf(str) == -1) &#123;</span><br><span class=\"line\">                bin = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!bin) &#123;</span><br><span class=\"line\">            console.log(docs[i].id)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4，移动端如何适配不同手机屏幕，有什么解决方案\"><a href=\"#4，移动端如何适配不同手机屏幕，有什么解决方案\" class=\"headerlink\" title=\"4，移动端如何适配不同手机屏幕，有什么解决方案\"></a>4，移动端如何适配不同手机屏幕，有什么解决方案</h5><ul>\n<li>目前知道的有百分比，rem，vh，flexible。。。</li>\n</ul>\n<h5 id=\"5，编写javascript深度克隆deepClone\"><a href=\"#5，编写javascript深度克隆deepClone\" class=\"headerlink\" title=\"5，编写javascript深度克隆deepClone\"></a>5，编写javascript深度克隆deepClone</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//浅拷贝</span><br><span class=\"line\">var json1 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">    age:12,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        a:1,</span><br><span class=\"line\">        b:2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> copy(parent,child) &#123;</span><br><span class=\"line\">    var child = child || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">        child[i] = parent[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> child</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var json2 = copy(json1)</span><br><span class=\"line\">json2.data.a = 3</span><br><span class=\"line\">console.log(json1.data.a)//3</span><br><span class=\"line\">console.log(json2.data.a)//3</span><br><span class=\"line\"></span><br><span class=\"line\">//深拷贝</span><br><span class=\"line\">var json1 = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">'aa'</span>,</span><br><span class=\"line\">    age:12,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        a:1,</span><br><span class=\"line\">        b:2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> deepCopy(parent,child) &#123;</span><br><span class=\"line\">    var child = child || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(typeof parent[i] == <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">            child[i] = (parent[i].constructor === Array) ? [] : &#123;&#125;  //child.data = &#123;&#125;</span><br><span class=\"line\">            deepCopy(parent[i],child[i]);//&#123;a:1,b:2&#125; 传过去的是child.data的空json</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            child[i] = parent[i]; //child.data.a ..</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> child</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var json2 = deepCopy(json1)</span><br><span class=\"line\">json2.data.a = 3;</span><br><span class=\"line\">console.log(json1.data.a) //1</span><br><span class=\"line\">console.log(json2.data.a) //3</span><br></pre></td></tr></table></figure>\n<h5 id=\"6，有一个数组a-8-10-30-55-78-90-1-，新建一个数组b，b从a中一次随机选取一个元素，取完为止。\"><a href=\"#6，有一个数组a-8-10-30-55-78-90-1-，新建一个数组b，b从a中一次随机选取一个元素，取完为止。\" class=\"headerlink\" title=\"6，有一个数组a = [8, 10, 30, 55, 78, 90, 1]，新建一个数组b，b从a中一次随机选取一个元素，取完为止。\"></a>6，有一个数组a = [8, 10, 30, 55, 78, 90, 1]，新建一个数组b，b从a中一次随机选取一个元素，取完为止。</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [8,10,30,55,78,90,1]</span><br><span class=\"line\">var b = []</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i = 0; i&lt;a.length;i++) &#123;</span><br><span class=\"line\">    var randomNum = Math.floor(Math.random() * a.length) //7个随机数</span><br><span class=\"line\">    var newStr = a.splice(randomNum,1).toString() //随机删除一个，并且把它转换为字符串</span><br><span class=\"line\">    console.log(newStr)</span><br><span class=\"line\">    i--;</span><br><span class=\"line\">    b.push(newStr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(b)</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-假设发现有一篇文章，var-content-“大量文字…”，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色\"><a href=\"#7-假设发现有一篇文章，var-content-“大量文字…”，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色\" class=\"headerlink\" title=\"7,假设发现有一篇文章，var content = “大量文字…”，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色.\"></a>7,假设发现有一篇文章，var content = “大量文字…”，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色.</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//正则</span><br><span class=\"line\"><span class=\"keyword\">function</span> filter(content) &#123;</span><br><span class=\"line\">    var result = <span class=\"string\">''</span></span><br><span class=\"line\">    var errWorld = [<span class=\"string\">'坏'</span>,<span class=\"string\">'蠢'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( var i  = 0; i&lt;content.length;i++) &#123;</span><br><span class=\"line\">        var reg = new RegExp(errWorld[i],<span class=\"string\">'ig'</span>)</span><br><span class=\"line\">        result = content.replace(reg,<span class=\"string\">''</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"8，编写sum-函数求和，非number类型参数需要进行过滤\"><a href=\"#8，编写sum-函数求和，非number类型参数需要进行过滤\" class=\"headerlink\" title=\"8，编写sum()函数求和，非number类型参数需要进行过滤\"></a>8，编写sum()函数求和，非number类型参数需要进行过滤</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">sum</span></span>() &#123;</span><br><span class=\"line\">    var result = 0;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(var i = 0; i&lt;arguments.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isNaN(arguments[i])) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">continue</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(typeof arguments[i] === <span class=\"string\">'number'</span>)&#123;</span><br><span class=\"line\">result +=arguments[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(1,<span class=\"string\">'aaaa'</span>,2,<span class=\"string\">'ccc'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'33333'</span>,3)</span><br></pre></td></tr></table></figure>\n"},{"title":"js日常使用","_content":"```javascript\nvar text = 'purple haze'\ntext['length']\ntext.length\n\n\n//对象所扮演的主要角色实际上是一个属性的集合\n\nvar cat = {\n    color:'gray',\n    name:'spot',\n    size:46\n}\ncat.size; //46\ndelete cat.size;\ncat.size;//undefind\n\nvar empty = {}\nempty.notReally = 1000\nempty;//{notReally: 1000}\n\nvar thing = {\n    'gabba':'hey',\n    5:10\n}\nthing['5'] //10\nthing[2+3] //10\n\n//中括号会将表达式转化为字符串来判断是否有该属性的名称。\n//也可以把变量当成属性名称\nvar propertyName = 'length'\nvar text = 'coco'\ntext[propertyName] //4\n\n//操作符in可以用来判断一个对象是否有某个属性，产生的是布尔值\nvar chineseBox = {}\nchineseBox.content = chineseBox;\n'content' in chineseBox //true\ndebugger\n'content' in chineseBox.content//true\n\n//对象即集合\nvar set = {'spot':true}\nset['white'] =true;\n\ndelete set['spot']\n'aa' in set;//false\n\n//相同对象的两个引用和包含相同属性的两个不同对象是有区别的。\nvar object1 = {value:10}\nvar object2 = object1\nvar object3 = {value:10}\ndebugger;\nobject1 == object2 //true\nobject1 == object3 //false\n\n/* \nobject1和object2是两个变量，抓取的是相同的值，这里只有一个实际对象，\n因此修改了object1的值，同时也改变了object2的值，\nobject3指向的是另外一个对象，默认和object1有相同的属性，但各自单独运行\n\n比较对象时，js中的==操作符只有在赋予的两个值都完全相同时才能返回true，\n比较两个内容相同的不同对象将返回false\n*/\n\n\n//对象即集合\n\nvar arr = ['lele','tom','jack','shuan']\nfor(var i of arr) {\n    console.log(`name:${i}`)\n}\n\nfunction range(item) {\n    var arr = []\n    for(var i = 0; i<=item; i++) {\n        arr.push(i)\n    }\n    return arr\n}\nrange(4) //01234\n\n// split()将一个字符串分解成一个数组\n\nvar words = 'this is word'\nwords.split(' ') //空格！！！\n\n\n\n//  如何测试一个段落是否以某个特定单词开头\n// charAt()--->用于从某个字符串中获取指定的字符\nvar cat = 'born 15-11-2003'\ncat.charAt(0) =='b' && cat.charAt(1) == 'o' && cat.charAt(2) =='r' && cat.charAt(3) == 'n'//true\n\n\ncat.slice(0,4) =='born'//true\n\nfunction startsWidth(str,comp) {\n    return str.slice(0,comp.length) == comp\n}\n\n//如果指定的位置没有字符，charAt将返回空字符，而slice则只是将不存在的内容忽略掉。\n\n\n//indexOf可以找出字符串第一次出现的位置或者截取字符串中的子串\n//如果slice只是一个参数，他将返回从指定位置一直到字符串结束位置之间的字符串\n\n\nfunction catName(paragraph) {\n    var colon = paragraph.indexOf(\":\");\n    return paragraph.slice(colon+2).split(\", \")\n}\n```\n\n\n\n","source":"_posts/js日常.md","raw":"---\ntitle: js日常使用\ncategories: js\ntags: [编程,学习]\n---\n```javascript\nvar text = 'purple haze'\ntext['length']\ntext.length\n\n\n//对象所扮演的主要角色实际上是一个属性的集合\n\nvar cat = {\n    color:'gray',\n    name:'spot',\n    size:46\n}\ncat.size; //46\ndelete cat.size;\ncat.size;//undefind\n\nvar empty = {}\nempty.notReally = 1000\nempty;//{notReally: 1000}\n\nvar thing = {\n    'gabba':'hey',\n    5:10\n}\nthing['5'] //10\nthing[2+3] //10\n\n//中括号会将表达式转化为字符串来判断是否有该属性的名称。\n//也可以把变量当成属性名称\nvar propertyName = 'length'\nvar text = 'coco'\ntext[propertyName] //4\n\n//操作符in可以用来判断一个对象是否有某个属性，产生的是布尔值\nvar chineseBox = {}\nchineseBox.content = chineseBox;\n'content' in chineseBox //true\ndebugger\n'content' in chineseBox.content//true\n\n//对象即集合\nvar set = {'spot':true}\nset['white'] =true;\n\ndelete set['spot']\n'aa' in set;//false\n\n//相同对象的两个引用和包含相同属性的两个不同对象是有区别的。\nvar object1 = {value:10}\nvar object2 = object1\nvar object3 = {value:10}\ndebugger;\nobject1 == object2 //true\nobject1 == object3 //false\n\n/* \nobject1和object2是两个变量，抓取的是相同的值，这里只有一个实际对象，\n因此修改了object1的值，同时也改变了object2的值，\nobject3指向的是另外一个对象，默认和object1有相同的属性，但各自单独运行\n\n比较对象时，js中的==操作符只有在赋予的两个值都完全相同时才能返回true，\n比较两个内容相同的不同对象将返回false\n*/\n\n\n//对象即集合\n\nvar arr = ['lele','tom','jack','shuan']\nfor(var i of arr) {\n    console.log(`name:${i}`)\n}\n\nfunction range(item) {\n    var arr = []\n    for(var i = 0; i<=item; i++) {\n        arr.push(i)\n    }\n    return arr\n}\nrange(4) //01234\n\n// split()将一个字符串分解成一个数组\n\nvar words = 'this is word'\nwords.split(' ') //空格！！！\n\n\n\n//  如何测试一个段落是否以某个特定单词开头\n// charAt()--->用于从某个字符串中获取指定的字符\nvar cat = 'born 15-11-2003'\ncat.charAt(0) =='b' && cat.charAt(1) == 'o' && cat.charAt(2) =='r' && cat.charAt(3) == 'n'//true\n\n\ncat.slice(0,4) =='born'//true\n\nfunction startsWidth(str,comp) {\n    return str.slice(0,comp.length) == comp\n}\n\n//如果指定的位置没有字符，charAt将返回空字符，而slice则只是将不存在的内容忽略掉。\n\n\n//indexOf可以找出字符串第一次出现的位置或者截取字符串中的子串\n//如果slice只是一个参数，他将返回从指定位置一直到字符串结束位置之间的字符串\n\n\nfunction catName(paragraph) {\n    var colon = paragraph.indexOf(\":\");\n    return paragraph.slice(colon+2).split(\", \")\n}\n```\n\n\n\n","slug":"js日常","published":1,"date":"2021-07-01T07:30:54.548Z","updated":"2021-07-01T07:30:54.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wueb0018zgsyc8u9fauj","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'purple haze'</span></span><br><span class=\"line\">text[<span class=\"string\">'length'</span>]</span><br><span class=\"line\">text.length</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象所扮演的主要角色实际上是一个属性的集合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = &#123;</span><br><span class=\"line\">    color:<span class=\"string\">'gray'</span>,</span><br><span class=\"line\">    name:<span class=\"string\">'spot'</span>,</span><br><span class=\"line\">    size:<span class=\"number\">46</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cat.size; <span class=\"comment\">//46</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> cat.size;</span><br><span class=\"line\">cat.size;<span class=\"comment\">//undefind</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> empty = &#123;&#125;</span><br><span class=\"line\">empty.notReally = <span class=\"number\">1000</span></span><br><span class=\"line\">empty;<span class=\"comment\">//&#123;notReally: 1000&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> thing = &#123;</span><br><span class=\"line\">    <span class=\"string\">'gabba'</span>:<span class=\"string\">'hey'</span>,</span><br><span class=\"line\">    <span class=\"number\">5</span>:<span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">thing[<span class=\"string\">'5'</span>] <span class=\"comment\">//10</span></span><br><span class=\"line\">thing[<span class=\"number\">2</span>+<span class=\"number\">3</span>] <span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//中括号会将表达式转化为字符串来判断是否有该属性的名称。</span></span><br><span class=\"line\"><span class=\"comment\">//也可以把变量当成属性名称</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> propertyName = <span class=\"string\">'length'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'coco'</span></span><br><span class=\"line\">text[propertyName] <span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//操作符in可以用来判断一个对象是否有某个属性，产生的是布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> chineseBox = &#123;&#125;</span><br><span class=\"line\">chineseBox.content = chineseBox;</span><br><span class=\"line\"><span class=\"string\">'content'</span> <span class=\"keyword\">in</span> chineseBox <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">debugger</span></span><br><span class=\"line\"><span class=\"string\">'content'</span> <span class=\"keyword\">in</span> chineseBox.content<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象即集合</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> set = &#123;<span class=\"string\">'spot'</span>:<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">set[<span class=\"string\">'white'</span>] =<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> set[<span class=\"string\">'spot'</span>]</span><br><span class=\"line\"><span class=\"string\">'aa'</span> <span class=\"keyword\">in</span> set;<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相同对象的两个引用和包含相同属性的两个不同对象是有区别的。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> object1 = &#123;<span class=\"attr\">value</span>:<span class=\"number\">10</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object2 = object1</span><br><span class=\"line\"><span class=\"keyword\">var</span> object3 = &#123;<span class=\"attr\">value</span>:<span class=\"number\">10</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">object1 == object2 <span class=\"comment\">//true</span></span><br><span class=\"line\">object1 == object3 <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">object1和object2是两个变量，抓取的是相同的值，这里只有一个实际对象，</span></span><br><span class=\"line\"><span class=\"comment\">因此修改了object1的值，同时也改变了object2的值，</span></span><br><span class=\"line\"><span class=\"comment\">object3指向的是另外一个对象，默认和object1有相同的属性，但各自单独运行</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">比较对象时，js中的==操作符只有在赋予的两个值都完全相同时才能返回true，</span></span><br><span class=\"line\"><span class=\"comment\">比较两个内容相同的不同对象将返回false</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象即集合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'lele'</span>,<span class=\"string\">'tom'</span>,<span class=\"string\">'jack'</span>,<span class=\"string\">'shuan'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`name:<span class=\"subst\">$&#123;i&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">range</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt;=item; i++) &#123;</span><br><span class=\"line\">        arr.push(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">range(<span class=\"number\">4</span>) <span class=\"comment\">//01234</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// split()将一个字符串分解成一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> words = <span class=\"string\">'this is word'</span></span><br><span class=\"line\">words.split(<span class=\"string\">' '</span>) <span class=\"comment\">//空格！！！</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  如何测试一个段落是否以某个特定单词开头</span></span><br><span class=\"line\"><span class=\"comment\">// charAt()---&gt;用于从某个字符串中获取指定的字符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"string\">'born 15-11-2003'</span></span><br><span class=\"line\">cat.charAt(<span class=\"number\">0</span>) ==<span class=\"string\">'b'</span> &amp;&amp; cat.charAt(<span class=\"number\">1</span>) == <span class=\"string\">'o'</span> &amp;&amp; cat.charAt(<span class=\"number\">2</span>) ==<span class=\"string\">'r'</span> &amp;&amp; cat.charAt(<span class=\"number\">3</span>) == <span class=\"string\">'n'</span><span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat.slice(<span class=\"number\">0</span>,<span class=\"number\">4</span>) ==<span class=\"string\">'born'</span><span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startsWidth</span>(<span class=\"params\">str,comp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.slice(<span class=\"number\">0</span>,comp.length) == comp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果指定的位置没有字符，charAt将返回空字符，而slice则只是将不存在的内容忽略掉。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//indexOf可以找出字符串第一次出现的位置或者截取字符串中的子串</span></span><br><span class=\"line\"><span class=\"comment\">//如果slice只是一个参数，他将返回从指定位置一直到字符串结束位置之间的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">catName</span>(<span class=\"params\">paragraph</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> colon = paragraph.indexOf(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> paragraph.slice(colon+<span class=\"number\">2</span>).split(<span class=\"string\">\", \"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'purple haze'</span></span><br><span class=\"line\">text[<span class=\"string\">'length'</span>]</span><br><span class=\"line\">text.length</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象所扮演的主要角色实际上是一个属性的集合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = &#123;</span><br><span class=\"line\">    color:<span class=\"string\">'gray'</span>,</span><br><span class=\"line\">    name:<span class=\"string\">'spot'</span>,</span><br><span class=\"line\">    size:<span class=\"number\">46</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cat.size; <span class=\"comment\">//46</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> cat.size;</span><br><span class=\"line\">cat.size;<span class=\"comment\">//undefind</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> empty = &#123;&#125;</span><br><span class=\"line\">empty.notReally = <span class=\"number\">1000</span></span><br><span class=\"line\">empty;<span class=\"comment\">//&#123;notReally: 1000&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> thing = &#123;</span><br><span class=\"line\">    <span class=\"string\">'gabba'</span>:<span class=\"string\">'hey'</span>,</span><br><span class=\"line\">    <span class=\"number\">5</span>:<span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">thing[<span class=\"string\">'5'</span>] <span class=\"comment\">//10</span></span><br><span class=\"line\">thing[<span class=\"number\">2</span>+<span class=\"number\">3</span>] <span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//中括号会将表达式转化为字符串来判断是否有该属性的名称。</span></span><br><span class=\"line\"><span class=\"comment\">//也可以把变量当成属性名称</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> propertyName = <span class=\"string\">'length'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'coco'</span></span><br><span class=\"line\">text[propertyName] <span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//操作符in可以用来判断一个对象是否有某个属性，产生的是布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> chineseBox = &#123;&#125;</span><br><span class=\"line\">chineseBox.content = chineseBox;</span><br><span class=\"line\"><span class=\"string\">'content'</span> <span class=\"keyword\">in</span> chineseBox <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">debugger</span></span><br><span class=\"line\"><span class=\"string\">'content'</span> <span class=\"keyword\">in</span> chineseBox.content<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象即集合</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> set = &#123;<span class=\"string\">'spot'</span>:<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">set[<span class=\"string\">'white'</span>] =<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> set[<span class=\"string\">'spot'</span>]</span><br><span class=\"line\"><span class=\"string\">'aa'</span> <span class=\"keyword\">in</span> set;<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相同对象的两个引用和包含相同属性的两个不同对象是有区别的。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> object1 = &#123;<span class=\"attr\">value</span>:<span class=\"number\">10</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> object2 = object1</span><br><span class=\"line\"><span class=\"keyword\">var</span> object3 = &#123;<span class=\"attr\">value</span>:<span class=\"number\">10</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">object1 == object2 <span class=\"comment\">//true</span></span><br><span class=\"line\">object1 == object3 <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">object1和object2是两个变量，抓取的是相同的值，这里只有一个实际对象，</span></span><br><span class=\"line\"><span class=\"comment\">因此修改了object1的值，同时也改变了object2的值，</span></span><br><span class=\"line\"><span class=\"comment\">object3指向的是另外一个对象，默认和object1有相同的属性，但各自单独运行</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">比较对象时，js中的==操作符只有在赋予的两个值都完全相同时才能返回true，</span></span><br><span class=\"line\"><span class=\"comment\">比较两个内容相同的不同对象将返回false</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象即集合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'lele'</span>,<span class=\"string\">'tom'</span>,<span class=\"string\">'jack'</span>,<span class=\"string\">'shuan'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`name:<span class=\"subst\">$&#123;i&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">range</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt;=item; i++) &#123;</span><br><span class=\"line\">        arr.push(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">range(<span class=\"number\">4</span>) <span class=\"comment\">//01234</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// split()将一个字符串分解成一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> words = <span class=\"string\">'this is word'</span></span><br><span class=\"line\">words.split(<span class=\"string\">' '</span>) <span class=\"comment\">//空格！！！</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  如何测试一个段落是否以某个特定单词开头</span></span><br><span class=\"line\"><span class=\"comment\">// charAt()---&gt;用于从某个字符串中获取指定的字符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"string\">'born 15-11-2003'</span></span><br><span class=\"line\">cat.charAt(<span class=\"number\">0</span>) ==<span class=\"string\">'b'</span> &amp;&amp; cat.charAt(<span class=\"number\">1</span>) == <span class=\"string\">'o'</span> &amp;&amp; cat.charAt(<span class=\"number\">2</span>) ==<span class=\"string\">'r'</span> &amp;&amp; cat.charAt(<span class=\"number\">3</span>) == <span class=\"string\">'n'</span><span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cat.slice(<span class=\"number\">0</span>,<span class=\"number\">4</span>) ==<span class=\"string\">'born'</span><span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startsWidth</span>(<span class=\"params\">str,comp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.slice(<span class=\"number\">0</span>,comp.length) == comp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果指定的位置没有字符，charAt将返回空字符，而slice则只是将不存在的内容忽略掉。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//indexOf可以找出字符串第一次出现的位置或者截取字符串中的子串</span></span><br><span class=\"line\"><span class=\"comment\">//如果slice只是一个参数，他将返回从指定位置一直到字符串结束位置之间的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">catName</span>(<span class=\"params\">paragraph</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> colon = paragraph.indexOf(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> paragraph.slice(colon+<span class=\"number\">2</span>).split(<span class=\"string\">\", \"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"关于JSON报错","date":"2018-04-30T16:00:00.000Z","_content":"\n在项目代码中运用到了JSON.parse()和JSON.stringify()去转换保存对象\n`this.editingFile = JSON.stringify(lesson)`\n`this.$set(this.lessons, index, JSON.parse(this.editingFile))`\n\n\n每次新建进入页面的时候，都会报错\n`Uncaught SyntaxError: Unexpected token u in JSON at position 0`\n\nDebugger后，发现每次新建的时候JSON.parse()里的参数是undefined\n\n查考得知，当参数为undefined的时候，JSON.parse()会报错的。\n解决办法是做判断。类似于：\n```\n   if (this.editingFile != undefined) {\n          this.$set(this.lessons, index, JSON.parse(this.editingFile))\n        }\n```\n以上是我的解决办法。\n\n","source":"_posts/jsonParse.md","raw":"---\ntitle: 关于JSON报错\ndate: 2018-05-01\ncategories: json\ntags: [编程,学习]\n---\n\n在项目代码中运用到了JSON.parse()和JSON.stringify()去转换保存对象\n`this.editingFile = JSON.stringify(lesson)`\n`this.$set(this.lessons, index, JSON.parse(this.editingFile))`\n\n\n每次新建进入页面的时候，都会报错\n`Uncaught SyntaxError: Unexpected token u in JSON at position 0`\n\nDebugger后，发现每次新建的时候JSON.parse()里的参数是undefined\n\n查考得知，当参数为undefined的时候，JSON.parse()会报错的。\n解决办法是做判断。类似于：\n```\n   if (this.editingFile != undefined) {\n          this.$set(this.lessons, index, JSON.parse(this.editingFile))\n        }\n```\n以上是我的解决办法。\n\n","slug":"jsonParse","published":1,"updated":"2021-07-01T07:30:54.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wued001czgsykltttsu7","content":"<p>在项目代码中运用到了JSON.parse()和JSON.stringify()去转换保存对象<br><code>this.editingFile = JSON.stringify(lesson)</code><br><code>this.$set(this.lessons, index, JSON.parse(this.editingFile))</code></p>\n<p>每次新建进入页面的时候，都会报错<br><code>Uncaught SyntaxError: Unexpected token u in JSON at position 0</code></p>\n<p>Debugger后，发现每次新建的时候JSON.parse()里的参数是undefined</p>\n<p>查考得知，当参数为undefined的时候，JSON.parse()会报错的。<br>解决办法是做判断。类似于：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.editingFile != undefined) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.$<span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>.lessons, index, JSON.parse(<span class=\"keyword\">this</span>.editingFile))</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上是我的解决办法。</p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>在项目代码中运用到了JSON.parse()和JSON.stringify()去转换保存对象<br><code>this.editingFile = JSON.stringify(lesson)</code><br><code>this.$set(this.lessons, index, JSON.parse(this.editingFile))</code></p>\n<p>每次新建进入页面的时候，都会报错<br><code>Uncaught SyntaxError: Unexpected token u in JSON at position 0</code></p>\n<p>Debugger后，发现每次新建的时候JSON.parse()里的参数是undefined</p>\n<p>查考得知，当参数为undefined的时候，JSON.parse()会报错的。<br>解决办法是做判断。类似于：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.editingFile != undefined) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.$<span class=\"keyword\">set</span>(<span class=\"keyword\">this</span>.lessons, index, JSON.parse(<span class=\"keyword\">this</span>.editingFile))</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上是我的解决办法。</p>\n"},{"title":"js五道题","date":"2017-12-31T16:00:00.000Z","_content":"##### 第一题：\n```javascript\nif(!(\"a\" in window)) {\n    var a = 1\n}\nalert(1)\n```\n- 所有的全局变量都是window属性，`var a = 1 == window.a = 1  `\n检测变量是否声明` 变量 in window`\n- 所有的变量声明都在范围作用域的顶部,应该是变量提升吧\n```javascript\n alert('a' in window)\n var a;\n\n//等同于\nvar a;\nalert('a' in window)\n```\n- 当变量声明和赋值在一起用的时候，js引擎会自动将他们分为两部分，声明和赋值，以便于将变量声明提前，不将赋值提前是因为他有可能影响代码执行处不可预期的结果。\n```javascript\n//所以等同于\nvar a;\nif(!('a' in window)) {\n    a = 1\n}\nalert(a)\n```\n\n\n##### 第二题：\n```javascript\nvar a = 1,\n    b = function a(x) {\n        x && a(--x)\n    }\nalert(a)\n```\n\n\n- 变量声明在进入执行上下文就完成了\n- 函数声明也是提前的，所有的函数声明都在执行代码之前都已经完成了声明，和变量声明一样。\n```javascript\n//函数声明\nfunction name(arr1,arr2) {\n    //...\n}\n//函数表达式，相当于变量赋值，不是函数,函数表达式不会提前，等于普通的变量赋值\nvar name = function(arr1,arr2) {\n    //...\n}\n```\n\n- 函数声明会覆盖变量声明，但不会覆盖变量赋值，函数声明的优先级高于变量声明的优先级\n```javascript   \nfunction value() {\n    return 1\n}\nvar value;\nalert(typeof value) //function\n//如果赋值了，变量赋值初始化就覆盖了函数声明\nfunction value() {\n    return 1\n}\nvar value = 2;\nalert(typeof value) //number\n``` \n\n-  这个函数是一个有名函数表达式，函数表达式不像函数声明一样可以覆盖变量声明，变量b是包含了该函数表达式，而这个函数表达式的名字是a，浏览器允许在函数内部调用a(--x),因为这个时候a在函数外面依然是数字，返回undefined。\n\n```javascript\nvar a = 1,\n    b = function(x) {\n        x && b(--x)\n    }\nalert(1) //1\n```\n\n\n##### 第三题：\n```javascript\nfunction a(x) {\n    return x * 2\n}\nvar a;\nalert(a) //undefined  函数声明\n```\n\n\n##### 第四题：\n```javascript\nfunction b(x,y,a) {\n    arguments[2] = 10;\n    alert(a)\n}\nb(1,2,3) //10\n```\n- 活动对象是在进入函数上下文时被创建的，它通过函数的arguments属性初始化，arguments属性的值是arguments对象。\narguments 对象是活动对象的一个属性，包括：\n1. callee指向当前函数的引用\n2. length传递的参数的个数\n3. properties-indexes（字符串类型的整数）属性的值就是函数的参数值，（左->右的顺序）\n4. properties-indexes内部元素的个数等于arguments.length.properties-index的值和实际传递过来的参数之间是共享的。\n这个<strong>共享</strong>不是真正的共享一个内存地址，而是两个不同的内存地址，使用js引擎来保证2个值是随时一样的，这个索引值要小于传入的参数的个数，如果只是传入了两个参数，使用arguments[2]赋值的话就会不一样。\n```javascript\nfunction b(x,y,a) {\n    arguments[2] = 10;\n    alert(a)\n}\nb(1,2) //undefined\n//因为没有传递第三个参数a，所以赋值10以后，alert(a)的结果依然是undefined\n\nfunction b(x,y,a) {\n    arguments[2] = 10;\n    alert(arguments[2])\n}\nb(1,2) //10\n\n//与a没有关系\n```\n\n\n\n\n\n\n##### 第五题：\n```javascript\nfunction a() {\n    alert(this)\n}\na.call(null)\n```\n\n###### this的定义\n```javascript\nvar obj = {\n    method: function() {\n        alert(this === obj)  //true \n    }\n}\n//当一个方法在对象上调用的时候，this就指向到了该对象上\n\nfunction method() {\n    alert(this === window) //true\n}\n//当一个function的定义不是属于一个对象属性的时候（单独定义的函数），函数内部的this等价于window\n\n```\n\n###### call\n1. call方法最为一个function执行，代表该方法可以让另外一个对象作为调用者来调用。\n2. call方法的第一个参数是对象调用者，随后的其他参数是要传递给调用method的参数（声明的话）\n```javascript\nfunction method() {\n    alert(this === window)\n}\nmethod() //true\nmethod.call(document) //false\n```\n###### 如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。\n```javascript\n//理解如下\nfunction a() {\n    alert(this)\n}\na.call(window) //[object Window]\n```","source":"_posts/js五道题.md","raw":"---\ntitle: js五道题\ndate: 2018-01-01\ncategories: js\ntags: [编程,感悟]\n---\n##### 第一题：\n```javascript\nif(!(\"a\" in window)) {\n    var a = 1\n}\nalert(1)\n```\n- 所有的全局变量都是window属性，`var a = 1 == window.a = 1  `\n检测变量是否声明` 变量 in window`\n- 所有的变量声明都在范围作用域的顶部,应该是变量提升吧\n```javascript\n alert('a' in window)\n var a;\n\n//等同于\nvar a;\nalert('a' in window)\n```\n- 当变量声明和赋值在一起用的时候，js引擎会自动将他们分为两部分，声明和赋值，以便于将变量声明提前，不将赋值提前是因为他有可能影响代码执行处不可预期的结果。\n```javascript\n//所以等同于\nvar a;\nif(!('a' in window)) {\n    a = 1\n}\nalert(a)\n```\n\n\n##### 第二题：\n```javascript\nvar a = 1,\n    b = function a(x) {\n        x && a(--x)\n    }\nalert(a)\n```\n\n\n- 变量声明在进入执行上下文就完成了\n- 函数声明也是提前的，所有的函数声明都在执行代码之前都已经完成了声明，和变量声明一样。\n```javascript\n//函数声明\nfunction name(arr1,arr2) {\n    //...\n}\n//函数表达式，相当于变量赋值，不是函数,函数表达式不会提前，等于普通的变量赋值\nvar name = function(arr1,arr2) {\n    //...\n}\n```\n\n- 函数声明会覆盖变量声明，但不会覆盖变量赋值，函数声明的优先级高于变量声明的优先级\n```javascript   \nfunction value() {\n    return 1\n}\nvar value;\nalert(typeof value) //function\n//如果赋值了，变量赋值初始化就覆盖了函数声明\nfunction value() {\n    return 1\n}\nvar value = 2;\nalert(typeof value) //number\n``` \n\n-  这个函数是一个有名函数表达式，函数表达式不像函数声明一样可以覆盖变量声明，变量b是包含了该函数表达式，而这个函数表达式的名字是a，浏览器允许在函数内部调用a(--x),因为这个时候a在函数外面依然是数字，返回undefined。\n\n```javascript\nvar a = 1,\n    b = function(x) {\n        x && b(--x)\n    }\nalert(1) //1\n```\n\n\n##### 第三题：\n```javascript\nfunction a(x) {\n    return x * 2\n}\nvar a;\nalert(a) //undefined  函数声明\n```\n\n\n##### 第四题：\n```javascript\nfunction b(x,y,a) {\n    arguments[2] = 10;\n    alert(a)\n}\nb(1,2,3) //10\n```\n- 活动对象是在进入函数上下文时被创建的，它通过函数的arguments属性初始化，arguments属性的值是arguments对象。\narguments 对象是活动对象的一个属性，包括：\n1. callee指向当前函数的引用\n2. length传递的参数的个数\n3. properties-indexes（字符串类型的整数）属性的值就是函数的参数值，（左->右的顺序）\n4. properties-indexes内部元素的个数等于arguments.length.properties-index的值和实际传递过来的参数之间是共享的。\n这个<strong>共享</strong>不是真正的共享一个内存地址，而是两个不同的内存地址，使用js引擎来保证2个值是随时一样的，这个索引值要小于传入的参数的个数，如果只是传入了两个参数，使用arguments[2]赋值的话就会不一样。\n```javascript\nfunction b(x,y,a) {\n    arguments[2] = 10;\n    alert(a)\n}\nb(1,2) //undefined\n//因为没有传递第三个参数a，所以赋值10以后，alert(a)的结果依然是undefined\n\nfunction b(x,y,a) {\n    arguments[2] = 10;\n    alert(arguments[2])\n}\nb(1,2) //10\n\n//与a没有关系\n```\n\n\n\n\n\n\n##### 第五题：\n```javascript\nfunction a() {\n    alert(this)\n}\na.call(null)\n```\n\n###### this的定义\n```javascript\nvar obj = {\n    method: function() {\n        alert(this === obj)  //true \n    }\n}\n//当一个方法在对象上调用的时候，this就指向到了该对象上\n\nfunction method() {\n    alert(this === window) //true\n}\n//当一个function的定义不是属于一个对象属性的时候（单独定义的函数），函数内部的this等价于window\n\n```\n\n###### call\n1. call方法最为一个function执行，代表该方法可以让另外一个对象作为调用者来调用。\n2. call方法的第一个参数是对象调用者，随后的其他参数是要传递给调用method的参数（声明的话）\n```javascript\nfunction method() {\n    alert(this === window)\n}\nmethod() //true\nmethod.call(document) //false\n```\n###### 如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。\n```javascript\n//理解如下\nfunction a() {\n    alert(this)\n}\na.call(window) //[object Window]\n```","slug":"js五道题","published":1,"updated":"2021-07-01T07:30:54.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuef001gzgsymh52r2os","content":"<h5 id=\"第一题：\"><a href=\"#第一题：\" class=\"headerlink\" title=\"第一题：\"></a>第一题：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!(<span class=\"string\">\"a\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>所有的全局变量都是window属性，<code>var a = 1 == window.a = 1</code><br>检测变量是否声明<code>变量 in window</code></li>\n<li><p>所有的变量声明都在范围作用域的顶部,应该是变量提升吧</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> alert(<span class=\"string\">'a'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)</span><br><span class=\"line\"> <span class=\"keyword\">var</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">alert(<span class=\"string\">'a'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当变量声明和赋值在一起用的时候，js引擎会自动将他们分为两部分，声明和赋值，以便于将变量声明提前，不将赋值提前是因为他有可能影响代码执行处不可预期的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所以等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!(<span class=\"string\">'a'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)) &#123;</span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(a)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"第二题：\"><a href=\"#第二题：\" class=\"headerlink\" title=\"第二题：\"></a>第二题：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</span><br><span class=\"line\">    b = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        x &amp;&amp; a(--x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">alert(a)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>变量声明在进入执行上下文就完成了</li>\n<li><p>函数声明也是提前的，所有的函数声明都在执行代码之前都已经完成了声明，和变量声明一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\">arr1,arr2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//函数表达式，相当于变量赋值，不是函数,函数表达式不会提前，等于普通的变量赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr1,arr2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数声明会覆盖变量声明，但不会覆盖变量赋值，函数声明的优先级高于变量声明的优先级</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">value</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> value;</span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span> value) <span class=\"comment\">//function</span></span><br><span class=\"line\"><span class=\"comment\">//如果赋值了，变量赋值初始化就覆盖了函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">value</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"number\">2</span>;</span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span> value) <span class=\"comment\">//number</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">-  这个函数是一个有名函数表达式，函数表达式不像函数声明一样可以覆盖变量声明，变量b是包含了该函数表达式，而这个函数表达式的名字是a，浏览器允许在函数内部调用a(--x),因为这个时候a在函数外面依然是数字，返回undefined。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</span><br><span class=\"line\">    b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        x &amp;&amp; b(--x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">alert(<span class=\"number\">1</span>) <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"第三题：\"><a href=\"#第三题：\" class=\"headerlink\" title=\"第三题：\"></a>第三题：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">alert(a) <span class=\"comment\">//undefined  函数声明</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"第四题：\"><a href=\"#第四题：\" class=\"headerlink\" title=\"第四题：\"></a>第四题：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x,y,a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>活动对象是在进入函数上下文时被创建的，它通过函数的arguments属性初始化，arguments属性的值是arguments对象。<br>arguments 对象是活动对象的一个属性，包括：</li>\n</ul>\n<ol>\n<li>callee指向当前函数的引用</li>\n<li>length传递的参数的个数</li>\n<li>properties-indexes（字符串类型的整数）属性的值就是函数的参数值，（左-&gt;右的顺序）</li>\n<li>properties-indexes内部元素的个数等于arguments.length.properties-index的值和实际传递过来的参数之间是共享的。<br>这个<strong>共享</strong>不是真正的共享一个内存地址，而是两个不同的内存地址，使用js引擎来保证2个值是随时一样的，这个索引值要小于传入的参数的个数，如果只是传入了两个参数，使用arguments[2]赋值的话就会不一样。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x,y,a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"comment\">//因为没有传递第三个参数a，所以赋值10以后，alert(a)的结果依然是undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x,y,a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(<span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//与a没有关系</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"第五题：\"><a href=\"#第五题：\" class=\"headerlink\" title=\"第五题：\"></a>第五题：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.call(<span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure>\n<h6 id=\"this的定义\"><a href=\"#this的定义\" class=\"headerlink\" title=\"this的定义\"></a>this的定义</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    method: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span> === obj)  <span class=\"comment\">//true </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//当一个方法在对象上调用的时候，this就指向到了该对象上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//当一个function的定义不是属于一个对象属性的时候（单独定义的函数），函数内部的this等价于window</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h6><ol>\n<li>call方法最为一个function执行，代表该方法可以让另外一个对象作为调用者来调用。</li>\n<li>call方法的第一个参数是对象调用者，随后的其他参数是要传递给调用method的参数（声明的话）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">method() <span class=\"comment\">//true</span></span><br><span class=\"line\">method.call(<span class=\"built_in\">document</span>) <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。\"><a href=\"#如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。\" class=\"headerlink\" title=\"如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。\"></a>如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//理解如下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.call(<span class=\"built_in\">window</span>) <span class=\"comment\">//[object Window]</span></span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<h5 id=\"第一题：\"><a href=\"#第一题：\" class=\"headerlink\" title=\"第一题：\"></a>第一题：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!(<span class=\"string\">\"a\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>所有的全局变量都是window属性，<code>var a = 1 == window.a = 1</code><br>检测变量是否声明<code>变量 in window</code></li>\n<li><p>所有的变量声明都在范围作用域的顶部,应该是变量提升吧</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> alert(<span class=\"string\">'a'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)</span><br><span class=\"line\"> <span class=\"keyword\">var</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">alert(<span class=\"string\">'a'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当变量声明和赋值在一起用的时候，js引擎会自动将他们分为两部分，声明和赋值，以便于将变量声明提前，不将赋值提前是因为他有可能影响代码执行处不可预期的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所以等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!(<span class=\"string\">'a'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)) &#123;</span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(a)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"第二题：\"><a href=\"#第二题：\" class=\"headerlink\" title=\"第二题：\"></a>第二题：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</span><br><span class=\"line\">    b = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        x &amp;&amp; a(--x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">alert(a)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>变量声明在进入执行上下文就完成了</li>\n<li><p>函数声明也是提前的，所有的函数声明都在执行代码之前都已经完成了声明，和变量声明一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\">arr1,arr2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//函数表达式，相当于变量赋值，不是函数,函数表达式不会提前，等于普通的变量赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr1,arr2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数声明会覆盖变量声明，但不会覆盖变量赋值，函数声明的优先级高于变量声明的优先级</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">value</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> value;</span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span> value) <span class=\"comment\">//function</span></span><br><span class=\"line\"><span class=\"comment\">//如果赋值了，变量赋值初始化就覆盖了函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">value</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"number\">2</span>;</span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span> value) <span class=\"comment\">//number</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">-  这个函数是一个有名函数表达式，函数表达式不像函数声明一样可以覆盖变量声明，变量b是包含了该函数表达式，而这个函数表达式的名字是a，浏览器允许在函数内部调用a(--x),因为这个时候a在函数外面依然是数字，返回undefined。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</span><br><span class=\"line\">    b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        x &amp;&amp; b(--x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">alert(<span class=\"number\">1</span>) <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"第三题：\"><a href=\"#第三题：\" class=\"headerlink\" title=\"第三题：\"></a>第三题：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">alert(a) <span class=\"comment\">//undefined  函数声明</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"第四题：\"><a href=\"#第四题：\" class=\"headerlink\" title=\"第四题：\"></a>第四题：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x,y,a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>活动对象是在进入函数上下文时被创建的，它通过函数的arguments属性初始化，arguments属性的值是arguments对象。<br>arguments 对象是活动对象的一个属性，包括：</li>\n</ul>\n<ol>\n<li>callee指向当前函数的引用</li>\n<li>length传递的参数的个数</li>\n<li>properties-indexes（字符串类型的整数）属性的值就是函数的参数值，（左-&gt;右的顺序）</li>\n<li>properties-indexes内部元素的个数等于arguments.length.properties-index的值和实际传递过来的参数之间是共享的。<br>这个<strong>共享</strong>不是真正的共享一个内存地址，而是两个不同的内存地址，使用js引擎来保证2个值是随时一样的，这个索引值要小于传入的参数的个数，如果只是传入了两个参数，使用arguments[2]赋值的话就会不一样。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x,y,a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"comment\">//因为没有传递第三个参数a，所以赋值10以后，alert(a)的结果依然是undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x,y,a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(<span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//与a没有关系</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"第五题：\"><a href=\"#第五题：\" class=\"headerlink\" title=\"第五题：\"></a>第五题：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.call(<span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure>\n<h6 id=\"this的定义\"><a href=\"#this的定义\" class=\"headerlink\" title=\"this的定义\"></a>this的定义</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    method: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span> === obj)  <span class=\"comment\">//true </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//当一个方法在对象上调用的时候，this就指向到了该对象上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//当一个function的定义不是属于一个对象属性的时候（单独定义的函数），函数内部的this等价于window</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h6><ol>\n<li>call方法最为一个function执行，代表该方法可以让另外一个对象作为调用者来调用。</li>\n<li>call方法的第一个参数是对象调用者，随后的其他参数是要传递给调用method的参数（声明的话）<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">method() <span class=\"comment\">//true</span></span><br><span class=\"line\">method.call(<span class=\"built_in\">document</span>) <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。\"><a href=\"#如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。\" class=\"headerlink\" title=\"如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。\"></a>如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//理解如下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.call(<span class=\"built_in\">window</span>) <span class=\"comment\">//[object Window]</span></span><br></pre></td></tr></table></figure>"},{"title":"js替换json对象中的键名","date":"2021-03-17T07:33:03.000Z","_content":"使用map()是目前想到的最简单的办法。。\n> Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。\n[Objects 和 maps 的比较](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map#Objects_%E5%92%8C_maps_%E7%9A%84%E6%AF%94%E8%BE%83)\n```javascript   \nvar data = [\n    {count:123,goods:'小米'},\n    {count:456,goods:'华为'},\n    {count:789,goods:'苹果'}\n].map(item=>{\n    return{\n        name:item.count,\n        value:item.goods\n    }\n})\n```","source":"_posts/js替换json对象中的键名.md","raw":"---\ntitle: js替换json对象中的键名\ncategories: js\ndate: 2021-03-17 15:33:03\ntags: [编程,功能]\n---\n使用map()是目前想到的最简单的办法。。\n> Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。\n[Objects 和 maps 的比较](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map#Objects_%E5%92%8C_maps_%E7%9A%84%E6%AF%94%E8%BE%83)\n```javascript   \nvar data = [\n    {count:123,goods:'小米'},\n    {count:456,goods:'华为'},\n    {count:789,goods:'苹果'}\n].map(item=>{\n    return{\n        name:item.count,\n        value:item.goods\n    }\n})\n```","slug":"js替换json对象中的键名","published":1,"updated":"2021-07-02T11:29:29.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wueh001kzgsyir3k5dt1","content":"<p>使用map()是目前想到的最简单的办法。。</p>\n<blockquote>\n<p>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map#Objects_%E5%92%8C_maps_%E7%9A%84%E6%AF%94%E8%BE%83\" target=\"_blank\" rel=\"noopener\">Objects 和 maps 的比较</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">count</span>:<span class=\"number\">123</span>,<span class=\"attr\">goods</span>:<span class=\"string\">'小米'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">count</span>:<span class=\"number\">456</span>,<span class=\"attr\">goods</span>:<span class=\"string\">'华为'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">count</span>:<span class=\"number\">789</span>,<span class=\"attr\">goods</span>:<span class=\"string\">'苹果'</span>&#125;</span><br><span class=\"line\">].map(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        name:item.count,</span><br><span class=\"line\">        value:item.goods</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>使用map()是目前想到的最简单的办法。。</p>\n<blockquote>\n<p>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map#Objects_%E5%92%8C_maps_%E7%9A%84%E6%AF%94%E8%BE%83\" target=\"_blank\" rel=\"noopener\">Objects 和 maps 的比较</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">count</span>:<span class=\"number\">123</span>,<span class=\"attr\">goods</span>:<span class=\"string\">'小米'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">count</span>:<span class=\"number\">456</span>,<span class=\"attr\">goods</span>:<span class=\"string\">'华为'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">count</span>:<span class=\"number\">789</span>,<span class=\"attr\">goods</span>:<span class=\"string\">'苹果'</span>&#125;</span><br><span class=\"line\">].map(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        name:item.count,</span><br><span class=\"line\">        value:item.goods</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"js条件语句","_content":"\n#### 使用Array.includes来处理多重条件\n[Array.includes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)\n\n```javascript\n//bad\nfunction test(fn) {\n    if(fn === 'apply' || fn == 'pear') {\n        console.log('yes')\n    }\n}\n//如果筛选条件多\nfunction test(param) {\n    const fruits = ['apply','pear','banana'] //条件提取到数组\n    if(fruits.includes(param)) {\n        console.log('yes')\n    }\n  }\n```\n* 少写嵌套，尽早返回\n    + 如果没有水果，抛出错误\n    + 如果该水果的数量大于10，将其打印出来\n```javascript\n//bad\nfunction test(param, num) {\n    const fruit = ['apple', 'pear', 'cherry']\n      // 条件 1：fruit 必须有值\n    if (param) {\n            // 条件 2：必须存在\n        if (fruit.includes(param)) {\n            console.log('red')\n        //数量大于 10\n            if (num > 10) {\n                console.log('more')\n            }\n        }\n    } else {\n        throw new Error('no frulte')\n    }\n}\n// 测试结果\ntest(null); // 报错：No fruits\ntest('apple'); //red\ntest('apple', 20) //red\n\n\nfunction test(p,num) {\n    const fruits = ['apply','pear']\n    if(!p) throw new Error('no')\n    if(fruits.includes(p)) {\n        console.log('yes')\n        if(num>10) {\n            console.log('good')\n        }\n    }\n}\n\nfunction test(p,num) {\n    const fruits = ['apply','pear','chreey']\n    if(!p) throw new Error('no')\n    if(!fruits.includes(p)) return  //不是直接返回\n    console.log('red')\n    if(num>10) console.log('good')\n}\n```\n#### 使用函数默认参数和解构\n```javascript \nfunction test(fruit,num) {\n    if(!fruit) return\n    let q = num || 1\n    console.log(`we have ${q} ${fruit}`)\n}\n//测试结果\ntest('banana'); // We have 1 banana!\ntest('apple', 2); // We have 2 apple!\n\nfunction test(fruit,num = 1) { \n    if(!fruit) return\n    console.log(`we have ${fruit} ${num}`)\n }  \n//如果fruit是一个对象\nfunction test(fruit) {\n     if(fruit && fruit.name) {\n         console.log(fruit.name)\n     }else{\n         console.log('unknow')\n     }\n }\n\n//测试结果\ntest(undefined); // unknown\ntest({ }); // unknown\ntest({ name: 'apple', color: 'red' }); // apple\n\n//可以通过默认参数和解构赋值的方法来避免写出 fruit && fruit.name 这种条件。\nfunction test({name} ={}) {\n    console.log(name || 'unknow')\n}\n//解构只适用于对象（Object）\n```\n#### 相较于 switch，Map / Object 也许是更好的选择\n```javascript  \nfunction test(color) {\n    switch(color) {\n        case 'red':\n        return ['apple', 'strawberry'];\n        case 'yellow':\n        return ['banana', 'pineapple'];\n        case 'purple':\n        return ['grape', 'plum'];\n        default:\n        return [];\n    }\n}\n//测试结果\ntest(null); // []\ntest('yellow'); // ['banana', 'pineapple']\n\nconst fruit = {\n    red: ['apple', 'strawberry'],\n    yellow: ['banana', 'pineapple'],\n    purple: ['grape', 'plum']\n}\nfunction test(color) {\n    return fruit[color] || []\n  }\n\n//Map\nconst fruit = new Map()\n.set('red', ['apple', 'strawberry'])\n.set('yellow', ['banana', 'pineapple'])\n.set('purple', ['grape', 'plum']);\n\nfunction test(color) {\n    return fruit[color] || []\n  }\n\n//Array.filter\nconst fruit = [\n    { name: 'apple', color: 'red' }, \n    { name: 'strawberry', color: 'red' }, \n    { name: 'banana', color: 'yellow' }, \n    { name: 'pineapple', color: 'yellow' }, \n    { name: 'grape', color: 'purple' }, \n    { name: 'plum', color: 'purple' }\n]\nfunction test(color) {\n    return fruit.filter(f =>f.color = color)\n  }\n\n\n```\n\n#### 使用 Array.every 和 Array.some 来处理全部/部分满足条件\n```javascript\nconst fruits =[\n    { name: 'apple', color: 'red' },\n    { name: 'banana', color: 'yellow' },\n    { name: 'grape', color: 'purple' }\n  ]\nfunction test() {  \n    let isAll = true\n    //所有水果都必须是红色\n    for(let f of fruits) {\n        if(!isAll) break\n        isAll = (f.color =='red')\n    }\n    console.log(isAll) //false\n}\n\n\n//Array.every\nconst fruits = [\n    { name: 'apple', color: 'red' },\n    { name: 'banana', color: 'yellow' },\n    { name: 'grape', color: 'purple' }\n]\nfunction test() {\n    //所有水果必须都是红色\n    const isAll = fruits.every(f =>f.color =='red')\n    console.log(isAll) //false\n  }\n\n  //Array.some\n  const fruits = [\n    { name: 'apple', color: 'red' },\n    { name: 'banana', color: 'yellow' },\n    { name: 'grape', color: 'purple' }\n]\nfunction test() {\n        //至少一个水果是红色\n    const isAll = fruits.some(f =>f.color=='red')\n    console.log(isAll) //true\n}\n\n```\n\n\n\n\n","source":"_posts/js条件语句.md","raw":"---\ntitle: js条件语句\ncategories: js\ntags: [编程,感悟]\n---\n\n#### 使用Array.includes来处理多重条件\n[Array.includes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)\n\n```javascript\n//bad\nfunction test(fn) {\n    if(fn === 'apply' || fn == 'pear') {\n        console.log('yes')\n    }\n}\n//如果筛选条件多\nfunction test(param) {\n    const fruits = ['apply','pear','banana'] //条件提取到数组\n    if(fruits.includes(param)) {\n        console.log('yes')\n    }\n  }\n```\n* 少写嵌套，尽早返回\n    + 如果没有水果，抛出错误\n    + 如果该水果的数量大于10，将其打印出来\n```javascript\n//bad\nfunction test(param, num) {\n    const fruit = ['apple', 'pear', 'cherry']\n      // 条件 1：fruit 必须有值\n    if (param) {\n            // 条件 2：必须存在\n        if (fruit.includes(param)) {\n            console.log('red')\n        //数量大于 10\n            if (num > 10) {\n                console.log('more')\n            }\n        }\n    } else {\n        throw new Error('no frulte')\n    }\n}\n// 测试结果\ntest(null); // 报错：No fruits\ntest('apple'); //red\ntest('apple', 20) //red\n\n\nfunction test(p,num) {\n    const fruits = ['apply','pear']\n    if(!p) throw new Error('no')\n    if(fruits.includes(p)) {\n        console.log('yes')\n        if(num>10) {\n            console.log('good')\n        }\n    }\n}\n\nfunction test(p,num) {\n    const fruits = ['apply','pear','chreey']\n    if(!p) throw new Error('no')\n    if(!fruits.includes(p)) return  //不是直接返回\n    console.log('red')\n    if(num>10) console.log('good')\n}\n```\n#### 使用函数默认参数和解构\n```javascript \nfunction test(fruit,num) {\n    if(!fruit) return\n    let q = num || 1\n    console.log(`we have ${q} ${fruit}`)\n}\n//测试结果\ntest('banana'); // We have 1 banana!\ntest('apple', 2); // We have 2 apple!\n\nfunction test(fruit,num = 1) { \n    if(!fruit) return\n    console.log(`we have ${fruit} ${num}`)\n }  \n//如果fruit是一个对象\nfunction test(fruit) {\n     if(fruit && fruit.name) {\n         console.log(fruit.name)\n     }else{\n         console.log('unknow')\n     }\n }\n\n//测试结果\ntest(undefined); // unknown\ntest({ }); // unknown\ntest({ name: 'apple', color: 'red' }); // apple\n\n//可以通过默认参数和解构赋值的方法来避免写出 fruit && fruit.name 这种条件。\nfunction test({name} ={}) {\n    console.log(name || 'unknow')\n}\n//解构只适用于对象（Object）\n```\n#### 相较于 switch，Map / Object 也许是更好的选择\n```javascript  \nfunction test(color) {\n    switch(color) {\n        case 'red':\n        return ['apple', 'strawberry'];\n        case 'yellow':\n        return ['banana', 'pineapple'];\n        case 'purple':\n        return ['grape', 'plum'];\n        default:\n        return [];\n    }\n}\n//测试结果\ntest(null); // []\ntest('yellow'); // ['banana', 'pineapple']\n\nconst fruit = {\n    red: ['apple', 'strawberry'],\n    yellow: ['banana', 'pineapple'],\n    purple: ['grape', 'plum']\n}\nfunction test(color) {\n    return fruit[color] || []\n  }\n\n//Map\nconst fruit = new Map()\n.set('red', ['apple', 'strawberry'])\n.set('yellow', ['banana', 'pineapple'])\n.set('purple', ['grape', 'plum']);\n\nfunction test(color) {\n    return fruit[color] || []\n  }\n\n//Array.filter\nconst fruit = [\n    { name: 'apple', color: 'red' }, \n    { name: 'strawberry', color: 'red' }, \n    { name: 'banana', color: 'yellow' }, \n    { name: 'pineapple', color: 'yellow' }, \n    { name: 'grape', color: 'purple' }, \n    { name: 'plum', color: 'purple' }\n]\nfunction test(color) {\n    return fruit.filter(f =>f.color = color)\n  }\n\n\n```\n\n#### 使用 Array.every 和 Array.some 来处理全部/部分满足条件\n```javascript\nconst fruits =[\n    { name: 'apple', color: 'red' },\n    { name: 'banana', color: 'yellow' },\n    { name: 'grape', color: 'purple' }\n  ]\nfunction test() {  \n    let isAll = true\n    //所有水果都必须是红色\n    for(let f of fruits) {\n        if(!isAll) break\n        isAll = (f.color =='red')\n    }\n    console.log(isAll) //false\n}\n\n\n//Array.every\nconst fruits = [\n    { name: 'apple', color: 'red' },\n    { name: 'banana', color: 'yellow' },\n    { name: 'grape', color: 'purple' }\n]\nfunction test() {\n    //所有水果必须都是红色\n    const isAll = fruits.every(f =>f.color =='red')\n    console.log(isAll) //false\n  }\n\n  //Array.some\n  const fruits = [\n    { name: 'apple', color: 'red' },\n    { name: 'banana', color: 'yellow' },\n    { name: 'grape', color: 'purple' }\n]\nfunction test() {\n        //至少一个水果是红色\n    const isAll = fruits.some(f =>f.color=='red')\n    console.log(isAll) //true\n}\n\n```\n\n\n\n\n","slug":"js条件语句","published":1,"date":"2021-07-01T07:30:54.549Z","updated":"2021-07-01T07:30:54.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuej001ozgsyrkr3z90g","content":"<h4 id=\"使用Array-includes来处理多重条件\"><a href=\"#使用Array-includes来处理多重条件\" class=\"headerlink\" title=\"使用Array.includes来处理多重条件\"></a>使用Array.includes来处理多重条件</h4><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\" target=\"_blank\" rel=\"noopener\">Array.includes</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bad</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fn === <span class=\"string\">'apply'</span> || fn == <span class=\"string\">'pear'</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'yes'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果筛选条件多</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fruits = [<span class=\"string\">'apply'</span>,<span class=\"string\">'pear'</span>,<span class=\"string\">'banana'</span>] <span class=\"comment\">//条件提取到数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fruits.includes(param)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'yes'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>少写嵌套，尽早返回<ul>\n<li>如果没有水果，抛出错误</li>\n<li>如果该水果的数量大于10，将其打印出来<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bad</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">param, num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fruit = [<span class=\"string\">'apple'</span>, <span class=\"string\">'pear'</span>, <span class=\"string\">'cherry'</span>]</span><br><span class=\"line\">      <span class=\"comment\">// 条件 1：fruit 必须有值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (param) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 条件 2：必须存在</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fruit.includes(param)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'red'</span>)</span><br><span class=\"line\">        <span class=\"comment\">//数量大于 10</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'more'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'no frulte'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 测试结果</span></span><br><span class=\"line\">test(<span class=\"literal\">null</span>); <span class=\"comment\">// 报错：No fruits</span></span><br><span class=\"line\">test(<span class=\"string\">'apple'</span>); <span class=\"comment\">//red</span></span><br><span class=\"line\">test(<span class=\"string\">'apple'</span>, <span class=\"number\">20</span>) <span class=\"comment\">//red</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">p,num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fruits = [<span class=\"string\">'apply'</span>,<span class=\"string\">'pear'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'no'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fruits.includes(p)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'yes'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'good'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">p,num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fruits = [<span class=\"string\">'apply'</span>,<span class=\"string\">'pear'</span>,<span class=\"string\">'chreey'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'no'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fruits.includes(p)) <span class=\"keyword\">return</span>  <span class=\"comment\">//不是直接返回</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'red'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">10</span>) <span class=\"built_in\">console</span>.log(<span class=\"string\">'good'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"使用函数默认参数和解构\"><a href=\"#使用函数默认参数和解构\" class=\"headerlink\" title=\"使用函数默认参数和解构\"></a>使用函数默认参数和解构</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">fruit,num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fruit) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = num || <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`we have <span class=\"subst\">$&#123;q&#125;</span> <span class=\"subst\">$&#123;fruit&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试结果</span></span><br><span class=\"line\">test(<span class=\"string\">'banana'</span>); <span class=\"comment\">// We have 1 banana!</span></span><br><span class=\"line\">test(<span class=\"string\">'apple'</span>, <span class=\"number\">2</span>); <span class=\"comment\">// We have 2 apple!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">fruit,num = <span class=\"number\">1</span></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fruit) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`we have <span class=\"subst\">$&#123;fruit&#125;</span> <span class=\"subst\">$&#123;num&#125;</span>`</span>)</span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\"><span class=\"comment\">//如果fruit是一个对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">fruit</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(fruit &amp;&amp; fruit.name) &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(fruit.name)</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">'unknow'</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试结果</span></span><br><span class=\"line\">test(<span class=\"literal\">undefined</span>); <span class=\"comment\">// unknown</span></span><br><span class=\"line\">test(&#123; &#125;); <span class=\"comment\">// unknown</span></span><br><span class=\"line\">test(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'apple'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;); <span class=\"comment\">// apple</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以通过默认参数和解构赋值的方法来避免写出 fruit &amp;&amp; fruit.name 这种条件。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">&#123;name&#125; =&#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name || <span class=\"string\">'unknow'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解构只适用于对象（Object）</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"相较于-switch，Map-Object-也许是更好的选择\"><a href=\"#相较于-switch，Map-Object-也许是更好的选择\" class=\"headerlink\" title=\"相较于 switch，Map / Object 也许是更好的选择\"></a>相较于 switch，Map / Object 也许是更好的选择</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">color</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(color) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'red'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">'apple'</span>, <span class=\"string\">'strawberry'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'yellow'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">'banana'</span>, <span class=\"string\">'pineapple'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'purple'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">'grape'</span>, <span class=\"string\">'plum'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试结果</span></span><br><span class=\"line\">test(<span class=\"literal\">null</span>); <span class=\"comment\">// []</span></span><br><span class=\"line\">test(<span class=\"string\">'yellow'</span>); <span class=\"comment\">// ['banana', 'pineapple']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = &#123;</span><br><span class=\"line\">    red: [<span class=\"string\">'apple'</span>, <span class=\"string\">'strawberry'</span>],</span><br><span class=\"line\">    yellow: [<span class=\"string\">'banana'</span>, <span class=\"string\">'pineapple'</span>],</span><br><span class=\"line\">    purple: [<span class=\"string\">'grape'</span>, <span class=\"string\">'plum'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">color</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fruit[color] || []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">.set(<span class=\"string\">'red'</span>, [<span class=\"string\">'apple'</span>, <span class=\"string\">'strawberry'</span>])</span><br><span class=\"line\">.set(<span class=\"string\">'yellow'</span>, [<span class=\"string\">'banana'</span>, <span class=\"string\">'pineapple'</span>])</span><br><span class=\"line\">.set(<span class=\"string\">'purple'</span>, [<span class=\"string\">'grape'</span>, <span class=\"string\">'plum'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">color</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fruit[color] || []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Array.filter</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'apple'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'strawberry'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'banana'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'yellow'</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'pineapple'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'yellow'</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'grape'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'purple'</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'plum'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'purple'</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">color</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fruit.filter(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span>f.color = color)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-Array-every-和-Array-some-来处理全部-部分满足条件\"><a href=\"#使用-Array-every-和-Array-some-来处理全部-部分满足条件\" class=\"headerlink\" title=\"使用 Array.every 和 Array.some 来处理全部/部分满足条件\"></a>使用 Array.every 和 Array.some 来处理全部/部分满足条件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fruits =[</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'apple'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'banana'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'yellow'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'grape'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'purple'</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">let</span> isAll = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">//所有水果都必须是红色</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> f <span class=\"keyword\">of</span> fruits) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isAll) <span class=\"keyword\">break</span></span><br><span class=\"line\">        isAll = (f.color ==<span class=\"string\">'red'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isAll) <span class=\"comment\">//false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Array.every</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruits = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'apple'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'banana'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'yellow'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'grape'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'purple'</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//所有水果必须都是红色</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isAll = fruits.every(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span>f.color ==<span class=\"string\">'red'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isAll) <span class=\"comment\">//false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//Array.some</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fruits = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'apple'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'banana'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'yellow'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'grape'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'purple'</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//至少一个水果是红色</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isAll = fruits.some(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span>f.color==<span class=\"string\">'red'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isAll) <span class=\"comment\">//true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<h4 id=\"使用Array-includes来处理多重条件\"><a href=\"#使用Array-includes来处理多重条件\" class=\"headerlink\" title=\"使用Array.includes来处理多重条件\"></a>使用Array.includes来处理多重条件</h4><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\" target=\"_blank\" rel=\"noopener\">Array.includes</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bad</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fn === <span class=\"string\">'apply'</span> || fn == <span class=\"string\">'pear'</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'yes'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果筛选条件多</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fruits = [<span class=\"string\">'apply'</span>,<span class=\"string\">'pear'</span>,<span class=\"string\">'banana'</span>] <span class=\"comment\">//条件提取到数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fruits.includes(param)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'yes'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>少写嵌套，尽早返回<ul>\n<li>如果没有水果，抛出错误</li>\n<li>如果该水果的数量大于10，将其打印出来<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bad</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">param, num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fruit = [<span class=\"string\">'apple'</span>, <span class=\"string\">'pear'</span>, <span class=\"string\">'cherry'</span>]</span><br><span class=\"line\">      <span class=\"comment\">// 条件 1：fruit 必须有值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (param) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 条件 2：必须存在</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fruit.includes(param)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'red'</span>)</span><br><span class=\"line\">        <span class=\"comment\">//数量大于 10</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'more'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'no frulte'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 测试结果</span></span><br><span class=\"line\">test(<span class=\"literal\">null</span>); <span class=\"comment\">// 报错：No fruits</span></span><br><span class=\"line\">test(<span class=\"string\">'apple'</span>); <span class=\"comment\">//red</span></span><br><span class=\"line\">test(<span class=\"string\">'apple'</span>, <span class=\"number\">20</span>) <span class=\"comment\">//red</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">p,num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fruits = [<span class=\"string\">'apply'</span>,<span class=\"string\">'pear'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'no'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fruits.includes(p)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'yes'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'good'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">p,num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fruits = [<span class=\"string\">'apply'</span>,<span class=\"string\">'pear'</span>,<span class=\"string\">'chreey'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!p) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'no'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fruits.includes(p)) <span class=\"keyword\">return</span>  <span class=\"comment\">//不是直接返回</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'red'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">10</span>) <span class=\"built_in\">console</span>.log(<span class=\"string\">'good'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"使用函数默认参数和解构\"><a href=\"#使用函数默认参数和解构\" class=\"headerlink\" title=\"使用函数默认参数和解构\"></a>使用函数默认参数和解构</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">fruit,num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fruit) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> q = num || <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`we have <span class=\"subst\">$&#123;q&#125;</span> <span class=\"subst\">$&#123;fruit&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试结果</span></span><br><span class=\"line\">test(<span class=\"string\">'banana'</span>); <span class=\"comment\">// We have 1 banana!</span></span><br><span class=\"line\">test(<span class=\"string\">'apple'</span>, <span class=\"number\">2</span>); <span class=\"comment\">// We have 2 apple!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">fruit,num = <span class=\"number\">1</span></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fruit) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`we have <span class=\"subst\">$&#123;fruit&#125;</span> <span class=\"subst\">$&#123;num&#125;</span>`</span>)</span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\"><span class=\"comment\">//如果fruit是一个对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">fruit</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(fruit &amp;&amp; fruit.name) &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(fruit.name)</span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">'unknow'</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试结果</span></span><br><span class=\"line\">test(<span class=\"literal\">undefined</span>); <span class=\"comment\">// unknown</span></span><br><span class=\"line\">test(&#123; &#125;); <span class=\"comment\">// unknown</span></span><br><span class=\"line\">test(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'apple'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;); <span class=\"comment\">// apple</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以通过默认参数和解构赋值的方法来避免写出 fruit &amp;&amp; fruit.name 这种条件。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">&#123;name&#125; =&#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name || <span class=\"string\">'unknow'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解构只适用于对象（Object）</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"相较于-switch，Map-Object-也许是更好的选择\"><a href=\"#相较于-switch，Map-Object-也许是更好的选择\" class=\"headerlink\" title=\"相较于 switch，Map / Object 也许是更好的选择\"></a>相较于 switch，Map / Object 也许是更好的选择</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">color</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(color) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'red'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">'apple'</span>, <span class=\"string\">'strawberry'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'yellow'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">'banana'</span>, <span class=\"string\">'pineapple'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'purple'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">'grape'</span>, <span class=\"string\">'plum'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试结果</span></span><br><span class=\"line\">test(<span class=\"literal\">null</span>); <span class=\"comment\">// []</span></span><br><span class=\"line\">test(<span class=\"string\">'yellow'</span>); <span class=\"comment\">// ['banana', 'pineapple']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = &#123;</span><br><span class=\"line\">    red: [<span class=\"string\">'apple'</span>, <span class=\"string\">'strawberry'</span>],</span><br><span class=\"line\">    yellow: [<span class=\"string\">'banana'</span>, <span class=\"string\">'pineapple'</span>],</span><br><span class=\"line\">    purple: [<span class=\"string\">'grape'</span>, <span class=\"string\">'plum'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">color</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fruit[color] || []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">.set(<span class=\"string\">'red'</span>, [<span class=\"string\">'apple'</span>, <span class=\"string\">'strawberry'</span>])</span><br><span class=\"line\">.set(<span class=\"string\">'yellow'</span>, [<span class=\"string\">'banana'</span>, <span class=\"string\">'pineapple'</span>])</span><br><span class=\"line\">.set(<span class=\"string\">'purple'</span>, [<span class=\"string\">'grape'</span>, <span class=\"string\">'plum'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">color</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fruit[color] || []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Array.filter</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruit = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'apple'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'strawberry'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'banana'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'yellow'</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'pineapple'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'yellow'</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'grape'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'purple'</span> &#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'plum'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'purple'</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">color</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fruit.filter(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span>f.color = color)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用-Array-every-和-Array-some-来处理全部-部分满足条件\"><a href=\"#使用-Array-every-和-Array-some-来处理全部-部分满足条件\" class=\"headerlink\" title=\"使用 Array.every 和 Array.some 来处理全部/部分满足条件\"></a>使用 Array.every 和 Array.some 来处理全部/部分满足条件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fruits =[</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'apple'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'banana'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'yellow'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'grape'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'purple'</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">let</span> isAll = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">//所有水果都必须是红色</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> f <span class=\"keyword\">of</span> fruits) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isAll) <span class=\"keyword\">break</span></span><br><span class=\"line\">        isAll = (f.color ==<span class=\"string\">'red'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isAll) <span class=\"comment\">//false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Array.every</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fruits = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'apple'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'banana'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'yellow'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'grape'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'purple'</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//所有水果必须都是红色</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isAll = fruits.every(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span>f.color ==<span class=\"string\">'red'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isAll) <span class=\"comment\">//false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//Array.some</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fruits = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'apple'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'banana'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'yellow'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'grape'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'purple'</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//至少一个水果是红色</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isAll = fruits.some(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span>f.color==<span class=\"string\">'red'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(isAll) <span class=\"comment\">//true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"ES6系列-模块化","date":"2020-06-17T07:33:03.000Z","_content":"\n```javascript\nexport let A = 123; //导出一个变量\nexport function test() {\n    console.log('test')\n}\nexport class Hello{\n    test() {\n        console.log('class')\n    }\n}\n\nimport {A,test,Hello} from './index'\nimport * as lesson from './index'\nconsole.log(lesson.A)\n\n{\n    let A = 123;\n    export function test() {\n        console.log('test')\n    }\n    class Hello{\n        test() {\n            console.log('hello')\n        }\n    }\n\n    export default{\n        A,\n        test,\n        Hello\n    }\n\n\n\n    import 任意变量名 from './index'\n}\n```","source":"_posts/module.md","raw":"---\ntitle: ES6系列-模块化\ncategories: js\ndate: 2020-06-17 15:33:03\ntags: [编程,学习]\n---\n\n```javascript\nexport let A = 123; //导出一个变量\nexport function test() {\n    console.log('test')\n}\nexport class Hello{\n    test() {\n        console.log('class')\n    }\n}\n\nimport {A,test,Hello} from './index'\nimport * as lesson from './index'\nconsole.log(lesson.A)\n\n{\n    let A = 123;\n    export function test() {\n        console.log('test')\n    }\n    class Hello{\n        test() {\n            console.log('hello')\n        }\n    }\n\n    export default{\n        A,\n        test,\n        Hello\n    }\n\n\n\n    import 任意变量名 from './index'\n}\n```","slug":"module","published":1,"updated":"2021-07-02T11:29:29.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuel001szgsy2azw2xxh","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> A = <span class=\"number\">123</span>; <span class=\"comment\">//导出一个变量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span>&#123;</span><br><span class=\"line\">    test() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'class'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;A,test,Hello&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lesson <span class=\"keyword\">from</span> <span class=\"string\">'./index'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lesson.A)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> A = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span>&#123;</span><br><span class=\"line\">        test() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">        A,</span><br><span class=\"line\">        test,</span><br><span class=\"line\">        Hello</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">import</span> 任意变量名 <span class=\"keyword\">from</span> <span class=\"string\">'./index'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> A = <span class=\"number\">123</span>; <span class=\"comment\">//导出一个变量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span>&#123;</span><br><span class=\"line\">    test() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'class'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;A,test,Hello&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lesson <span class=\"keyword\">from</span> <span class=\"string\">'./index'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lesson.A)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> A = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span>&#123;</span><br><span class=\"line\">        test() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span><br><span class=\"line\">        A,</span><br><span class=\"line\">        test,</span><br><span class=\"line\">        Hello</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">import</span> 任意变量名 <span class=\"keyword\">from</span> <span class=\"string\">'./index'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"ES6系列-promise","_content":"```javascript\n// promise\n{\n    //传统es5回调方式解决异步\n    let ajax = function (callback) {\n        console.log('等待下一步加载。。。')\n        setTimeout(() => {\n            callback && callback.call()\n        }, 1000);\n    }\n    ajax(function () {\n        console.log('来了来了')\n    })\n}\n\n{\n    //执行a-b-c-d-e-f....\n    let ajax = () => {\n        console.log('等待setTimeOut2加载')\n        return new Promise((resolve, reject) => {  //执行，中断\n            setTimeout(() => {\n                resolve()\n            }, 1000);\n        })\n    }\n    ajax().then(() => {\n        console.log('promise', 'setTimeOut2')\n    })\n}\n\n{\n    let ajax = () => {\n        console.log('等待第一次加载')\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve()\n            }, 1000);\n        })\n    }\n    ajax().then(() => {\n        console.log('等待第二次')\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve()\n            }, 2000);\n        })\n    })\n        .then(() => {\n            console.log('我是第三次加载')\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    resolve()\n                }, 3000);\n            })\n        })\n        .then(() => {\n            console.log('最后一次加载')\n        })\n}\n//如果中间出现错误，如何捕获\n{\n    let ajax = function (num) {\n        console.log('判断num')\n        return new Promise((resolve, reject) => {\n            if (num < 5) {\n                resolve()\n            } else {\n                throw new Error('传错了')\n            }\n        })\n    }\n    ajax(6).then(() => {\n        console.log('log', 6)\n    }).catch(err => {\n        console.log('catch', err)\n    })\n    ajax(2).then(() => {\n        console.log('log', 2)\n    }).catch(err => {\n        console.log('catch', err)\n    })\n}\n\n//使用场景promise.all,promise\n{\n    // 所有图都加载后显示到页面\n    function loadImg(src) {\n        return new Promise((resolve, reject) => {\n            let img = document.createElement('img')\n            img.src = src\n            img.onload = () => {\n                resolve(img)\n            }\n            img.onerror = () => {\n                reject(err)\n            }\n            //图片加载完成onload\n        })\n    }\n    //添加到页面\n    function showImg(imgs) {\n        imgs.forEach(item => {\n            document.body.appendChild(item)\n        })\n    }\n    // promise.all把多个promise实例当成一个promise实例\n    Promise.all([\n        loadImg('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545736426664&di=219db669df4a813bcca53e582da7582e&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130531_wXcaQ.thumb.700_0.jpeg'),\n        loadImg('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545736426664&di=2c20d892a361fa4313ae380600c434b8&imgtype=0&src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn%2Fw440h329%2F20171229%2Fbe5c-fypyuve2937030.jpg'),\n        loadImg('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545736426663&di=1ce727cefe866cd3baa0bcdc64dd8cb7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130914_CrVz5.jpeg')\n    ]).then(showImg)\n}\n{\n    //先到先得,有一本图片加载完就加载到页面\n    function loadImg(src) {\n        return new Promise((resolve, reject) => {\n            let img = document.createElement('img')\n            img.src = src\n            img.onload = () => {\n                resolve(img)\n            }\n            img.onerror = () => {\n                reject(err)\n            }\n        })\n    }\n\n    function showImg(imgs) {\n        document.body.appendChild(imgs)\n    }\n    Promise.race([\n        loadImg('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545736426664&di=219db669df4a813bcca53e582da7582e&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130531_wXcaQ.thumb.700_0.jpeg'),\n        loadImg('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545736426664&di=2c20d892a361fa4313ae380600c434b8&imgtype=0&src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn%2Fw440h329%2F20171229%2Fbe5c-fypyuve2937030.jpg'),\n        loadImg('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545736426663&di=1ce727cefe866cd3baa0bcdc64dd8cb7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130914_CrVz5.jpeg')\n    ]).then(showImg)\n\n}\n```","source":"_posts/promise.md","raw":"---\ntitle: ES6系列-promise\ncategories: js\ntags: [编程,学习]\n---\n```javascript\n// promise\n{\n    //传统es5回调方式解决异步\n    let ajax = function (callback) {\n        console.log('等待下一步加载。。。')\n        setTimeout(() => {\n            callback && callback.call()\n        }, 1000);\n    }\n    ajax(function () {\n        console.log('来了来了')\n    })\n}\n\n{\n    //执行a-b-c-d-e-f....\n    let ajax = () => {\n        console.log('等待setTimeOut2加载')\n        return new Promise((resolve, reject) => {  //执行，中断\n            setTimeout(() => {\n                resolve()\n            }, 1000);\n        })\n    }\n    ajax().then(() => {\n        console.log('promise', 'setTimeOut2')\n    })\n}\n\n{\n    let ajax = () => {\n        console.log('等待第一次加载')\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve()\n            }, 1000);\n        })\n    }\n    ajax().then(() => {\n        console.log('等待第二次')\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve()\n            }, 2000);\n        })\n    })\n        .then(() => {\n            console.log('我是第三次加载')\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    resolve()\n                }, 3000);\n            })\n        })\n        .then(() => {\n            console.log('最后一次加载')\n        })\n}\n//如果中间出现错误，如何捕获\n{\n    let ajax = function (num) {\n        console.log('判断num')\n        return new Promise((resolve, reject) => {\n            if (num < 5) {\n                resolve()\n            } else {\n                throw new Error('传错了')\n            }\n        })\n    }\n    ajax(6).then(() => {\n        console.log('log', 6)\n    }).catch(err => {\n        console.log('catch', err)\n    })\n    ajax(2).then(() => {\n        console.log('log', 2)\n    }).catch(err => {\n        console.log('catch', err)\n    })\n}\n\n//使用场景promise.all,promise\n{\n    // 所有图都加载后显示到页面\n    function loadImg(src) {\n        return new Promise((resolve, reject) => {\n            let img = document.createElement('img')\n            img.src = src\n            img.onload = () => {\n                resolve(img)\n            }\n            img.onerror = () => {\n                reject(err)\n            }\n            //图片加载完成onload\n        })\n    }\n    //添加到页面\n    function showImg(imgs) {\n        imgs.forEach(item => {\n            document.body.appendChild(item)\n        })\n    }\n    // promise.all把多个promise实例当成一个promise实例\n    Promise.all([\n        loadImg('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545736426664&di=219db669df4a813bcca53e582da7582e&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130531_wXcaQ.thumb.700_0.jpeg'),\n        loadImg('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545736426664&di=2c20d892a361fa4313ae380600c434b8&imgtype=0&src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn%2Fw440h329%2F20171229%2Fbe5c-fypyuve2937030.jpg'),\n        loadImg('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545736426663&di=1ce727cefe866cd3baa0bcdc64dd8cb7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130914_CrVz5.jpeg')\n    ]).then(showImg)\n}\n{\n    //先到先得,有一本图片加载完就加载到页面\n    function loadImg(src) {\n        return new Promise((resolve, reject) => {\n            let img = document.createElement('img')\n            img.src = src\n            img.onload = () => {\n                resolve(img)\n            }\n            img.onerror = () => {\n                reject(err)\n            }\n        })\n    }\n\n    function showImg(imgs) {\n        document.body.appendChild(imgs)\n    }\n    Promise.race([\n        loadImg('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545736426664&di=219db669df4a813bcca53e582da7582e&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130531_wXcaQ.thumb.700_0.jpeg'),\n        loadImg('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545736426664&di=2c20d892a361fa4313ae380600c434b8&imgtype=0&src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn%2Fw440h329%2F20171229%2Fbe5c-fypyuve2937030.jpg'),\n        loadImg('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545736426663&di=1ce727cefe866cd3baa0bcdc64dd8cb7&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130914_CrVz5.jpeg')\n    ]).then(showImg)\n\n}\n```","slug":"promise","published":1,"date":"2021-07-01T07:30:54.550Z","updated":"2021-07-01T07:30:54.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuen001wzgsyvuacnyan","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//传统es5回调方式解决异步</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'等待下一步加载。。。'</span>)</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            callback &amp;&amp; callback.call()</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ajax(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'来了来了'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//执行a-b-c-d-e-f....</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ajax = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'等待setTimeOut2加载'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;  <span class=\"comment\">//执行，中断</span></span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                resolve()</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ajax().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>, <span class=\"string\">'setTimeOut2'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ajax = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'等待第一次加载'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                resolve()</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ajax().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'等待第二次'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                resolve()</span><br><span class=\"line\">            &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是第三次加载'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'最后一次加载'</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果中间出现错误，如何捕获</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'判断num'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">                resolve()</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'传错了'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ajax(<span class=\"number\">6</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch'</span>, err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ajax(<span class=\"number\">2</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch'</span>, err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用场景promise.all,promise</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 所有图都加载后显示到页面</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImg</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>)</span><br><span class=\"line\">            img.src = src</span><br><span class=\"line\">            img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                resolve(img)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            img.onerror = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                reject(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//图片加载完成onload</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//添加到页面</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showImg</span>(<span class=\"params\">imgs</span>) </span>&#123;</span><br><span class=\"line\">        imgs.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(item)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// promise.all把多个promise实例当成一个promise实例</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">        loadImg(<span class=\"string\">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=219db669df4a813bcca53e582da7582e&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130531_wXcaQ.thumb.700_0.jpeg'</span>),</span><br><span class=\"line\">        loadImg(<span class=\"string\">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=2c20d892a361fa4313ae380600c434b8&amp;imgtype=0&amp;src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn%2Fw440h329%2F20171229%2Fbe5c-fypyuve2937030.jpg'</span>),</span><br><span class=\"line\">        loadImg(<span class=\"string\">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426663&amp;di=1ce727cefe866cd3baa0bcdc64dd8cb7&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130914_CrVz5.jpeg'</span>)</span><br><span class=\"line\">    ]).then(showImg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//先到先得,有一本图片加载完就加载到页面</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImg</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>)</span><br><span class=\"line\">            img.src = src</span><br><span class=\"line\">            img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                resolve(img)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            img.onerror = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                reject(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showImg</span>(<span class=\"params\">imgs</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(imgs)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.race([</span><br><span class=\"line\">        loadImg(<span class=\"string\">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=219db669df4a813bcca53e582da7582e&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130531_wXcaQ.thumb.700_0.jpeg'</span>),</span><br><span class=\"line\">        loadImg(<span class=\"string\">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=2c20d892a361fa4313ae380600c434b8&amp;imgtype=0&amp;src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn%2Fw440h329%2F20171229%2Fbe5c-fypyuve2937030.jpg'</span>),</span><br><span class=\"line\">        loadImg(<span class=\"string\">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426663&amp;di=1ce727cefe866cd3baa0bcdc64dd8cb7&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130914_CrVz5.jpeg'</span>)</span><br><span class=\"line\">    ]).then(showImg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//传统es5回调方式解决异步</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'等待下一步加载。。。'</span>)</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            callback &amp;&amp; callback.call()</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ajax(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'来了来了'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//执行a-b-c-d-e-f....</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ajax = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'等待setTimeOut2加载'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;  <span class=\"comment\">//执行，中断</span></span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                resolve()</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ajax().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'promise'</span>, <span class=\"string\">'setTimeOut2'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ajax = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'等待第一次加载'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                resolve()</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ajax().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'等待第二次'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                resolve()</span><br><span class=\"line\">            &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'我是第三次加载'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    resolve()</span><br><span class=\"line\">                &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'最后一次加载'</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果中间出现错误，如何捕获</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'判断num'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">                resolve()</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'传错了'</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ajax(<span class=\"number\">6</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch'</span>, err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ajax(<span class=\"number\">2</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'catch'</span>, err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用场景promise.all,promise</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 所有图都加载后显示到页面</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImg</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>)</span><br><span class=\"line\">            img.src = src</span><br><span class=\"line\">            img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                resolve(img)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            img.onerror = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                reject(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//图片加载完成onload</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//添加到页面</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showImg</span>(<span class=\"params\">imgs</span>) </span>&#123;</span><br><span class=\"line\">        imgs.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(item)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// promise.all把多个promise实例当成一个promise实例</span></span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">        loadImg(<span class=\"string\">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=219db669df4a813bcca53e582da7582e&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130531_wXcaQ.thumb.700_0.jpeg'</span>),</span><br><span class=\"line\">        loadImg(<span class=\"string\">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=2c20d892a361fa4313ae380600c434b8&amp;imgtype=0&amp;src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn%2Fw440h329%2F20171229%2Fbe5c-fypyuve2937030.jpg'</span>),</span><br><span class=\"line\">        loadImg(<span class=\"string\">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426663&amp;di=1ce727cefe866cd3baa0bcdc64dd8cb7&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130914_CrVz5.jpeg'</span>)</span><br><span class=\"line\">    ]).then(showImg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//先到先得,有一本图片加载完就加载到页面</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImg</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>)</span><br><span class=\"line\">            img.src = src</span><br><span class=\"line\">            img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                resolve(img)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            img.onerror = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                reject(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showImg</span>(<span class=\"params\">imgs</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(imgs)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.race([</span><br><span class=\"line\">        loadImg(<span class=\"string\">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=219db669df4a813bcca53e582da7582e&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130531_wXcaQ.thumb.700_0.jpeg'</span>),</span><br><span class=\"line\">        loadImg(<span class=\"string\">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=2c20d892a361fa4313ae380600c434b8&amp;imgtype=0&amp;src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn%2Fw440h329%2F20171229%2Fbe5c-fypyuve2937030.jpg'</span>),</span><br><span class=\"line\">        loadImg(<span class=\"string\">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426663&amp;di=1ce727cefe866cd3baa0bcdc64dd8cb7&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130914_CrVz5.jpeg'</span>)</span><br><span class=\"line\">    ]).then(showImg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"js高阶函数","date":"2017-12-01T16:00:00.000Z","_content":"\n```\n\nfunction greentng() {\n    console.log('hello world')\n}\ngreentng() //hello world\n\n\ngreentng.lang = 'English'\nconsole.log(greentng.lang) //English\n\n\n//可以在 JavaScript 中将函数赋值给变量\nconst square = function (x) {\n    return x * 2\n}\nconst total = square;\ntotal(4)  //8\n//将函数作为参数传递\nfunction format(type, one, two) {\n    if (type == 'oneCase') {\n        one()\n    } else if (type == 'twoCase') {\n        two()\n    }\n}\nfunction one() {\n    console.log('this is one')\n}\nfunction two() {\n    console.log('this is two')\n}\nformat('oneCase', one, two)\n\n/* \n高阶函数是对其他函数进行操作的函数，操作可以是将它们作为参数，或者是返回它们。\n 简单来说，高阶函数是一个接收函数作为参数或将函数作为输出返回的函数。\n 例如，Array.prototype.map，Array.prototype.filter 和 Array.prototype.reduce 是语言中内置的一些高阶函数。\n*/\n\n\n\n/* \nArray.prototype.map\nmap() 方法通过调用对输入数组中每个元素调用回调函数来创建一个新数组。\nmap() 方法将获取回调函数中的每个返回值，并使用这些值创建一个新数组。\n传递给 map() 方法的回调函数接受 3 个参数：element，index 和 array。\n*/\n\nvar num = [1, 2, 3, 4, 5]\nvar arr = []\nfor (var i = 0; i < num.length; i++) {\n    arr.push(num[i] * 2)\n}\nconsole.log(arr)\n\n\n// map\n\nvar num = [1, 2, 3, 4]\nvar arr = num.map(item => item * 2)\nconsole.log(arr)\n\n//假设我们有一个包含不同人的出生年份的数组，我们想要创建一个包含其年龄的数组。 例如：\nconst year = [1993, 1923, 1983, 1990]\nconst age = []\n\nfor (var i = 0; i < year.length; i++) {\n    let change = 2018 - year[i]\n    age.push(change)\n}\nconsole.log(age)\n\n\n// map\nconst year = [1993, 1923, 1983, 1990]\nconst age = year.map(item => 2018-item)\nconsole.log(age)\n\n\n/* \nArray.prototype.filter\nfilter() 方法会创建一个新数组，其中包含所有通过回调函数测试的元素。\n 传递给 filter() 方法的回调函数接受3个参数：element，index 和 array。\n*/\n\n\n//假设我们有一个包含名称和年龄属性的对象数组。 我们想要创建一个只包含成年人（年龄大于或等于18）的数组。\n\nvar persons = [\n    {name:'peter',age:16},\n    {name:'lele',age:26},\n    {name:'shaun',age:18},\n    {name:'tony',age:46},\n    {name:'jack',age:54},\n\n]\nvar adult = []\n\nfor(var i = 0 ;i <persons.length;i++) {\n    if(persons[i].age >=18) {\n        adult.push(persons[i])\n    }\n}\nconsole.log(adult)\n//filter\n\nvar persons = [\n    {name:'peter',age:16},\n    {name:'lele',age:26},\n    {name:'shaun',age:18},\n    {name:'tony',age:46},\n    {name:'jack',age:54},\n\n]\nvar adult = persons.filter(item =>item.age >=18)\nconsole.log(adult)\n\n/* \nArray.prototype.reducereduce 方法对调用数组的每个元素执行回调函数，最后生成一个单一的值并返回。\n reduce 方法接受两个参数：1）reducer 函数（回调），2）一个可选的 initialValue。\n reducer 函数（回调）接受四个参数：accumulator，currentValue，currentIndex，sourceArray。\n 如果提供了 initialValue，则累加器将等于 initialValue，currentValue 将等于数组中的第一个元素。\n 如果没有提供 initialValue，则累加器将等于数组中的第一个元素，currentValue 将等于数组中的第二个元素。\n\n*/\n//假设我们要对一个数字数组的求和：\n\nvar sum = [1,2,3,4,5]\nvar total = sum.reduce((a,b) => a+b)\nconsole.log(total)\n\n\n/* \n每次对数组中的某个值调用 reducer 函数，\n累加器都会保留上一次 reducer 函数操作返回的结果，\n并将 currentValue 设置为数组的当前值。 \n最后把结果存储在 sum 变量中。\n我们还可以为它提供初始值：\n*/\n\nvar num = [1,2,3,4]\nvar total = 0;\nfor(var i = 0 ;i <num.length;i++) {\n    total +=num[i]\n}\nconsole.log(total)\n\n//reduce\nvar num = [1,2,3,4,5,6]\nvar total = num.reduce((a,b) =>{return a+b},10)\nconsole.log(total)\n\n\n\n/* \n我们假设 JavaScript 没有原生的 map 方法。\n我们可以自己构建它，从而创建我们自己的高阶函数。 \n假设我们有一个字符串数组，我们希望把它转换为整数数组，其中每个元素代表原始数组中字符串的长度。\n*/\n\nvar strArray = ['javascript','python','php','java','c']\nfunction mapEach(arr,fn) {\n    var num = []\n    for(var i = 0; i<arr.length;i++) {\n        num.push(fn(arr[i]))\n    }\n    return num;\n\n}\nvar strLength = strArray.mapEach((strArray,()=>))\n\n```","source":"_posts/js高阶函数.md","raw":"---\ntitle: js高阶函数\ndate: 2017-12-02\ncategories: js\ntags: [编程,学习]\n---\n\n```\n\nfunction greentng() {\n    console.log('hello world')\n}\ngreentng() //hello world\n\n\ngreentng.lang = 'English'\nconsole.log(greentng.lang) //English\n\n\n//可以在 JavaScript 中将函数赋值给变量\nconst square = function (x) {\n    return x * 2\n}\nconst total = square;\ntotal(4)  //8\n//将函数作为参数传递\nfunction format(type, one, two) {\n    if (type == 'oneCase') {\n        one()\n    } else if (type == 'twoCase') {\n        two()\n    }\n}\nfunction one() {\n    console.log('this is one')\n}\nfunction two() {\n    console.log('this is two')\n}\nformat('oneCase', one, two)\n\n/* \n高阶函数是对其他函数进行操作的函数，操作可以是将它们作为参数，或者是返回它们。\n 简单来说，高阶函数是一个接收函数作为参数或将函数作为输出返回的函数。\n 例如，Array.prototype.map，Array.prototype.filter 和 Array.prototype.reduce 是语言中内置的一些高阶函数。\n*/\n\n\n\n/* \nArray.prototype.map\nmap() 方法通过调用对输入数组中每个元素调用回调函数来创建一个新数组。\nmap() 方法将获取回调函数中的每个返回值，并使用这些值创建一个新数组。\n传递给 map() 方法的回调函数接受 3 个参数：element，index 和 array。\n*/\n\nvar num = [1, 2, 3, 4, 5]\nvar arr = []\nfor (var i = 0; i < num.length; i++) {\n    arr.push(num[i] * 2)\n}\nconsole.log(arr)\n\n\n// map\n\nvar num = [1, 2, 3, 4]\nvar arr = num.map(item => item * 2)\nconsole.log(arr)\n\n//假设我们有一个包含不同人的出生年份的数组，我们想要创建一个包含其年龄的数组。 例如：\nconst year = [1993, 1923, 1983, 1990]\nconst age = []\n\nfor (var i = 0; i < year.length; i++) {\n    let change = 2018 - year[i]\n    age.push(change)\n}\nconsole.log(age)\n\n\n// map\nconst year = [1993, 1923, 1983, 1990]\nconst age = year.map(item => 2018-item)\nconsole.log(age)\n\n\n/* \nArray.prototype.filter\nfilter() 方法会创建一个新数组，其中包含所有通过回调函数测试的元素。\n 传递给 filter() 方法的回调函数接受3个参数：element，index 和 array。\n*/\n\n\n//假设我们有一个包含名称和年龄属性的对象数组。 我们想要创建一个只包含成年人（年龄大于或等于18）的数组。\n\nvar persons = [\n    {name:'peter',age:16},\n    {name:'lele',age:26},\n    {name:'shaun',age:18},\n    {name:'tony',age:46},\n    {name:'jack',age:54},\n\n]\nvar adult = []\n\nfor(var i = 0 ;i <persons.length;i++) {\n    if(persons[i].age >=18) {\n        adult.push(persons[i])\n    }\n}\nconsole.log(adult)\n//filter\n\nvar persons = [\n    {name:'peter',age:16},\n    {name:'lele',age:26},\n    {name:'shaun',age:18},\n    {name:'tony',age:46},\n    {name:'jack',age:54},\n\n]\nvar adult = persons.filter(item =>item.age >=18)\nconsole.log(adult)\n\n/* \nArray.prototype.reducereduce 方法对调用数组的每个元素执行回调函数，最后生成一个单一的值并返回。\n reduce 方法接受两个参数：1）reducer 函数（回调），2）一个可选的 initialValue。\n reducer 函数（回调）接受四个参数：accumulator，currentValue，currentIndex，sourceArray。\n 如果提供了 initialValue，则累加器将等于 initialValue，currentValue 将等于数组中的第一个元素。\n 如果没有提供 initialValue，则累加器将等于数组中的第一个元素，currentValue 将等于数组中的第二个元素。\n\n*/\n//假设我们要对一个数字数组的求和：\n\nvar sum = [1,2,3,4,5]\nvar total = sum.reduce((a,b) => a+b)\nconsole.log(total)\n\n\n/* \n每次对数组中的某个值调用 reducer 函数，\n累加器都会保留上一次 reducer 函数操作返回的结果，\n并将 currentValue 设置为数组的当前值。 \n最后把结果存储在 sum 变量中。\n我们还可以为它提供初始值：\n*/\n\nvar num = [1,2,3,4]\nvar total = 0;\nfor(var i = 0 ;i <num.length;i++) {\n    total +=num[i]\n}\nconsole.log(total)\n\n//reduce\nvar num = [1,2,3,4,5,6]\nvar total = num.reduce((a,b) =>{return a+b},10)\nconsole.log(total)\n\n\n\n/* \n我们假设 JavaScript 没有原生的 map 方法。\n我们可以自己构建它，从而创建我们自己的高阶函数。 \n假设我们有一个字符串数组，我们希望把它转换为整数数组，其中每个元素代表原始数组中字符串的长度。\n*/\n\nvar strArray = ['javascript','python','php','java','c']\nfunction mapEach(arr,fn) {\n    var num = []\n    for(var i = 0; i<arr.length;i++) {\n        num.push(fn(arr[i]))\n    }\n    return num;\n\n}\nvar strLength = strArray.mapEach((strArray,()=>))\n\n```","slug":"js高阶函数","published":1,"updated":"2021-07-01T07:30:54.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuep0020zgsyp9jxoer6","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greentng</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greentng() <span class=\"comment\">//hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">greentng.lang = <span class=\"string\">'English'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greentng.lang) <span class=\"comment\">//English</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以在 JavaScript 中将函数赋值给变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> total = square;</span><br><span class=\"line\">total(<span class=\"number\">4</span>)  <span class=\"comment\">//8</span></span><br><span class=\"line\"><span class=\"comment\">//将函数作为参数传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">format</span>(<span class=\"params\">type, one, two</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == <span class=\"string\">'oneCase'</span>) &#123;</span><br><span class=\"line\">        one()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == <span class=\"string\">'twoCase'</span>) &#123;</span><br><span class=\"line\">        two()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">one</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is one'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">two</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is two'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">format(<span class=\"string\">'oneCase'</span>, one, two)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">高阶函数是对其他函数进行操作的函数，操作可以是将它们作为参数，或者是返回它们。</span></span><br><span class=\"line\"><span class=\"comment\"> 简单来说，高阶函数是一个接收函数作为参数或将函数作为输出返回的函数。</span></span><br><span class=\"line\"><span class=\"comment\"> 例如，Array.prototype.map，Array.prototype.filter 和 Array.prototype.reduce 是语言中内置的一些高阶函数。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">Array.prototype.map</span></span><br><span class=\"line\"><span class=\"comment\">map() 方法通过调用对输入数组中每个元素调用回调函数来创建一个新数组。</span></span><br><span class=\"line\"><span class=\"comment\">map() 方法将获取回调函数中的每个返回值，并使用这些值创建一个新数组。</span></span><br><span class=\"line\"><span class=\"comment\">传递给 map() 方法的回调函数接受 3 个参数：element，index 和 array。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; num.length; i++) &#123;</span><br><span class=\"line\">    arr.push(num[i] * <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = num.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item * <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//假设我们有一个包含不同人的出生年份的数组，我们想要创建一个包含其年龄的数组。 例如：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> year = [<span class=\"number\">1993</span>, <span class=\"number\">1923</span>, <span class=\"number\">1983</span>, <span class=\"number\">1990</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; year.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> change = <span class=\"number\">2018</span> - year[i]</span><br><span class=\"line\">    age.push(change)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> year = [<span class=\"number\">1993</span>, <span class=\"number\">1923</span>, <span class=\"number\">1983</span>, <span class=\"number\">1990</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = year.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"number\">2018</span>-item)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">Array.prototype.filter</span></span><br><span class=\"line\"><span class=\"comment\">filter() 方法会创建一个新数组，其中包含所有通过回调函数测试的元素。</span></span><br><span class=\"line\"><span class=\"comment\"> 传递给 filter() 方法的回调函数接受3个参数：element，index 和 array。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//假设我们有一个包含名称和年龄属性的对象数组。 我们想要创建一个只包含成年人（年龄大于或等于18）的数组。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> persons = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'peter'</span>,<span class=\"attr\">age</span>:<span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'lele'</span>,<span class=\"attr\">age</span>:<span class=\"number\">26</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'shaun'</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'tony'</span>,<span class=\"attr\">age</span>:<span class=\"number\">46</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,<span class=\"attr\">age</span>:<span class=\"number\">54</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> adult = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ;i &lt;persons.length;i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(persons[i].age &gt;=<span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">        adult.push(persons[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(adult)</span><br><span class=\"line\"><span class=\"comment\">//filter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> persons = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'peter'</span>,<span class=\"attr\">age</span>:<span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'lele'</span>,<span class=\"attr\">age</span>:<span class=\"number\">26</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'shaun'</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'tony'</span>,<span class=\"attr\">age</span>:<span class=\"number\">46</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,<span class=\"attr\">age</span>:<span class=\"number\">54</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> adult = persons.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span>item.age &gt;=<span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(adult)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">Array.prototype.reducereduce 方法对调用数组的每个元素执行回调函数，最后生成一个单一的值并返回。</span></span><br><span class=\"line\"><span class=\"comment\"> reduce 方法接受两个参数：1）reducer 函数（回调），2）一个可选的 initialValue。</span></span><br><span class=\"line\"><span class=\"comment\"> reducer 函数（回调）接受四个参数：accumulator，currentValue，currentIndex，sourceArray。</span></span><br><span class=\"line\"><span class=\"comment\"> 如果提供了 initialValue，则累加器将等于 initialValue，currentValue 将等于数组中的第一个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> 如果没有提供 initialValue，则累加器将等于数组中的第一个元素，currentValue 将等于数组中的第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">//假设我们要对一个数字数组的求和：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> total = sum.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a+b)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">每次对数组中的某个值调用 reducer 函数，</span></span><br><span class=\"line\"><span class=\"comment\">累加器都会保留上一次 reducer 函数操作返回的结果，</span></span><br><span class=\"line\"><span class=\"comment\">并将 currentValue 设置为数组的当前值。 </span></span><br><span class=\"line\"><span class=\"comment\">最后把结果存储在 sum 变量中。</span></span><br><span class=\"line\"><span class=\"comment\">我们还可以为它提供初始值：</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ;i &lt;num.length;i++) &#123;</span><br><span class=\"line\">    total +=num[i]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//reduce</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> total = num.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span>&#123;<span class=\"keyword\">return</span> a+b&#125;,<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">我们假设 JavaScript 没有原生的 map 方法。</span></span><br><span class=\"line\"><span class=\"comment\">我们可以自己构建它，从而创建我们自己的高阶函数。 </span></span><br><span class=\"line\"><span class=\"comment\">假设我们有一个字符串数组，我们希望把它转换为整数数组，其中每个元素代表原始数组中字符串的长度。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> strArray = [<span class=\"string\">'javascript'</span>,<span class=\"string\">'python'</span>,<span class=\"string\">'php'</span>,<span class=\"string\">'java'</span>,<span class=\"string\">'c'</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapEach</span>(<span class=\"params\">arr,fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt;arr.length;i++) &#123;</span><br><span class=\"line\">        num.push(fn(arr[i]))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> strLength = strArray.mapEach(<span class=\"function\">(<span class=\"params\">strArray,(</span>)=&gt;</span>))</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greentng</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greentng() <span class=\"comment\">//hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">greentng.lang = <span class=\"string\">'English'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greentng.lang) <span class=\"comment\">//English</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以在 JavaScript 中将函数赋值给变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> total = square;</span><br><span class=\"line\">total(<span class=\"number\">4</span>)  <span class=\"comment\">//8</span></span><br><span class=\"line\"><span class=\"comment\">//将函数作为参数传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">format</span>(<span class=\"params\">type, one, two</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == <span class=\"string\">'oneCase'</span>) &#123;</span><br><span class=\"line\">        one()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == <span class=\"string\">'twoCase'</span>) &#123;</span><br><span class=\"line\">        two()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">one</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is one'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">two</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is two'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">format(<span class=\"string\">'oneCase'</span>, one, two)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">高阶函数是对其他函数进行操作的函数，操作可以是将它们作为参数，或者是返回它们。</span></span><br><span class=\"line\"><span class=\"comment\"> 简单来说，高阶函数是一个接收函数作为参数或将函数作为输出返回的函数。</span></span><br><span class=\"line\"><span class=\"comment\"> 例如，Array.prototype.map，Array.prototype.filter 和 Array.prototype.reduce 是语言中内置的一些高阶函数。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">Array.prototype.map</span></span><br><span class=\"line\"><span class=\"comment\">map() 方法通过调用对输入数组中每个元素调用回调函数来创建一个新数组。</span></span><br><span class=\"line\"><span class=\"comment\">map() 方法将获取回调函数中的每个返回值，并使用这些值创建一个新数组。</span></span><br><span class=\"line\"><span class=\"comment\">传递给 map() 方法的回调函数接受 3 个参数：element，index 和 array。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; num.length; i++) &#123;</span><br><span class=\"line\">    arr.push(num[i] * <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = num.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item * <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//假设我们有一个包含不同人的出生年份的数组，我们想要创建一个包含其年龄的数组。 例如：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> year = [<span class=\"number\">1993</span>, <span class=\"number\">1923</span>, <span class=\"number\">1983</span>, <span class=\"number\">1990</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; year.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> change = <span class=\"number\">2018</span> - year[i]</span><br><span class=\"line\">    age.push(change)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> year = [<span class=\"number\">1993</span>, <span class=\"number\">1923</span>, <span class=\"number\">1983</span>, <span class=\"number\">1990</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = year.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"number\">2018</span>-item)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">Array.prototype.filter</span></span><br><span class=\"line\"><span class=\"comment\">filter() 方法会创建一个新数组，其中包含所有通过回调函数测试的元素。</span></span><br><span class=\"line\"><span class=\"comment\"> 传递给 filter() 方法的回调函数接受3个参数：element，index 和 array。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//假设我们有一个包含名称和年龄属性的对象数组。 我们想要创建一个只包含成年人（年龄大于或等于18）的数组。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> persons = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'peter'</span>,<span class=\"attr\">age</span>:<span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'lele'</span>,<span class=\"attr\">age</span>:<span class=\"number\">26</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'shaun'</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'tony'</span>,<span class=\"attr\">age</span>:<span class=\"number\">46</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,<span class=\"attr\">age</span>:<span class=\"number\">54</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> adult = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ;i &lt;persons.length;i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(persons[i].age &gt;=<span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">        adult.push(persons[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(adult)</span><br><span class=\"line\"><span class=\"comment\">//filter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> persons = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'peter'</span>,<span class=\"attr\">age</span>:<span class=\"number\">16</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'lele'</span>,<span class=\"attr\">age</span>:<span class=\"number\">26</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'shaun'</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'tony'</span>,<span class=\"attr\">age</span>:<span class=\"number\">46</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'jack'</span>,<span class=\"attr\">age</span>:<span class=\"number\">54</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> adult = persons.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span>item.age &gt;=<span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(adult)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">Array.prototype.reducereduce 方法对调用数组的每个元素执行回调函数，最后生成一个单一的值并返回。</span></span><br><span class=\"line\"><span class=\"comment\"> reduce 方法接受两个参数：1）reducer 函数（回调），2）一个可选的 initialValue。</span></span><br><span class=\"line\"><span class=\"comment\"> reducer 函数（回调）接受四个参数：accumulator，currentValue，currentIndex，sourceArray。</span></span><br><span class=\"line\"><span class=\"comment\"> 如果提供了 initialValue，则累加器将等于 initialValue，currentValue 将等于数组中的第一个元素。</span></span><br><span class=\"line\"><span class=\"comment\"> 如果没有提供 initialValue，则累加器将等于数组中的第一个元素，currentValue 将等于数组中的第二个元素。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">//假设我们要对一个数字数组的求和：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> total = sum.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a+b)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">每次对数组中的某个值调用 reducer 函数，</span></span><br><span class=\"line\"><span class=\"comment\">累加器都会保留上一次 reducer 函数操作返回的结果，</span></span><br><span class=\"line\"><span class=\"comment\">并将 currentValue 设置为数组的当前值。 </span></span><br><span class=\"line\"><span class=\"comment\">最后把结果存储在 sum 变量中。</span></span><br><span class=\"line\"><span class=\"comment\">我们还可以为它提供初始值：</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ;i &lt;num.length;i++) &#123;</span><br><span class=\"line\">    total +=num[i]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//reduce</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> total = num.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span>&#123;<span class=\"keyword\">return</span> a+b&#125;,<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">我们假设 JavaScript 没有原生的 map 方法。</span></span><br><span class=\"line\"><span class=\"comment\">我们可以自己构建它，从而创建我们自己的高阶函数。 </span></span><br><span class=\"line\"><span class=\"comment\">假设我们有一个字符串数组，我们希望把它转换为整数数组，其中每个元素代表原始数组中字符串的长度。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> strArray = [<span class=\"string\">'javascript'</span>,<span class=\"string\">'python'</span>,<span class=\"string\">'php'</span>,<span class=\"string\">'java'</span>,<span class=\"string\">'c'</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapEach</span>(<span class=\"params\">arr,fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> num = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt;arr.length;i++) &#123;</span><br><span class=\"line\">        num.push(fn(arr[i]))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> strLength = strArray.mapEach(<span class=\"function\">(<span class=\"params\">strArray,(</span>)=&gt;</span>))</span><br></pre></td></tr></table></figure>"},{"title":"Mac 终端中用指定文本编辑器打开选中文件","date":"2017-04-30T16:00:00.000Z","_content":"\n之前每次用`terminal`打开文件都是`open .` 打开父文件夹然后用编辑器打开要打开的文件，或者`cat`查看当前文件内容。很不舒服，于是，就开始研究命令，果不其然，真的有办法\n```\nopen -t index.html\nopen -e inex.html\nopen -a WebStorm index.html\n```\n- `-t`使用默认编辑器打开\n- `-e`文本编辑器打开\n- `-a`指定应用","source":"_posts/mac编辑器.md","raw":"---\ntitle: Mac 终端中用指定文本编辑器打开选中文件\ndate: 2017-05-01\ncategories: tools\ntags: [编程,学习]\n---\n\n之前每次用`terminal`打开文件都是`open .` 打开父文件夹然后用编辑器打开要打开的文件，或者`cat`查看当前文件内容。很不舒服，于是，就开始研究命令，果不其然，真的有办法\n```\nopen -t index.html\nopen -e inex.html\nopen -a WebStorm index.html\n```\n- `-t`使用默认编辑器打开\n- `-e`文本编辑器打开\n- `-a`指定应用","slug":"mac编辑器","published":1,"updated":"2021-07-01T07:30:54.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuer0024zgsyalnhzv4q","content":"<p>之前每次用<code>terminal</code>打开文件都是<code>open .</code> 打开父文件夹然后用编辑器打开要打开的文件，或者<code>cat</code>查看当前文件内容。很不舒服，于是，就开始研究命令，果不其然，真的有办法<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open -t index.html</span><br><span class=\"line\">open -e inex.html</span><br><span class=\"line\">open -<span class=\"selector-tag\">a</span> WebStorm index.html</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>-t</code>使用默认编辑器打开</li>\n<li><code>-e</code>文本编辑器打开</li>\n<li><code>-a</code>指定应用</li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>之前每次用<code>terminal</code>打开文件都是<code>open .</code> 打开父文件夹然后用编辑器打开要打开的文件，或者<code>cat</code>查看当前文件内容。很不舒服，于是，就开始研究命令，果不其然，真的有办法<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open -t index.html</span><br><span class=\"line\">open -e inex.html</span><br><span class=\"line\">open -<span class=\"selector-tag\">a</span> WebStorm index.html</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>-t</code>使用默认编辑器打开</li>\n<li><code>-e</code>文本编辑器打开</li>\n<li><code>-a</code>指定应用</li>\n</ul>\n"},{"title":"rgb转化为16进制","_content":"\n\n项目中有个需求是写一个颜色选择器，默认有16个色块可以点击，用户也可以自己输入6位16进制字符，然后动态的给显示用户所输入的颜色。\n我采用的是vue的`:class`和`:style`去完成这个需求。\n做完之后，发现一个很尴尬的问题，如果我在输入框输入过值，那么他一定会覆盖clss的样式，也就是说，即使我点击色块，颜色也不会出现，于是想到一个解决办法，就是当我点击色块的时候，将色块的颜色值显示到输入框中。\n那么。如何获取到class中的css样式呢？？\n我采用了jquery的方法\n```java\nvar color = $(`.${item.color}`).css('backgroundColor') //获取到颜色值\n```\n额。。。获取到的竟然是个rgb().......转换起来\n```java\n    var rgb = a.split(',');  //将三个数值获取出\n    var r = parseInt(rgb[0].split('(')[1]);//第一个值\n    var g = parseInt(rgb[1]);//第二个值\n    var b = parseInt(rgb[2].split(')')[0]);//第三个值\n    var hex = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n```\n原谅我没有把他封装起来。。。。。\n最后的`hex`就是rgb转换后的结果，也就是一个十六进制的色值。\n呼呼~~一定有比这个更简单的方法吧，思考中。。。","source":"_posts/rgb转为16进制.md","raw":"---\ntitle: rgb转化为16进制\ncategories: js\ntags: [编程,学习]\n---\n\n\n项目中有个需求是写一个颜色选择器，默认有16个色块可以点击，用户也可以自己输入6位16进制字符，然后动态的给显示用户所输入的颜色。\n我采用的是vue的`:class`和`:style`去完成这个需求。\n做完之后，发现一个很尴尬的问题，如果我在输入框输入过值，那么他一定会覆盖clss的样式，也就是说，即使我点击色块，颜色也不会出现，于是想到一个解决办法，就是当我点击色块的时候，将色块的颜色值显示到输入框中。\n那么。如何获取到class中的css样式呢？？\n我采用了jquery的方法\n```java\nvar color = $(`.${item.color}`).css('backgroundColor') //获取到颜色值\n```\n额。。。获取到的竟然是个rgb().......转换起来\n```java\n    var rgb = a.split(',');  //将三个数值获取出\n    var r = parseInt(rgb[0].split('(')[1]);//第一个值\n    var g = parseInt(rgb[1]);//第二个值\n    var b = parseInt(rgb[2].split(')')[0]);//第三个值\n    var hex = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n```\n原谅我没有把他封装起来。。。。。\n最后的`hex`就是rgb转换后的结果，也就是一个十六进制的色值。\n呼呼~~一定有比这个更简单的方法吧，思考中。。。","slug":"rgb转为16进制","published":1,"date":"2021-07-01T07:30:54.550Z","updated":"2021-07-01T07:30:54.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuet0027zgsyge1f6401","content":"<p>项目中有个需求是写一个颜色选择器，默认有16个色块可以点击，用户也可以自己输入6位16进制字符，然后动态的给显示用户所输入的颜色。<br>我采用的是vue的<code>:class</code>和<code>:style</code>去完成这个需求。<br>做完之后，发现一个很尴尬的问题，如果我在输入框输入过值，那么他一定会覆盖clss的样式，也就是说，即使我点击色块，颜色也不会出现，于是想到一个解决办法，就是当我点击色块的时候，将色块的颜色值显示到输入框中。<br>那么。如何获取到class中的css样式呢？？<br>我采用了jquery的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var color = $(`.$&#123;item.color&#125;`).css(<span class=\"string\">'backgroundColor'</span>) <span class=\"comment\">//获取到颜色值</span></span><br></pre></td></tr></table></figure></p>\n<p>额。。。获取到的竟然是个rgb()…….转换起来<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var rgb = a.split(<span class=\"string\">','</span>);  <span class=\"comment\">//将三个数值获取出</span></span><br><span class=\"line\">var r = parseInt(rgb[<span class=\"number\">0</span>].split(<span class=\"string\">'('</span>)[<span class=\"number\">1</span>]);<span class=\"comment\">//第一个值</span></span><br><span class=\"line\">var g = parseInt(rgb[<span class=\"number\">1</span>]);<span class=\"comment\">//第二个值</span></span><br><span class=\"line\">var b = parseInt(rgb[<span class=\"number\">2</span>].split(<span class=\"string\">')'</span>)[<span class=\"number\">0</span>]);<span class=\"comment\">//第三个值</span></span><br><span class=\"line\">var hex = <span class=\"string\">\"#\"</span> + ((<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">24</span>) + (r &lt;&lt; <span class=\"number\">16</span>) + (g &lt;&lt; <span class=\"number\">8</span>) + b).toString(<span class=\"number\">16</span>).slice(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>原谅我没有把他封装起来。。。。。<br>最后的<code>hex</code>就是rgb转换后的结果，也就是一个十六进制的色值。<br>呼呼~~一定有比这个更简单的方法吧，思考中。。。</p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>项目中有个需求是写一个颜色选择器，默认有16个色块可以点击，用户也可以自己输入6位16进制字符，然后动态的给显示用户所输入的颜色。<br>我采用的是vue的<code>:class</code>和<code>:style</code>去完成这个需求。<br>做完之后，发现一个很尴尬的问题，如果我在输入框输入过值，那么他一定会覆盖clss的样式，也就是说，即使我点击色块，颜色也不会出现，于是想到一个解决办法，就是当我点击色块的时候，将色块的颜色值显示到输入框中。<br>那么。如何获取到class中的css样式呢？？<br>我采用了jquery的方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var color = $(`.$&#123;item.color&#125;`).css(<span class=\"string\">'backgroundColor'</span>) <span class=\"comment\">//获取到颜色值</span></span><br></pre></td></tr></table></figure></p>\n<p>额。。。获取到的竟然是个rgb()…….转换起来<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var rgb = a.split(<span class=\"string\">','</span>);  <span class=\"comment\">//将三个数值获取出</span></span><br><span class=\"line\">var r = parseInt(rgb[<span class=\"number\">0</span>].split(<span class=\"string\">'('</span>)[<span class=\"number\">1</span>]);<span class=\"comment\">//第一个值</span></span><br><span class=\"line\">var g = parseInt(rgb[<span class=\"number\">1</span>]);<span class=\"comment\">//第二个值</span></span><br><span class=\"line\">var b = parseInt(rgb[<span class=\"number\">2</span>].split(<span class=\"string\">')'</span>)[<span class=\"number\">0</span>]);<span class=\"comment\">//第三个值</span></span><br><span class=\"line\">var hex = <span class=\"string\">\"#\"</span> + ((<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">24</span>) + (r &lt;&lt; <span class=\"number\">16</span>) + (g &lt;&lt; <span class=\"number\">8</span>) + b).toString(<span class=\"number\">16</span>).slice(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>原谅我没有把他封装起来。。。。。<br>最后的<code>hex</code>就是rgb转换后的结果，也就是一个十六进制的色值。<br>呼呼~~一定有比这个更简单的方法吧，思考中。。。</p>\n"},{"title":"vue-slot","date":"2017-04-30T16:00:00.000Z","_content":"\n```javascript\n//goods.vue\n<span slot=\"A\">啦啦啦</span>\n<span slot=\"B\">嘿嘿嘿</span>\n\n//list.vue\n<slot name=\"A\"></slot>\n<slot name=\"B\"></slot>\n```","source":"_posts/slot.md","raw":"---\ntitle: vue-slot\ndate: 2017-05-01\ncategories: vue\ntags: [编程,学习]\n---\n\n```javascript\n//goods.vue\n<span slot=\"A\">啦啦啦</span>\n<span slot=\"B\">嘿嘿嘿</span>\n\n//list.vue\n<slot name=\"A\"></slot>\n<slot name=\"B\"></slot>\n```","slug":"slot","published":1,"updated":"2021-07-01T07:30:54.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuev002bzgsyn6tkiry6","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//goods.vue</span></span><br><span class=\"line\">&lt;span slot=<span class=\"string\">\"A\"</span>&gt;啦啦啦&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;span slot=\"B\"&gt;嘿嘿嘿&lt;/</span>span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//list.vue</span></span><br><span class=\"line\">&lt;slot name=<span class=\"string\">\"A\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br><span class=\"line\">&lt;slot name=<span class=\"string\">\"B\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//goods.vue</span></span><br><span class=\"line\">&lt;span slot=<span class=\"string\">\"A\"</span>&gt;啦啦啦&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;span slot=\"B\"&gt;嘿嘿嘿&lt;/</span>span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//list.vue</span></span><br><span class=\"line\">&lt;slot name=<span class=\"string\">\"A\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br><span class=\"line\">&lt;slot name=<span class=\"string\">\"B\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br></pre></td></tr></table></figure>"},{"title":"title","date":"2019-06-24T11:09:11.000Z","_content":"test","source":"_posts/title.md","raw":"---\ntitle: title\ndate: 2019-06-24 19:09:11\ntags:\n---\ntest","slug":"title","published":1,"updated":"2021-07-01T07:30:54.551Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuew002fzgsy12nxbqap","content":"<p>test</p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>test</p>\n"},{"title":"this","date":"2017-12-02T07:33:03.000Z","_content":"##### this\n```javascript   \n    function identify() {\n        return this.name.toUpperCase(this)\n    }\n    function speak() {\n        var greeting = 'hello' + identify.call(this)\n        console.log(greeting)\n    }\n    var me = {\n        name:'lele'\n    }\n    var you = {\n        name:'tom'\n    }\n    identify.call(me)\n    identify.call(you)\n\n    speak.call(me)\n    speak.call(you)\n    //这段代码可以在不同的上下文对象(me 和 you)中重复使用函数 identify() 和 speak()， 不用针对每个对象编写不同版本的函数。\n\n\n\n    //如果不使用 this，那就需要给 identify() 和 speak() 显式传入一个上下文对象。\n\n    function identify(context) {\n        return context.name.toUpperCase()\n    }\n    function speak(context) {\n        var green = 'hello' + identify(context)\n        console.log(green)\n    }\n    identify(me)\n    identify(you)\n\n\n\n\n\n    function nums(i) {\n        console.log('nums' + i );\n        this.count++\n    }\n    foo.count = 0;\n    for(var i = 0; i<10;i++) {\n        if(i > 5) {\n            nums(i)\n        }\n    }\n    console.log(nums.count)\n\n\n    function nums(i) {\n        console.log('nums' + i)\n        data.count++\n    }\n    var data = {\n        count : 0\n    }\n    for(var i = 0; i< 10;i++) {\n        if(i<5) {\n            nums(i)\n        }\n    }\n    console.log(data.count)\n\n\n    //如果要从函数对象内部引用它自身，那只使用 this 是不够的。一般来说你需要通过一个指 向函数对象的词法标识符(变量)来引用它。\n    function foo() {\n        foo.count = 4; //foo指向它自身\n    }\n    setTimeout(function() {\n        // 匿名(没有名字的)函数无法指向自身\n    },10)\n//第一个函数被称为具名函数，在它内部可以使用 foo 来引用自身。\n//但是在第二个例子中，传入 setTimeout(..) 的回调函数没有名称标识符(这种函数被称为 匿名函数)，因此无法从函数内部引用自身。\n\n\n//使用 foo 标识符替代 this 来引用函数 对象:\nfunction foo(num) {\n    console.log('foo' + num)\n    foo.count++;\n}\nfoo.count = 0;\nfor(var i = 0; i < 10; i++) {\n    if(i > 5) {\n        foo(i)\n    }\n}\n```\n- 强制this指向foo函数对象\n```javascript\nfunction foo(num) {\n    console.log('num' + num)\n    this.count++\n}\nfoo.count = 0;\nfor(var i = 0; i < 10; i++) {\n    if(i > 5) {\n        foo.call(foo,i)\n    }\n}\n```","source":"_posts/this.md","raw":"---\ntitle: this\ndate: 2017-12-02 15:33:03\ncategories: js\ntags: [编程,学习]\n---\n##### this\n```javascript   \n    function identify() {\n        return this.name.toUpperCase(this)\n    }\n    function speak() {\n        var greeting = 'hello' + identify.call(this)\n        console.log(greeting)\n    }\n    var me = {\n        name:'lele'\n    }\n    var you = {\n        name:'tom'\n    }\n    identify.call(me)\n    identify.call(you)\n\n    speak.call(me)\n    speak.call(you)\n    //这段代码可以在不同的上下文对象(me 和 you)中重复使用函数 identify() 和 speak()， 不用针对每个对象编写不同版本的函数。\n\n\n\n    //如果不使用 this，那就需要给 identify() 和 speak() 显式传入一个上下文对象。\n\n    function identify(context) {\n        return context.name.toUpperCase()\n    }\n    function speak(context) {\n        var green = 'hello' + identify(context)\n        console.log(green)\n    }\n    identify(me)\n    identify(you)\n\n\n\n\n\n    function nums(i) {\n        console.log('nums' + i );\n        this.count++\n    }\n    foo.count = 0;\n    for(var i = 0; i<10;i++) {\n        if(i > 5) {\n            nums(i)\n        }\n    }\n    console.log(nums.count)\n\n\n    function nums(i) {\n        console.log('nums' + i)\n        data.count++\n    }\n    var data = {\n        count : 0\n    }\n    for(var i = 0; i< 10;i++) {\n        if(i<5) {\n            nums(i)\n        }\n    }\n    console.log(data.count)\n\n\n    //如果要从函数对象内部引用它自身，那只使用 this 是不够的。一般来说你需要通过一个指 向函数对象的词法标识符(变量)来引用它。\n    function foo() {\n        foo.count = 4; //foo指向它自身\n    }\n    setTimeout(function() {\n        // 匿名(没有名字的)函数无法指向自身\n    },10)\n//第一个函数被称为具名函数，在它内部可以使用 foo 来引用自身。\n//但是在第二个例子中，传入 setTimeout(..) 的回调函数没有名称标识符(这种函数被称为 匿名函数)，因此无法从函数内部引用自身。\n\n\n//使用 foo 标识符替代 this 来引用函数 对象:\nfunction foo(num) {\n    console.log('foo' + num)\n    foo.count++;\n}\nfoo.count = 0;\nfor(var i = 0; i < 10; i++) {\n    if(i > 5) {\n        foo(i)\n    }\n}\n```\n- 强制this指向foo函数对象\n```javascript\nfunction foo(num) {\n    console.log('num' + num)\n    this.count++\n}\nfoo.count = 0;\nfor(var i = 0; i < 10; i++) {\n    if(i > 5) {\n        foo.call(foo,i)\n    }\n}\n```","slug":"this","published":1,"updated":"2021-07-02T11:29:29.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuey002izgsy8sib4vaq","content":"<h5 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identify</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name.toUpperCase(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> greeting = <span class=\"string\">'hello'</span> + identify.call(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(greeting)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> me = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'lele'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> you = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'tom'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    identify.call(me)</span><br><span class=\"line\">    identify.call(you)</span><br><span class=\"line\"></span><br><span class=\"line\">    speak.call(me)</span><br><span class=\"line\">    speak.call(you)</span><br><span class=\"line\">    <span class=\"comment\">//这段代码可以在不同的上下文对象(me 和 you)中重复使用函数 identify() 和 speak()， 不用针对每个对象编写不同版本的函数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果不使用 this，那就需要给 identify() 和 speak() 显式传入一个上下文对象。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identify</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> context.name.toUpperCase()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> green = <span class=\"string\">'hello'</span> + identify(context)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(green)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    identify(me)</span><br><span class=\"line\">    identify(you)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nums</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'nums'</span> + i );</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    foo.count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            nums(i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(nums.count)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nums</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'nums'</span> + i)</span><br><span class=\"line\">        data.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">        count : <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt; <span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            nums(i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.count)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果要从函数对象内部引用它自身，那只使用 this 是不够的。一般来说你需要通过一个指 向函数对象的词法标识符(变量)来引用它。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        foo.count = <span class=\"number\">4</span>; <span class=\"comment\">//foo指向它自身</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 匿名(没有名字的)函数无法指向自身</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">//第一个函数被称为具名函数，在它内部可以使用 foo 来引用自身。</span></span><br><span class=\"line\"><span class=\"comment\">//但是在第二个例子中，传入 setTimeout(..) 的回调函数没有名称标识符(这种函数被称为 匿名函数)，因此无法从函数内部引用自身。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用 foo 标识符替代 this 来引用函数 对象:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span> + num)</span><br><span class=\"line\">    foo.count++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">        foo(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>强制this指向foo函数对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'num'</span> + num)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.count++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">        foo.call(foo,i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<h5 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identify</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name.toUpperCase(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> greeting = <span class=\"string\">'hello'</span> + identify.call(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(greeting)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> me = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'lele'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> you = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'tom'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    identify.call(me)</span><br><span class=\"line\">    identify.call(you)</span><br><span class=\"line\"></span><br><span class=\"line\">    speak.call(me)</span><br><span class=\"line\">    speak.call(you)</span><br><span class=\"line\">    <span class=\"comment\">//这段代码可以在不同的上下文对象(me 和 you)中重复使用函数 identify() 和 speak()， 不用针对每个对象编写不同版本的函数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果不使用 this，那就需要给 identify() 和 speak() 显式传入一个上下文对象。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identify</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> context.name.toUpperCase()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">speak</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> green = <span class=\"string\">'hello'</span> + identify(context)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(green)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    identify(me)</span><br><span class=\"line\">    identify(you)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nums</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'nums'</span> + i );</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    foo.count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            nums(i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(nums.count)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nums</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'nums'</span> + i)</span><br><span class=\"line\">        data.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">        count : <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt; <span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            nums(i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.count)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果要从函数对象内部引用它自身，那只使用 this 是不够的。一般来说你需要通过一个指 向函数对象的词法标识符(变量)来引用它。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        foo.count = <span class=\"number\">4</span>; <span class=\"comment\">//foo指向它自身</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 匿名(没有名字的)函数无法指向自身</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">//第一个函数被称为具名函数，在它内部可以使用 foo 来引用自身。</span></span><br><span class=\"line\"><span class=\"comment\">//但是在第二个例子中，传入 setTimeout(..) 的回调函数没有名称标识符(这种函数被称为 匿名函数)，因此无法从函数内部引用自身。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用 foo 标识符替代 this 来引用函数 对象:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span> + num)</span><br><span class=\"line\">    foo.count++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">        foo(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>强制this指向foo函数对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'num'</span> + num)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.count++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo.count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">        foo.call(foo,i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"tab切换","date":"2018-04-02T07:33:03.000Z","_content":"使用javascript和jquery编写tab切换,使用jquery编写列表切换\n```javascript\n// javascript\nfunction $(id) {\n    return typeof id == 'string' ? document.getElementById(id) : id\n}\nwindow.onload = function () {\n    var titleName = $('tab-title').getelementsByTagName('li')\n    var tabContent = $('tab-content').getelementsByTagName('div')\n    if (titleName.length != tabContent.length) {\n        return\n    }\n    for (var i = 0; i < titleName.length; i++) {\n        titleName[i].id = i;\n        titleName[i].onmouseover = function () {\n            for (var j = 0; j < titleName.length; j++) {\n                titleName[j].className = ''\n                titleName[j].style.display = 'none'\n            }\n            this.className = 'select'\n            tabContent[this.id].style.display = 'block'\n        }\n    }\n}\n\n```\n\n```javascript   \n//jquery方法添加个定时器\nvar timer;\n$(function () {\n    $('#tabfirst li').each(function (index) {\n        var liNode = $(this)\n        $(this).mouseover(function () {\n            timer = setTimeout(() => {\n                $('div.content').removeClass('content')\n                $('#tabfirst li.tabin').removeClass('tabin')\n                $('div').eq(index).addClass('content')\n                liNode.addClass('tabin')\n            }, 300);\n        }).mouseout(function () {\n            clearTimeout(timer)\n        })\n    })\n})()\n```\n\n```javascript   \n$(function () {\n    $('.list-1').bind('click', function () {\n        $('.list-1').css('backgroundPosition', '0px -26px')\n        $('.list-2').css('backgroundPosition', '-30px -26px')\n        $('changeList').children().removeClass('list-1-0').addClass('list-2-v')\n\n    })\n    $('.list-2').bind('click', function () {\n        $('.list-1').css('backgroundPosition', '0px 0px')\n        $('.list-2').css('backgroundPosition', '-30px 0px')\n        $('changeList').children().removeClass('list-2-v').addClass('list-1-0')\n\n    })\n})()\n```","source":"_posts/tab切换.md","raw":"---\ntitle: tab切换\ncategories: js\ndate: 2018-04-02 15:33:03\ntags: [编程,功能]\n---\n使用javascript和jquery编写tab切换,使用jquery编写列表切换\n```javascript\n// javascript\nfunction $(id) {\n    return typeof id == 'string' ? document.getElementById(id) : id\n}\nwindow.onload = function () {\n    var titleName = $('tab-title').getelementsByTagName('li')\n    var tabContent = $('tab-content').getelementsByTagName('div')\n    if (titleName.length != tabContent.length) {\n        return\n    }\n    for (var i = 0; i < titleName.length; i++) {\n        titleName[i].id = i;\n        titleName[i].onmouseover = function () {\n            for (var j = 0; j < titleName.length; j++) {\n                titleName[j].className = ''\n                titleName[j].style.display = 'none'\n            }\n            this.className = 'select'\n            tabContent[this.id].style.display = 'block'\n        }\n    }\n}\n\n```\n\n```javascript   \n//jquery方法添加个定时器\nvar timer;\n$(function () {\n    $('#tabfirst li').each(function (index) {\n        var liNode = $(this)\n        $(this).mouseover(function () {\n            timer = setTimeout(() => {\n                $('div.content').removeClass('content')\n                $('#tabfirst li.tabin').removeClass('tabin')\n                $('div').eq(index).addClass('content')\n                liNode.addClass('tabin')\n            }, 300);\n        }).mouseout(function () {\n            clearTimeout(timer)\n        })\n    })\n})()\n```\n\n```javascript   \n$(function () {\n    $('.list-1').bind('click', function () {\n        $('.list-1').css('backgroundPosition', '0px -26px')\n        $('.list-2').css('backgroundPosition', '-30px -26px')\n        $('changeList').children().removeClass('list-1-0').addClass('list-2-v')\n\n    })\n    $('.list-2').bind('click', function () {\n        $('.list-1').css('backgroundPosition', '0px 0px')\n        $('.list-2').css('backgroundPosition', '-30px 0px')\n        $('changeList').children().removeClass('list-2-v').addClass('list-1-0')\n\n    })\n})()\n```","slug":"tab切换","published":1,"updated":"2021-07-02T11:29:29.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuf0002mzgsynrn5q6it","content":"<p>使用javascript和jquery编写tab切换,使用jquery编写列表切换<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// javascript</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> id == <span class=\"string\">'string'</span> ? <span class=\"built_in\">document</span>.getElementById(id) : id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> titleName = $(<span class=\"string\">'tab-title'</span>).getelementsByTagName(<span class=\"string\">'li'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tabContent = $(<span class=\"string\">'tab-content'</span>).getelementsByTagName(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (titleName.length != tabContent.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; titleName.length; i++) &#123;</span><br><span class=\"line\">        titleName[i].id = i;</span><br><span class=\"line\">        titleName[i].onmouseover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; titleName.length; j++) &#123;</span><br><span class=\"line\">                titleName[j].className = <span class=\"string\">''</span></span><br><span class=\"line\">                titleName[j].style.display = <span class=\"string\">'none'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.className = <span class=\"string\">'select'</span></span><br><span class=\"line\">            tabContent[<span class=\"keyword\">this</span>.id].style.display = <span class=\"string\">'block'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jquery方法添加个定时器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#tabfirst li'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> liNode = $(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        $(<span class=\"keyword\">this</span>).mouseover(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                $(<span class=\"string\">'div.content'</span>).removeClass(<span class=\"string\">'content'</span>)</span><br><span class=\"line\">                $(<span class=\"string\">'#tabfirst li.tabin'</span>).removeClass(<span class=\"string\">'tabin'</span>)</span><br><span class=\"line\">                $(<span class=\"string\">'div'</span>).eq(index).addClass(<span class=\"string\">'content'</span>)</span><br><span class=\"line\">                liNode.addClass(<span class=\"string\">'tabin'</span>)</span><br><span class=\"line\">            &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125;).mouseout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.list-1'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'.list-1'</span>).css(<span class=\"string\">'backgroundPosition'</span>, <span class=\"string\">'0px -26px'</span>)</span><br><span class=\"line\">        $(<span class=\"string\">'.list-2'</span>).css(<span class=\"string\">'backgroundPosition'</span>, <span class=\"string\">'-30px -26px'</span>)</span><br><span class=\"line\">        $(<span class=\"string\">'changeList'</span>).children().removeClass(<span class=\"string\">'list-1-0'</span>).addClass(<span class=\"string\">'list-2-v'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    $(<span class=\"string\">'.list-2'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'.list-1'</span>).css(<span class=\"string\">'backgroundPosition'</span>, <span class=\"string\">'0px 0px'</span>)</span><br><span class=\"line\">        $(<span class=\"string\">'.list-2'</span>).css(<span class=\"string\">'backgroundPosition'</span>, <span class=\"string\">'-30px 0px'</span>)</span><br><span class=\"line\">        $(<span class=\"string\">'changeList'</span>).children().removeClass(<span class=\"string\">'list-2-v'</span>).addClass(<span class=\"string\">'list-1-0'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>使用javascript和jquery编写tab切换,使用jquery编写列表切换<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// javascript</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> id == <span class=\"string\">'string'</span> ? <span class=\"built_in\">document</span>.getElementById(id) : id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> titleName = $(<span class=\"string\">'tab-title'</span>).getelementsByTagName(<span class=\"string\">'li'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tabContent = $(<span class=\"string\">'tab-content'</span>).getelementsByTagName(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (titleName.length != tabContent.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; titleName.length; i++) &#123;</span><br><span class=\"line\">        titleName[i].id = i;</span><br><span class=\"line\">        titleName[i].onmouseover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; titleName.length; j++) &#123;</span><br><span class=\"line\">                titleName[j].className = <span class=\"string\">''</span></span><br><span class=\"line\">                titleName[j].style.display = <span class=\"string\">'none'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.className = <span class=\"string\">'select'</span></span><br><span class=\"line\">            tabContent[<span class=\"keyword\">this</span>.id].style.display = <span class=\"string\">'block'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jquery方法添加个定时器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer;</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#tabfirst li'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> liNode = $(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        $(<span class=\"keyword\">this</span>).mouseover(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                $(<span class=\"string\">'div.content'</span>).removeClass(<span class=\"string\">'content'</span>)</span><br><span class=\"line\">                $(<span class=\"string\">'#tabfirst li.tabin'</span>).removeClass(<span class=\"string\">'tabin'</span>)</span><br><span class=\"line\">                $(<span class=\"string\">'div'</span>).eq(index).addClass(<span class=\"string\">'content'</span>)</span><br><span class=\"line\">                liNode.addClass(<span class=\"string\">'tabin'</span>)</span><br><span class=\"line\">            &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125;).mouseout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            clearTimeout(timer)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'.list-1'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'.list-1'</span>).css(<span class=\"string\">'backgroundPosition'</span>, <span class=\"string\">'0px -26px'</span>)</span><br><span class=\"line\">        $(<span class=\"string\">'.list-2'</span>).css(<span class=\"string\">'backgroundPosition'</span>, <span class=\"string\">'-30px -26px'</span>)</span><br><span class=\"line\">        $(<span class=\"string\">'changeList'</span>).children().removeClass(<span class=\"string\">'list-1-0'</span>).addClass(<span class=\"string\">'list-2-v'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    $(<span class=\"string\">'.list-2'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'.list-1'</span>).css(<span class=\"string\">'backgroundPosition'</span>, <span class=\"string\">'0px 0px'</span>)</span><br><span class=\"line\">        $(<span class=\"string\">'.list-2'</span>).css(<span class=\"string\">'backgroundPosition'</span>, <span class=\"string\">'-30px 0px'</span>)</span><br><span class=\"line\">        $(<span class=\"string\">'changeList'</span>).children().removeClass(<span class=\"string\">'list-2-v'</span>).addClass(<span class=\"string\">'list-1-0'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>"},{"title":"vue-动态组件","date":"2018-12-27T16:00:00.000Z","_content":"\n让多个组件使用同一个挂载点，并动态切换，这就是动态组件。通过使用保留的 `<component>` 元素，动态地绑定到它的 `is`特性，我们让多个组件可以使用同一个挂载点，并动态切换。根据`v-bind:is=\"组件名\"`中的组件名去自动匹配组件，如果匹配不到则不显示。\n有一个功能需求，就是类似于官网上的动态组件的样子。点击会切换，在实现的过程中，有遇到问题，也请教了别人，记录下。\n\n```javascript\n// 两个子组件txt，file\nVue.component('txt',{\n    template:``,\n    methods:{\n// 子组件暴露给外界的值\ngetValue: function () {\n      return {\n        type: 'text',\n        content: this.inner\n      }\n    }\n    },\n    prop:[\"content\"]\n})\nVue.component('file',{\n    template:``,\n    methods:{\n// 子组件暴露给外界的值\ngetValue: function () {\n      return {\n        type: 'text',\n        content: this.filesName\n      }\n    }\n    },\n    prop:[\"content\"]\n})\n// 父组件调用子组件\n  <div class=\"despContainer\" v-for=\"(desp,index) in desps\">\n    <component :is=\"comps[desp.type]\" :content=\"desp\" :ref=\"'comp' + index\"/>\n</div>\n\n\n// desps的数据结构\n\n// props：\n// content:Object\n// inner:'xxx'\n// type:\"text\"\n\n\n// 父组件去循环，返回子组件暴露的值\nallDate() {\n    let data = [];\n    for(let comp in this.desps) {\n        const comIns = this.$refs['comp'+comp][0]\n        if(!comIns || typeof compIns.getValue !=='function'){\n            return\n        }\n        if(compIns.getValue()) {\n            data.push(compIns.getValue())\n        }\n    }\n    return data\n}\n\n// 调用\nlet introduces = this.fetchAllData()\n\n```\n\n- 如果子组件要调用父组件的方法，可以使用\\$emit()传值，v-on 监听\n\n```javascript\n\n<txt-component @check-title='checkTitle'/>\n\nthis.$emit('check-title', msg)\n\n```\n","source":"_posts/vue-动态组件.md","raw":"---\ntitle: vue-动态组件\ncategories: vue\ndate: 2018-12-28\ntags: [编程, 功能]\n---\n\n让多个组件使用同一个挂载点，并动态切换，这就是动态组件。通过使用保留的 `<component>` 元素，动态地绑定到它的 `is`特性，我们让多个组件可以使用同一个挂载点，并动态切换。根据`v-bind:is=\"组件名\"`中的组件名去自动匹配组件，如果匹配不到则不显示。\n有一个功能需求，就是类似于官网上的动态组件的样子。点击会切换，在实现的过程中，有遇到问题，也请教了别人，记录下。\n\n```javascript\n// 两个子组件txt，file\nVue.component('txt',{\n    template:``,\n    methods:{\n// 子组件暴露给外界的值\ngetValue: function () {\n      return {\n        type: 'text',\n        content: this.inner\n      }\n    }\n    },\n    prop:[\"content\"]\n})\nVue.component('file',{\n    template:``,\n    methods:{\n// 子组件暴露给外界的值\ngetValue: function () {\n      return {\n        type: 'text',\n        content: this.filesName\n      }\n    }\n    },\n    prop:[\"content\"]\n})\n// 父组件调用子组件\n  <div class=\"despContainer\" v-for=\"(desp,index) in desps\">\n    <component :is=\"comps[desp.type]\" :content=\"desp\" :ref=\"'comp' + index\"/>\n</div>\n\n\n// desps的数据结构\n\n// props：\n// content:Object\n// inner:'xxx'\n// type:\"text\"\n\n\n// 父组件去循环，返回子组件暴露的值\nallDate() {\n    let data = [];\n    for(let comp in this.desps) {\n        const comIns = this.$refs['comp'+comp][0]\n        if(!comIns || typeof compIns.getValue !=='function'){\n            return\n        }\n        if(compIns.getValue()) {\n            data.push(compIns.getValue())\n        }\n    }\n    return data\n}\n\n// 调用\nlet introduces = this.fetchAllData()\n\n```\n\n- 如果子组件要调用父组件的方法，可以使用\\$emit()传值，v-on 监听\n\n```javascript\n\n<txt-component @check-title='checkTitle'/>\n\nthis.$emit('check-title', msg)\n\n```\n","slug":"vue-动态组件","published":1,"updated":"2021-07-01T07:30:54.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuf1002pzgsy16pa1h2d","content":"<p>让多个组件使用同一个挂载点，并动态切换，这就是动态组件。通过使用保留的 <code>&lt;component&gt;</code> 元素，动态地绑定到它的 <code>is</code>特性，我们让多个组件可以使用同一个挂载点，并动态切换。根据<code>v-bind:is=&quot;组件名&quot;</code>中的组件名去自动匹配组件，如果匹配不到则不显示。<br>有一个功能需求，就是类似于官网上的动态组件的样子。点击会切换，在实现的过程中，有遇到问题，也请教了别人，记录下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 两个子组件txt，file</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'txt'</span>,&#123;</span><br><span class=\"line\">    template:<span class=\"string\">``</span>,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\"><span class=\"comment\">// 子组件暴露给外界的值</span></span><br><span class=\"line\">getValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'text'</span>,</span><br><span class=\"line\">        content: <span class=\"keyword\">this</span>.inner</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    prop:[<span class=\"string\">\"content\"</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Vue.component(<span class=\"string\">'file'</span>,&#123;</span><br><span class=\"line\">    template:<span class=\"string\">``</span>,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\"><span class=\"comment\">// 子组件暴露给外界的值</span></span><br><span class=\"line\">getValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'text'</span>,</span><br><span class=\"line\">        content: <span class=\"keyword\">this</span>.filesName</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    prop:[<span class=\"string\">\"content\"</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 父组件调用子组件</span></span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"despContainer\"</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(desp,index) in desps\"</span>&gt;</span><br><span class=\"line\">    &lt;component :is=<span class=\"string\">\"comps[desp.type]\"</span> :content=<span class=\"string\">\"desp\"</span> :ref=<span class=\"string\">\"'comp' + index\"</span>/&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ desps的数据结构</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ props：</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ content:Object</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ inner:'xxx'</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ type:\"text\"</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 父组件去循环，返回子组件暴露的值</span></span><br><span class=\"line\"><span class=\"regexp\">allDate() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    let data = [];</span></span><br><span class=\"line\"><span class=\"regexp\">    for(let comp in this.desps) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        const comIns = this.$refs['comp'+comp][0]</span></span><br><span class=\"line\"><span class=\"regexp\">        if(!comIns || typeof compIns.getValue !=='function')&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            return</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        if(compIns.getValue()) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            data.push(compIns.getValue())</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    return data</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 调用</span></span><br><span class=\"line\"><span class=\"regexp\">let introduces = this.fetchAllData()</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果子组件要调用父组件的方法，可以使用\\$emit()传值，v-on 监听</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;txt-component @check-title=<span class=\"string\">'checkTitle'</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">'check-title'</span>, msg)</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>让多个组件使用同一个挂载点，并动态切换，这就是动态组件。通过使用保留的 <code>&lt;component&gt;</code> 元素，动态地绑定到它的 <code>is</code>特性，我们让多个组件可以使用同一个挂载点，并动态切换。根据<code>v-bind:is=&quot;组件名&quot;</code>中的组件名去自动匹配组件，如果匹配不到则不显示。<br>有一个功能需求，就是类似于官网上的动态组件的样子。点击会切换，在实现的过程中，有遇到问题，也请教了别人，记录下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 两个子组件txt，file</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">'txt'</span>,&#123;</span><br><span class=\"line\">    template:<span class=\"string\">``</span>,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\"><span class=\"comment\">// 子组件暴露给外界的值</span></span><br><span class=\"line\">getValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'text'</span>,</span><br><span class=\"line\">        content: <span class=\"keyword\">this</span>.inner</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    prop:[<span class=\"string\">\"content\"</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Vue.component(<span class=\"string\">'file'</span>,&#123;</span><br><span class=\"line\">    template:<span class=\"string\">``</span>,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\"><span class=\"comment\">// 子组件暴露给外界的值</span></span><br><span class=\"line\">getValue: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'text'</span>,</span><br><span class=\"line\">        content: <span class=\"keyword\">this</span>.filesName</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    prop:[<span class=\"string\">\"content\"</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 父组件调用子组件</span></span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"despContainer\"</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(desp,index) in desps\"</span>&gt;</span><br><span class=\"line\">    &lt;component :is=<span class=\"string\">\"comps[desp.type]\"</span> :content=<span class=\"string\">\"desp\"</span> :ref=<span class=\"string\">\"'comp' + index\"</span>/&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ desps的数据结构</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ props：</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ content:Object</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ inner:'xxx'</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ type:\"text\"</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 父组件去循环，返回子组件暴露的值</span></span><br><span class=\"line\"><span class=\"regexp\">allDate() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    let data = [];</span></span><br><span class=\"line\"><span class=\"regexp\">    for(let comp in this.desps) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        const comIns = this.$refs['comp'+comp][0]</span></span><br><span class=\"line\"><span class=\"regexp\">        if(!comIns || typeof compIns.getValue !=='function')&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            return</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        if(compIns.getValue()) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            data.push(compIns.getValue())</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    return data</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 调用</span></span><br><span class=\"line\"><span class=\"regexp\">let introduces = this.fetchAllData()</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果子组件要调用父组件的方法，可以使用\\$emit()传值，v-on 监听</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;txt-component @check-title=<span class=\"string\">'checkTitle'</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$emit(<span class=\"string\">'check-title'</span>, msg)</span><br></pre></td></tr></table></figure>\n"},{"title":"vue日常学习-router","date":"2018-03-01T16:00:00.000Z","copyright":true,"_content":"\n今日搭建vue 3.0脚手架，写了个小项目，被一个问题卡了半天，就是在app.vue里面的router-view和router-link无法生效，页面不会跳转并且控制台会报错，请教后得知，自己在router.js里配置路由的时候代码写错了\n```javascript\n//错误代码\n{\n      path: '/shopping',\n      name: 'shopping',\n      component: () => {\n        import(\"./components/shopping\")\n      }\n    }\n    \n//正确的写法 1\n{\n      path: '/shopping',\n      name: 'shopping',\n      component: () => import(\"./components/shopping\")\n      \n    }\n//正确的写法 2\n{\n      path: '/shopping',\n      name: 'shopping',\n      component: () => {\n        return import(\"./components/shopping\")\n      }\n    }\n\n//import是个异步函数, 单纯的componet方法没有返回值,如果加了{}，需要使用return返回出去\n```","source":"_posts/vue-router.md","raw":"---\ntitle: vue日常学习-router\ncategories: vue\ndate: 2018-03-02\ntags: [编程,感悟]\ncopyright: true\n\n---\n\n今日搭建vue 3.0脚手架，写了个小项目，被一个问题卡了半天，就是在app.vue里面的router-view和router-link无法生效，页面不会跳转并且控制台会报错，请教后得知，自己在router.js里配置路由的时候代码写错了\n```javascript\n//错误代码\n{\n      path: '/shopping',\n      name: 'shopping',\n      component: () => {\n        import(\"./components/shopping\")\n      }\n    }\n    \n//正确的写法 1\n{\n      path: '/shopping',\n      name: 'shopping',\n      component: () => import(\"./components/shopping\")\n      \n    }\n//正确的写法 2\n{\n      path: '/shopping',\n      name: 'shopping',\n      component: () => {\n        return import(\"./components/shopping\")\n      }\n    }\n\n//import是个异步函数, 单纯的componet方法没有返回值,如果加了{}，需要使用return返回出去\n```","slug":"vue-router","published":1,"updated":"2021-07-01T07:30:54.551Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuf4002tzgsym1yfh398","content":"<p>今日搭建vue 3.0脚手架，写了个小项目，被一个问题卡了半天，就是在app.vue里面的router-view和router-link无法生效，页面不会跳转并且控制台会报错，请教后得知，自己在router.js里配置路由的时候代码写错了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//错误代码</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/shopping'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'shopping'</span>,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">import</span>(<span class=\"string\">\"./components/shopping\"</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//正确的写法 1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/shopping'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'shopping'</span>,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">\"./components/shopping\"</span>)</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//正确的写法 2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/shopping'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'shopping'</span>,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">import</span>(<span class=\"string\">\"./components/shopping\"</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//import是个异步函数, 单纯的componet方法没有返回值,如果加了&#123;&#125;，需要使用return返回出去</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>今日搭建vue 3.0脚手架，写了个小项目，被一个问题卡了半天，就是在app.vue里面的router-view和router-link无法生效，页面不会跳转并且控制台会报错，请教后得知，自己在router.js里配置路由的时候代码写错了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//错误代码</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/shopping'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'shopping'</span>,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">import</span>(<span class=\"string\">\"./components/shopping\"</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//正确的写法 1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/shopping'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'shopping'</span>,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">\"./components/shopping\"</span>)</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//正确的写法 2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">      path: <span class=\"string\">'/shopping'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'shopping'</span>,</span><br><span class=\"line\">      component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">import</span>(<span class=\"string\">\"./components/shopping\"</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//import是个异步函数, 单纯的componet方法没有返回值,如果加了&#123;&#125;，需要使用return返回出去</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"vue日常学习","date":"2018-02-28T16:00:00.000Z","copyright":true,"_content":"\n* 路由操作的基本步骤\n```javascript\n//引入对象\nimport VueRouter from ’vue-router‘\n//安装插件\nVue.use(VueRouter); //挂载属性的行为\n//创建理由对象\nlet router = new VueRouter({\n    routers:[{\n        name:'xxx',path:'/xxx',组件\n    }]\n})\n//将路由对象放入到options中的 new Vue()\nnew vue({\n    router\n})\n```\n* 设置\n- 1: <router-link :to={name:'xxx'}></router-link>\n- 2: 配置路由规则`{name:'xxx',path:'xxx',组件名}`\n- 3: 作了什么\n        + 在created事件函数中，获取路由参数\n        + 发起请求，把数据挂在上去\n* 参数\n    - 查询字符串(#/beijing?id=1&age=2)\n+ 1: <router-link :to={name:   'xxx',query:{id=1,age=2}}></router-link>\n+ 2: 配置路由规则`{name:'xxx',path:'beijing',组件名}`\n+ 3: 作了什么\n        + `this.$route.query.id || age`\n\n    - path(#/beijing/1/2 )\n+ 1: <router-link :to={name:'xxx',params:{id:1,age:2}}></router-link>\n+ 2: 配置路由规则`{name:'xxx',path:'/beijing/:id/:age',组件名}`\n+ 3: 作了什么\n        + `this.$route.params.id || age`\n\n* 编程导航\n    - 一个获取信息的只读对象($route)\n    - 一个具备功能函数的对象($router)\n    - 根据浏览器历史记录前进和后退`this.$router.go(-1 || 1)`\n    - 跳转到指定路由`this.$router.push({name:'bj})`\n\n* 嵌套路由\n    - 让变化的视图(router-view)产生包含关系(router-view)\n    - 让路由与router-view关联，并且产生父子关系\n\n#### axios\n* 合并请求\n* axios.all{[请求1，请求2]}\n* 分发相应 axios.pread(fn)\n* fn:对应参数和请求的顺序一致。\n* 必须两次请求都成功，只要有一次失败就算失败，否则成功。\n```javascript\n//main.js\n\nimport Vue from 'vue'\nimport App from 'app'\n//引入\nimport Axios from 'axios'\n\nAxios.defaults.baseURL = 'http://123.34.543/api/';\n\n//给Vue原型上挂载属性\nVue.prototype.$axios = Axios\n\n//启动\nnew Vue({\n    el:'#app',\n    render:c => c(App)\n})\n\n//app.vue\ncreated() { \n    function getMsg(res1,res2) {\n        console.log(res1)\n        console.log(res2)\n    }\n    this.$axios.all([\n        this.$axios.post('postcomment/300','content=123'),\n        this.$axios.get('postcomment/300','content=123')\n    ])\n    //分发相应\n    .then(this.$axios.spread(getMsg))\n    .catch(err =>{\n        console.log(err)\n    })\n}\n```\n\n#### 拦截器\n* 过滤，再一次请求中，做操作,拦截器对每一次请求都有效 \n* axios.interceptors.request.use(fn) 在请求之前\n* function(config) {} config相当于options对象\n* 范围广\n```javascript\n//main.js\nAxios.defaults.headers = {\n    accept:'defaults'\n}\n//拦截器\nAxios.interceptors.request.use(function(config) {\n    console.log(config)\n    //个性化修改\n    //config.headers.accept = 'interceptors'\n     config.headers = {\n         accept:'interceptors'\n     }\n    return config\n    //返回没有修改的设置\n})\n//拦截器覆盖默认设置\n```\n```javascript\nthis.$axios.get('getcomments/300?pa=1',{\n    headers:{\n        accept:'get'\n    }\n})\n.then(res =>{\n\n})\n.catch(err =>{\n\n})\n```\n\n#### token\n* cookie和session的机制，coolie自带一个字符串\n* cookie只在浏览器\n* 移动端原生应用，也可以使用http协议，可以加自定义的头，原生应用没有cookie\n* 对于三端，token可以作为类似cookie的使用，并且可以通用\n* 拦截器可以用在添加token上\n\n#### 拦截器操作 loading\n* 在请求发起前open，在相应回来后close\n```javascript\nAxios.interceptors.request.use(function(config) {\n    //请求发起之前，显示loading\n    return config\n})\nAxios.interceptors.response.use(function(config) {\n    //在相应回来之后，隐藏loading\n    return config\n})\n```  \n\n#### 监听\n* watch可以对（单个）变量进行监视，也可以深度监视\n* 如果需求是对于10个变量进行监视？computed，可以监视多个，并且指定返回数据，并且可以显示在页面\n* 都是options中的根属性\n    - watch监视单个\n    - computed可以监视多个this相关属性值的改变，如果和原值一样，不会触发函数的调用，并且可以返回对象\n```javascript\n <input type=\"text\" v-model=\"text\">\n<button @click=\"changeValue\"></button>\n\n data() {\n      return{\n        text:[],\n        person:[{\n          name:'nick'\n        },{\n          name:'lee'\n        }]\n      }\n    },\n    methods:{\n      changeValue() {\n        this.text = 'abc'\n        this.person[0].name = 'tom'\n      }\n    },\n    watch:{\n      text:function (old,newV) {\n        console.log('change it')\n      },\n      person:{\n        handler:function (val,old) {\n          console.log('change it')\n        },\n        deep:true\n      }\n    }\n    \n    \n```\n\n\n```javascript\n 单价：<input type=\"text\" v-model=\"price\">*\n 件数：<input type=\"text\" v-model=\"num\">*\n 折扣：<input type=\"text\" v-model=\"rate\">=\n    {{sum.name}} {{sum.price}}\n\n  data() {\n      return {\n        price: 0,\n        num: 0,\n        rate: 0\n      }\n    },\n    computed: {\n      sum() {\n        //如果当函数内涉及到的this.相关属性发生变化后触发，并返回一个值（可以是对象）\n        return {\n          name:'music',\n          price:this.price * this.num * (this.rate / 100)\n        }\n      }\n    }\n```\n\n\n","source":"_posts/vue.md","raw":"---\ntitle: vue日常学习\ncategories: vue\ndate: 2018-03-01\ntags: [编程,感悟]\ncopyright: true\n\n---\n\n* 路由操作的基本步骤\n```javascript\n//引入对象\nimport VueRouter from ’vue-router‘\n//安装插件\nVue.use(VueRouter); //挂载属性的行为\n//创建理由对象\nlet router = new VueRouter({\n    routers:[{\n        name:'xxx',path:'/xxx',组件\n    }]\n})\n//将路由对象放入到options中的 new Vue()\nnew vue({\n    router\n})\n```\n* 设置\n- 1: <router-link :to={name:'xxx'}></router-link>\n- 2: 配置路由规则`{name:'xxx',path:'xxx',组件名}`\n- 3: 作了什么\n        + 在created事件函数中，获取路由参数\n        + 发起请求，把数据挂在上去\n* 参数\n    - 查询字符串(#/beijing?id=1&age=2)\n+ 1: <router-link :to={name:   'xxx',query:{id=1,age=2}}></router-link>\n+ 2: 配置路由规则`{name:'xxx',path:'beijing',组件名}`\n+ 3: 作了什么\n        + `this.$route.query.id || age`\n\n    - path(#/beijing/1/2 )\n+ 1: <router-link :to={name:'xxx',params:{id:1,age:2}}></router-link>\n+ 2: 配置路由规则`{name:'xxx',path:'/beijing/:id/:age',组件名}`\n+ 3: 作了什么\n        + `this.$route.params.id || age`\n\n* 编程导航\n    - 一个获取信息的只读对象($route)\n    - 一个具备功能函数的对象($router)\n    - 根据浏览器历史记录前进和后退`this.$router.go(-1 || 1)`\n    - 跳转到指定路由`this.$router.push({name:'bj})`\n\n* 嵌套路由\n    - 让变化的视图(router-view)产生包含关系(router-view)\n    - 让路由与router-view关联，并且产生父子关系\n\n#### axios\n* 合并请求\n* axios.all{[请求1，请求2]}\n* 分发相应 axios.pread(fn)\n* fn:对应参数和请求的顺序一致。\n* 必须两次请求都成功，只要有一次失败就算失败，否则成功。\n```javascript\n//main.js\n\nimport Vue from 'vue'\nimport App from 'app'\n//引入\nimport Axios from 'axios'\n\nAxios.defaults.baseURL = 'http://123.34.543/api/';\n\n//给Vue原型上挂载属性\nVue.prototype.$axios = Axios\n\n//启动\nnew Vue({\n    el:'#app',\n    render:c => c(App)\n})\n\n//app.vue\ncreated() { \n    function getMsg(res1,res2) {\n        console.log(res1)\n        console.log(res2)\n    }\n    this.$axios.all([\n        this.$axios.post('postcomment/300','content=123'),\n        this.$axios.get('postcomment/300','content=123')\n    ])\n    //分发相应\n    .then(this.$axios.spread(getMsg))\n    .catch(err =>{\n        console.log(err)\n    })\n}\n```\n\n#### 拦截器\n* 过滤，再一次请求中，做操作,拦截器对每一次请求都有效 \n* axios.interceptors.request.use(fn) 在请求之前\n* function(config) {} config相当于options对象\n* 范围广\n```javascript\n//main.js\nAxios.defaults.headers = {\n    accept:'defaults'\n}\n//拦截器\nAxios.interceptors.request.use(function(config) {\n    console.log(config)\n    //个性化修改\n    //config.headers.accept = 'interceptors'\n     config.headers = {\n         accept:'interceptors'\n     }\n    return config\n    //返回没有修改的设置\n})\n//拦截器覆盖默认设置\n```\n```javascript\nthis.$axios.get('getcomments/300?pa=1',{\n    headers:{\n        accept:'get'\n    }\n})\n.then(res =>{\n\n})\n.catch(err =>{\n\n})\n```\n\n#### token\n* cookie和session的机制，coolie自带一个字符串\n* cookie只在浏览器\n* 移动端原生应用，也可以使用http协议，可以加自定义的头，原生应用没有cookie\n* 对于三端，token可以作为类似cookie的使用，并且可以通用\n* 拦截器可以用在添加token上\n\n#### 拦截器操作 loading\n* 在请求发起前open，在相应回来后close\n```javascript\nAxios.interceptors.request.use(function(config) {\n    //请求发起之前，显示loading\n    return config\n})\nAxios.interceptors.response.use(function(config) {\n    //在相应回来之后，隐藏loading\n    return config\n})\n```  \n\n#### 监听\n* watch可以对（单个）变量进行监视，也可以深度监视\n* 如果需求是对于10个变量进行监视？computed，可以监视多个，并且指定返回数据，并且可以显示在页面\n* 都是options中的根属性\n    - watch监视单个\n    - computed可以监视多个this相关属性值的改变，如果和原值一样，不会触发函数的调用，并且可以返回对象\n```javascript\n <input type=\"text\" v-model=\"text\">\n<button @click=\"changeValue\"></button>\n\n data() {\n      return{\n        text:[],\n        person:[{\n          name:'nick'\n        },{\n          name:'lee'\n        }]\n      }\n    },\n    methods:{\n      changeValue() {\n        this.text = 'abc'\n        this.person[0].name = 'tom'\n      }\n    },\n    watch:{\n      text:function (old,newV) {\n        console.log('change it')\n      },\n      person:{\n        handler:function (val,old) {\n          console.log('change it')\n        },\n        deep:true\n      }\n    }\n    \n    \n```\n\n\n```javascript\n 单价：<input type=\"text\" v-model=\"price\">*\n 件数：<input type=\"text\" v-model=\"num\">*\n 折扣：<input type=\"text\" v-model=\"rate\">=\n    {{sum.name}} {{sum.price}}\n\n  data() {\n      return {\n        price: 0,\n        num: 0,\n        rate: 0\n      }\n    },\n    computed: {\n      sum() {\n        //如果当函数内涉及到的this.相关属性发生变化后触发，并返回一个值（可以是对象）\n        return {\n          name:'music',\n          price:this.price * this.num * (this.rate / 100)\n        }\n      }\n    }\n```\n\n\n","slug":"vue","published":1,"updated":"2021-07-01T07:30:54.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuf5002wzgsymbtlbha5","content":"<ul>\n<li><p>路由操作的基本步骤</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入对象</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> ’vue-router‘</span><br><span class=\"line\"><span class=\"comment\">//安装插件</span></span><br><span class=\"line\">Vue.use(VueRouter); <span class=\"comment\">//挂载属性的行为</span></span><br><span class=\"line\"><span class=\"comment\">//创建理由对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routers:[&#123;</span><br><span class=\"line\">        name:<span class=\"string\">'xxx'</span>,<span class=\"attr\">path</span>:<span class=\"string\">'/xxx'</span>,组件</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//将路由对象放入到options中的 new Vue()</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> vue(&#123;</span><br><span class=\"line\">    router</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置</p>\n</li>\n</ul>\n<ul>\n<li>1: &lt;router-link :to={name:’xxx’}&gt;</li>\n<li>2: 配置路由规则<code>{name:&#39;xxx&#39;,path:&#39;xxx&#39;,组件名}</code></li>\n<li>3: 作了什么<pre><code>+ 在created事件函数中，获取路由参数\n+ 发起请求，把数据挂在上去\n</code></pre></li>\n</ul>\n<ul>\n<li>参数<ul>\n<li>查询字符串(#/beijing?id=1&amp;age=2)</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>1: &lt;router-link :to={name:   ‘xxx’,query:{id=1,age=2}}&gt;</li>\n<li>2: 配置路由规则<code>{name:&#39;xxx&#39;,path:&#39;beijing&#39;,组件名}</code></li>\n<li><p>3: 作了什么</p>\n<pre><code>+ `this.$route.query.id || age`\n</code></pre><ul>\n<li>path(#/beijing/1/2 )</li>\n</ul>\n</li>\n<li>1: &lt;router-link :to={name:’xxx’,params:{id:1,age:2}}&gt;</li>\n<li>2: 配置路由规则<code>{name:&#39;xxx&#39;,path:&#39;/beijing/:id/:age&#39;,组件名}</code></li>\n<li>3: 作了什么<pre><code>+ `this.$route.params.id || age`\n</code></pre></li>\n</ul>\n<ul>\n<li><p>编程导航</p>\n<ul>\n<li>一个获取信息的只读对象($route)</li>\n<li>一个具备功能函数的对象($router)</li>\n<li>根据浏览器历史记录前进和后退<code>this.$router.go(-1 || 1)</code></li>\n<li>跳转到指定路由<code>this.$router.push({name:&#39;bj})</code></li>\n</ul>\n</li>\n<li><p>嵌套路由</p>\n<ul>\n<li>让变化的视图(router-view)产生包含关系(router-view)</li>\n<li>让路由与router-view关联，并且产生父子关系</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h4><ul>\n<li>合并请求</li>\n<li>axios.all{[请求1，请求2]}</li>\n<li>分发相应 axios.pread(fn)</li>\n<li>fn:对应参数和请求的顺序一致。</li>\n<li>必须两次请求都成功，只要有一次失败就算失败，否则成功。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'app'</span></span><br><span class=\"line\"><span class=\"comment\">//引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Axios.defaults.baseURL = <span class=\"string\">'http://123.34.543/api/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给Vue原型上挂载属性</span></span><br><span class=\"line\">Vue.prototype.$axios = Axios</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//启动</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    render:<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c(App)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//app.vue</span></span><br><span class=\"line\">created() &#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMsg</span>(<span class=\"params\">res1,res2</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res1)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$axios.all([</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$axios.post(<span class=\"string\">'postcomment/300'</span>,<span class=\"string\">'content=123'</span>),</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$axios.get(<span class=\"string\">'postcomment/300'</span>,<span class=\"string\">'content=123'</span>)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    <span class=\"comment\">//分发相应</span></span><br><span class=\"line\">    .then(<span class=\"keyword\">this</span>.$axios.spread(getMsg))</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h4><ul>\n<li>过滤，再一次请求中，做操作,拦截器对每一次请求都有效 </li>\n<li>axios.interceptors.request.use(fn) 在请求之前</li>\n<li>function(config) {} config相当于options对象</li>\n<li>范围广<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\">Axios.defaults.headers = &#123;</span><br><span class=\"line\">    accept:<span class=\"string\">'defaults'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//拦截器</span></span><br><span class=\"line\">Axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(config)</span><br><span class=\"line\">    <span class=\"comment\">//个性化修改</span></span><br><span class=\"line\">    <span class=\"comment\">//config.headers.accept = 'interceptors'</span></span><br><span class=\"line\">     config.headers = &#123;</span><br><span class=\"line\">         accept:<span class=\"string\">'interceptors'</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config</span><br><span class=\"line\">    <span class=\"comment\">//返回没有修改的设置</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//拦截器覆盖默认设置</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$axios.get(<span class=\"string\">'getcomments/300?pa=1'</span>,&#123;</span><br><span class=\"line\">    headers:&#123;</span><br><span class=\"line\">        accept:<span class=\"string\">'get'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h4><ul>\n<li>cookie和session的机制，coolie自带一个字符串</li>\n<li>cookie只在浏览器</li>\n<li>移动端原生应用，也可以使用http协议，可以加自定义的头，原生应用没有cookie</li>\n<li>对于三端，token可以作为类似cookie的使用，并且可以通用</li>\n<li>拦截器可以用在添加token上</li>\n</ul>\n<h4 id=\"拦截器操作-loading\"><a href=\"#拦截器操作-loading\" class=\"headerlink\" title=\"拦截器操作 loading\"></a>拦截器操作 loading</h4><ul>\n<li>在请求发起前open，在相应回来后close<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//请求发起之前，显示loading</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Axios.interceptors.response.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在相应回来之后，隐藏loading</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 监听</span></span><br><span class=\"line\"><span class=\"string\">* watch可以对（单个）变量进行监视，也可以深度监视</span></span><br><span class=\"line\"><span class=\"string\">* 如果需求是对于10个变量进行监视？computed，可以监视多个，并且指定返回数据，并且可以显示在页面</span></span><br><span class=\"line\"><span class=\"string\">* 都是options中的根属性</span></span><br><span class=\"line\"><span class=\"string\">    - watch监视单个</span></span><br><span class=\"line\"><span class=\"string\">    - computed可以监视多个this相关属性值的改变，如果和原值一样，不会触发函数的调用，并且可以返回对象</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\"> &lt;input type=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"text\"</span>&gt;</span><br><span class=\"line\">&lt;button @click=<span class=\"string\">\"changeValue\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"> data() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        text:[],</span><br><span class=\"line\">        person:[&#123;</span><br><span class=\"line\">          name:<span class=\"string\">'nick'</span></span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">          name:<span class=\"string\">'lee'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">      changeValue() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.text = <span class=\"string\">'abc'</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.person[<span class=\"number\">0</span>].name = <span class=\"string\">'tom'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch:&#123;</span><br><span class=\"line\">      text:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">old,newV</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'change it'</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      person:&#123;</span><br><span class=\"line\">        handler:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val,old</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">'change it'</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        deep:<span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单价：&lt;input type=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"price\"</span>&gt;*</span><br><span class=\"line\">件数：&lt;input type=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"num\"</span>&gt;*</span><br><span class=\"line\">折扣：&lt;input type=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"rate\"</span>&gt;=</span><br><span class=\"line\">   &#123;&#123;sum.name&#125;&#125; &#123;&#123;sum.price&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> data() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">       price: <span class=\"number\">0</span>,</span><br><span class=\"line\">       num: <span class=\"number\">0</span>,</span><br><span class=\"line\">       rate: <span class=\"number\">0</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   computed: &#123;</span><br><span class=\"line\">     sum() &#123;</span><br><span class=\"line\">       <span class=\"comment\">//如果当函数内涉及到的this.相关属性发生变化后触发，并返回一个值（可以是对象）</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">         name:<span class=\"string\">'music'</span>,</span><br><span class=\"line\">         price:<span class=\"keyword\">this</span>.price * <span class=\"keyword\">this</span>.num * (<span class=\"keyword\">this</span>.rate / <span class=\"number\">100</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<ul>\n<li><p>路由操作的基本步骤</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入对象</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> ’vue-router‘</span><br><span class=\"line\"><span class=\"comment\">//安装插件</span></span><br><span class=\"line\">Vue.use(VueRouter); <span class=\"comment\">//挂载属性的行为</span></span><br><span class=\"line\"><span class=\"comment\">//创建理由对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routers:[&#123;</span><br><span class=\"line\">        name:<span class=\"string\">'xxx'</span>,<span class=\"attr\">path</span>:<span class=\"string\">'/xxx'</span>,组件</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//将路由对象放入到options中的 new Vue()</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> vue(&#123;</span><br><span class=\"line\">    router</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置</p>\n</li>\n</ul>\n<ul>\n<li>1: &lt;router-link :to={name:’xxx’}&gt;</li>\n<li>2: 配置路由规则<code>{name:&#39;xxx&#39;,path:&#39;xxx&#39;,组件名}</code></li>\n<li>3: 作了什么<pre><code>+ 在created事件函数中，获取路由参数\n+ 发起请求，把数据挂在上去\n</code></pre></li>\n</ul>\n<ul>\n<li>参数<ul>\n<li>查询字符串(#/beijing?id=1&amp;age=2)</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>1: &lt;router-link :to={name:   ‘xxx’,query:{id=1,age=2}}&gt;</li>\n<li>2: 配置路由规则<code>{name:&#39;xxx&#39;,path:&#39;beijing&#39;,组件名}</code></li>\n<li><p>3: 作了什么</p>\n<pre><code>+ `this.$route.query.id || age`\n</code></pre><ul>\n<li>path(#/beijing/1/2 )</li>\n</ul>\n</li>\n<li>1: &lt;router-link :to={name:’xxx’,params:{id:1,age:2}}&gt;</li>\n<li>2: 配置路由规则<code>{name:&#39;xxx&#39;,path:&#39;/beijing/:id/:age&#39;,组件名}</code></li>\n<li>3: 作了什么<pre><code>+ `this.$route.params.id || age`\n</code></pre></li>\n</ul>\n<ul>\n<li><p>编程导航</p>\n<ul>\n<li>一个获取信息的只读对象($route)</li>\n<li>一个具备功能函数的对象($router)</li>\n<li>根据浏览器历史记录前进和后退<code>this.$router.go(-1 || 1)</code></li>\n<li>跳转到指定路由<code>this.$router.push({name:&#39;bj})</code></li>\n</ul>\n</li>\n<li><p>嵌套路由</p>\n<ul>\n<li>让变化的视图(router-view)产生包含关系(router-view)</li>\n<li>让路由与router-view关联，并且产生父子关系</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h4><ul>\n<li>合并请求</li>\n<li>axios.all{[请求1，请求2]}</li>\n<li>分发相应 axios.pread(fn)</li>\n<li>fn:对应参数和请求的顺序一致。</li>\n<li>必须两次请求都成功，只要有一次失败就算失败，否则成功。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'app'</span></span><br><span class=\"line\"><span class=\"comment\">//引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Axios.defaults.baseURL = <span class=\"string\">'http://123.34.543/api/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给Vue原型上挂载属性</span></span><br><span class=\"line\">Vue.prototype.$axios = Axios</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//启动</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    render:<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c(App)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//app.vue</span></span><br><span class=\"line\">created() &#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMsg</span>(<span class=\"params\">res1,res2</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res1)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$axios.all([</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$axios.post(<span class=\"string\">'postcomment/300'</span>,<span class=\"string\">'content=123'</span>),</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$axios.get(<span class=\"string\">'postcomment/300'</span>,<span class=\"string\">'content=123'</span>)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    <span class=\"comment\">//分发相应</span></span><br><span class=\"line\">    .then(<span class=\"keyword\">this</span>.$axios.spread(getMsg))</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h4><ul>\n<li>过滤，再一次请求中，做操作,拦截器对每一次请求都有效 </li>\n<li>axios.interceptors.request.use(fn) 在请求之前</li>\n<li>function(config) {} config相当于options对象</li>\n<li>范围广<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\">Axios.defaults.headers = &#123;</span><br><span class=\"line\">    accept:<span class=\"string\">'defaults'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//拦截器</span></span><br><span class=\"line\">Axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(config)</span><br><span class=\"line\">    <span class=\"comment\">//个性化修改</span></span><br><span class=\"line\">    <span class=\"comment\">//config.headers.accept = 'interceptors'</span></span><br><span class=\"line\">     config.headers = &#123;</span><br><span class=\"line\">         accept:<span class=\"string\">'interceptors'</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config</span><br><span class=\"line\">    <span class=\"comment\">//返回没有修改的设置</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//拦截器覆盖默认设置</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$axios.get(<span class=\"string\">'getcomments/300?pa=1'</span>,&#123;</span><br><span class=\"line\">    headers:&#123;</span><br><span class=\"line\">        accept:<span class=\"string\">'get'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h4><ul>\n<li>cookie和session的机制，coolie自带一个字符串</li>\n<li>cookie只在浏览器</li>\n<li>移动端原生应用，也可以使用http协议，可以加自定义的头，原生应用没有cookie</li>\n<li>对于三端，token可以作为类似cookie的使用，并且可以通用</li>\n<li>拦截器可以用在添加token上</li>\n</ul>\n<h4 id=\"拦截器操作-loading\"><a href=\"#拦截器操作-loading\" class=\"headerlink\" title=\"拦截器操作 loading\"></a>拦截器操作 loading</h4><ul>\n<li>在请求发起前open，在相应回来后close<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//请求发起之前，显示loading</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Axios.interceptors.response.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在相应回来之后，隐藏loading</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#### 监听</span></span><br><span class=\"line\"><span class=\"string\">* watch可以对（单个）变量进行监视，也可以深度监视</span></span><br><span class=\"line\"><span class=\"string\">* 如果需求是对于10个变量进行监视？computed，可以监视多个，并且指定返回数据，并且可以显示在页面</span></span><br><span class=\"line\"><span class=\"string\">* 都是options中的根属性</span></span><br><span class=\"line\"><span class=\"string\">    - watch监视单个</span></span><br><span class=\"line\"><span class=\"string\">    - computed可以监视多个this相关属性值的改变，如果和原值一样，不会触发函数的调用，并且可以返回对象</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\"> &lt;input type=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"text\"</span>&gt;</span><br><span class=\"line\">&lt;button @click=<span class=\"string\">\"changeValue\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"> data() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        text:[],</span><br><span class=\"line\">        person:[&#123;</span><br><span class=\"line\">          name:<span class=\"string\">'nick'</span></span><br><span class=\"line\">        &#125;,&#123;</span><br><span class=\"line\">          name:<span class=\"string\">'lee'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">      changeValue() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.text = <span class=\"string\">'abc'</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.person[<span class=\"number\">0</span>].name = <span class=\"string\">'tom'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch:&#123;</span><br><span class=\"line\">      text:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">old,newV</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'change it'</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      person:&#123;</span><br><span class=\"line\">        handler:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val,old</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">'change it'</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        deep:<span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单价：&lt;input type=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"price\"</span>&gt;*</span><br><span class=\"line\">件数：&lt;input type=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"num\"</span>&gt;*</span><br><span class=\"line\">折扣：&lt;input type=<span class=\"string\">\"text\"</span> v-model=<span class=\"string\">\"rate\"</span>&gt;=</span><br><span class=\"line\">   &#123;&#123;sum.name&#125;&#125; &#123;&#123;sum.price&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> data() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">       price: <span class=\"number\">0</span>,</span><br><span class=\"line\">       num: <span class=\"number\">0</span>,</span><br><span class=\"line\">       rate: <span class=\"number\">0</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   computed: &#123;</span><br><span class=\"line\">     sum() &#123;</span><br><span class=\"line\">       <span class=\"comment\">//如果当函数内涉及到的this.相关属性发生变化后触发，并返回一个值（可以是对象）</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">         name:<span class=\"string\">'music'</span>,</span><br><span class=\"line\">         price:<span class=\"keyword\">this</span>.price * <span class=\"keyword\">this</span>.num * (<span class=\"keyword\">this</span>.rate / <span class=\"number\">100</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"vue3-ts","date":"2021-06-17T08:24:18.000Z","_content":"#### 程序 更容易理解\n\n- 函数或者方法输入输出的参数类型，外部条件等\n- 动态语言的约束：需要手动调整等过程\n- 有了ts，diamante本身就可以回答上述问题\n\n#### 效率更高\n- 在不同的代码块和定义中进行跳转\n- 代码自动补全\n- 丰富的接口提示\n\n#### 更少的错误\n- 编译期间能够发现大部分错误\n- 杜绝一些比较常见错误\n\n#### 非常好的包容性\n- 完全兼容js\n- 第三方库可以单独编写类型文件\n\n#### 不足\n- 增加学习成本\n- 短期内增加开发成本\n\n","source":"_posts/vue3-ts.md","raw":"---\ntitle: vue3-ts\ndate: 2021-06-17 16:24:18\ntags:\n---\n#### 程序 更容易理解\n\n- 函数或者方法输入输出的参数类型，外部条件等\n- 动态语言的约束：需要手动调整等过程\n- 有了ts，diamante本身就可以回答上述问题\n\n#### 效率更高\n- 在不同的代码块和定义中进行跳转\n- 代码自动补全\n- 丰富的接口提示\n\n#### 更少的错误\n- 编译期间能够发现大部分错误\n- 杜绝一些比较常见错误\n\n#### 非常好的包容性\n- 完全兼容js\n- 第三方库可以单独编写类型文件\n\n#### 不足\n- 增加学习成本\n- 短期内增加开发成本\n\n","slug":"vue3-ts","published":1,"updated":"2021-07-01T07:30:54.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuf80030zgsy697qf56d","content":"<h4 id=\"程序-更容易理解\"><a href=\"#程序-更容易理解\" class=\"headerlink\" title=\"程序 更容易理解\"></a>程序 更容易理解</h4><ul>\n<li>函数或者方法输入输出的参数类型，外部条件等</li>\n<li>动态语言的约束：需要手动调整等过程</li>\n<li>有了ts，diamante本身就可以回答上述问题</li>\n</ul>\n<h4 id=\"效率更高\"><a href=\"#效率更高\" class=\"headerlink\" title=\"效率更高\"></a>效率更高</h4><ul>\n<li>在不同的代码块和定义中进行跳转</li>\n<li>代码自动补全</li>\n<li>丰富的接口提示</li>\n</ul>\n<h4 id=\"更少的错误\"><a href=\"#更少的错误\" class=\"headerlink\" title=\"更少的错误\"></a>更少的错误</h4><ul>\n<li>编译期间能够发现大部分错误</li>\n<li>杜绝一些比较常见错误</li>\n</ul>\n<h4 id=\"非常好的包容性\"><a href=\"#非常好的包容性\" class=\"headerlink\" title=\"非常好的包容性\"></a>非常好的包容性</h4><ul>\n<li>完全兼容js</li>\n<li>第三方库可以单独编写类型文件</li>\n</ul>\n<h4 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h4><ul>\n<li>增加学习成本</li>\n<li>短期内增加开发成本</li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<h4 id=\"程序-更容易理解\"><a href=\"#程序-更容易理解\" class=\"headerlink\" title=\"程序 更容易理解\"></a>程序 更容易理解</h4><ul>\n<li>函数或者方法输入输出的参数类型，外部条件等</li>\n<li>动态语言的约束：需要手动调整等过程</li>\n<li>有了ts，diamante本身就可以回答上述问题</li>\n</ul>\n<h4 id=\"效率更高\"><a href=\"#效率更高\" class=\"headerlink\" title=\"效率更高\"></a>效率更高</h4><ul>\n<li>在不同的代码块和定义中进行跳转</li>\n<li>代码自动补全</li>\n<li>丰富的接口提示</li>\n</ul>\n<h4 id=\"更少的错误\"><a href=\"#更少的错误\" class=\"headerlink\" title=\"更少的错误\"></a>更少的错误</h4><ul>\n<li>编译期间能够发现大部分错误</li>\n<li>杜绝一些比较常见错误</li>\n</ul>\n<h4 id=\"非常好的包容性\"><a href=\"#非常好的包容性\" class=\"headerlink\" title=\"非常好的包容性\"></a>非常好的包容性</h4><ul>\n<li>完全兼容js</li>\n<li>第三方库可以单独编写类型文件</li>\n</ul>\n<h4 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h4><ul>\n<li>增加学习成本</li>\n<li>短期内增加开发成本</li>\n</ul>\n"},{"title":"vue3-新特性","date":"2021-07-01T06:27:55.000Z","keywords":"vue3","created":"创建于","modified":"更新于","sticky":"置顶","posted":"Posted on","visitors":"Visitors","in":"In","read_more":"阅读全文","untitled":"未命名","toc_empty":"此文章未包含目录","wordcount":"字数统计","min2read":"阅读时长","totalcount":"Site words total count","copyright":true,"_content":"<blockquote class=\"blockquote-center\">\n<img src=\"https://www.runoob.com/wp-content/uploads/2017/01/vue.png\"></img>\nvue3都做了什么呢？\n</blockquote>\n<!-- more -->\n#### 性能提升\n- 打包大小减少41%\n- 初次渲染快55%，133%\n- 内存使用减少54%\n\n#### Composition API\n- ref 和 reactive\n- computed 和 watch\n- 新的生命周期函数\n- 自定义函数-Hooks 函数\n\n#### 新增特性\n- Teleport 瞬移组件的位置\n- Suspense 异步加载组件的新福音\n- 全局 API 的修改和优化\n- 更多的试验性特性\n\n#### 更好的ts支持\n\n\n\n#### 为什么要有vue3（解决现有存在的棘手问题）\n- 随着功能的增长，复杂组件的代码变得难以维护\n\n- Mixin 的缺点\n\n1. 明明冲突\n2. 不清楚暴露出来的变量的作用\n3. 重用到其他component经常遇到问题\n\n\n- setup 中无法访问 this\n\n- 新生命周期\n\n![生命周期](vue3-新特性/生命周期.png)\n\n#### 免费api： https://dog.ceo/dog-api/\n\n#### teleport 瞬间移动\n\n- 将子节点渲染到存在于父组件以外的 DOM 节点\n\n#### definedComponent\n\n- 为ts而定义，保存输入输出整个对象，组件的定义与导出都是 object，更好的提示\n\n#### Suspense\n\n- 异步请求的困境\n- suspense 是 vue3 推出的一个内置的特殊组件\n- 使用 suspense，要返回一个 promise\n\n```vue\n<!--如果放两个组件不显示，那么加一个div即可-->\n<Suspense>\n<template #default>\n  <div>\n    <asyncShow></asyncShow>\n    <dogShow></dogShow>\n  </div>\n</template>\n<template #fallback>\n  <h1>loading ------ </h1>\n</template>\n</Suspense>\n```\n\n#### vue2 全局 API 遇到的问题\n\n- 在单元测试中，全局配置非常容易污染全局环境\n- 在不同的 apps 中，共享一份有不同配置的 vue 对象，也变得非常困难\n\n##### 全局配置：Vue.config -> app.config\n\n- config.productionTip 被删除\n- config.ignoredElements 改名为 config.isCustomElement\n- config,keyCodes 被删除\n\n#### 全局注册类 API\n\n- Vue.component -> app.component\n- Vue.directive -> app.directive\n\n#### 行为扩展类\n- Vue，minxin -> app.minxin\n- Vue.use -> app.use\n\n\n#### 完美的 vue 实践项目是怎样的？\n- 数据的展示 - 最好是有多级复杂数据的展示\n- 数据的创建 - 可以发散出多个功能\n- 组件的抽象 - 循序渐进的组件开发\n\n- 整体状态数据结构的设计和实现\n- 权限管理和控制\n- 真实的后端 API\n\n#### 开发流程\n\n- 将 ui 话划分出组件的层级\n- 创建应用的静态版本\n\n\n\n","source":"_posts/vue3-新特性.md","raw":"---\ntitle: vue3-新特性\ndate: 2021-07-01 14:27:55\ncategories: 技术\ntags: [编程,感悟]\nkeywords: vue3\ncreated: 创建于\nmodified: 更新于\nsticky: 置顶\nposted: Posted on #发表于\nvisitors: Visitors #阅读次数\nin: In #分类于\nread_more: 阅读全文\nuntitled: 未命名\ntoc_empty: 此文章未包含目录\nwordcount: 字数统计\nmin2read: 阅读时长\ntotalcount: Site words total count\ncopyright: true\n---\n<blockquote class=\"blockquote-center\">\n<img src=\"https://www.runoob.com/wp-content/uploads/2017/01/vue.png\"></img>\nvue3都做了什么呢？\n</blockquote>\n<!-- more -->\n#### 性能提升\n- 打包大小减少41%\n- 初次渲染快55%，133%\n- 内存使用减少54%\n\n#### Composition API\n- ref 和 reactive\n- computed 和 watch\n- 新的生命周期函数\n- 自定义函数-Hooks 函数\n\n#### 新增特性\n- Teleport 瞬移组件的位置\n- Suspense 异步加载组件的新福音\n- 全局 API 的修改和优化\n- 更多的试验性特性\n\n#### 更好的ts支持\n\n\n\n#### 为什么要有vue3（解决现有存在的棘手问题）\n- 随着功能的增长，复杂组件的代码变得难以维护\n\n- Mixin 的缺点\n\n1. 明明冲突\n2. 不清楚暴露出来的变量的作用\n3. 重用到其他component经常遇到问题\n\n\n- setup 中无法访问 this\n\n- 新生命周期\n\n![生命周期](vue3-新特性/生命周期.png)\n\n#### 免费api： https://dog.ceo/dog-api/\n\n#### teleport 瞬间移动\n\n- 将子节点渲染到存在于父组件以外的 DOM 节点\n\n#### definedComponent\n\n- 为ts而定义，保存输入输出整个对象，组件的定义与导出都是 object，更好的提示\n\n#### Suspense\n\n- 异步请求的困境\n- suspense 是 vue3 推出的一个内置的特殊组件\n- 使用 suspense，要返回一个 promise\n\n```vue\n<!--如果放两个组件不显示，那么加一个div即可-->\n<Suspense>\n<template #default>\n  <div>\n    <asyncShow></asyncShow>\n    <dogShow></dogShow>\n  </div>\n</template>\n<template #fallback>\n  <h1>loading ------ </h1>\n</template>\n</Suspense>\n```\n\n#### vue2 全局 API 遇到的问题\n\n- 在单元测试中，全局配置非常容易污染全局环境\n- 在不同的 apps 中，共享一份有不同配置的 vue 对象，也变得非常困难\n\n##### 全局配置：Vue.config -> app.config\n\n- config.productionTip 被删除\n- config.ignoredElements 改名为 config.isCustomElement\n- config,keyCodes 被删除\n\n#### 全局注册类 API\n\n- Vue.component -> app.component\n- Vue.directive -> app.directive\n\n#### 行为扩展类\n- Vue，minxin -> app.minxin\n- Vue.use -> app.use\n\n\n#### 完美的 vue 实践项目是怎样的？\n- 数据的展示 - 最好是有多级复杂数据的展示\n- 数据的创建 - 可以发散出多个功能\n- 组件的抽象 - 循序渐进的组件开发\n\n- 整体状态数据结构的设计和实现\n- 权限管理和控制\n- 真实的后端 API\n\n#### 开发流程\n\n- 将 ui 话划分出组件的层级\n- 创建应用的静态版本\n\n\n\n","slug":"vue3-新特性","published":1,"updated":"2021-07-07T06:50:13.133Z","_id":"ckqt3wuf90033zgsynwhw1c1h","comments":1,"layout":"post","photos":[],"link":"","content":"<p><blockquote class=\"blockquote-center\"><br><img src=\"https://www.runoob.com/wp-content/uploads/2017/01/vue.png\"><br>vue3都做了什么呢？<br></blockquote><br><a id=\"more\"></a></p>\n<h4 id=\"性能提升\"><a href=\"#性能提升\" class=\"headerlink\" title=\"性能提升\"></a>性能提升</h4><ul>\n<li>打包大小减少41%</li>\n<li>初次渲染快55%，133%</li>\n<li>内存使用减少54%</li>\n</ul>\n<h4 id=\"Composition-API\"><a href=\"#Composition-API\" class=\"headerlink\" title=\"Composition API\"></a>Composition API</h4><ul>\n<li>ref 和 reactive</li>\n<li>computed 和 watch</li>\n<li>新的生命周期函数</li>\n<li>自定义函数-Hooks 函数</li>\n</ul>\n<h4 id=\"新增特性\"><a href=\"#新增特性\" class=\"headerlink\" title=\"新增特性\"></a>新增特性</h4><ul>\n<li>Teleport 瞬移组件的位置</li>\n<li>Suspense 异步加载组件的新福音</li>\n<li>全局 API 的修改和优化</li>\n<li>更多的试验性特性</li>\n</ul>\n<h4 id=\"更好的ts支持\"><a href=\"#更好的ts支持\" class=\"headerlink\" title=\"更好的ts支持\"></a>更好的ts支持</h4><h4 id=\"为什么要有vue3（解决现有存在的棘手问题）\"><a href=\"#为什么要有vue3（解决现有存在的棘手问题）\" class=\"headerlink\" title=\"为什么要有vue3（解决现有存在的棘手问题）\"></a>为什么要有vue3（解决现有存在的棘手问题）</h4><ul>\n<li><p>随着功能的增长，复杂组件的代码变得难以维护</p>\n</li>\n<li><p>Mixin 的缺点</p>\n</li>\n</ul>\n<ol>\n<li>明明冲突</li>\n<li>不清楚暴露出来的变量的作用</li>\n<li>重用到其他component经常遇到问题</li>\n</ol>\n<ul>\n<li><p>setup 中无法访问 this</p>\n</li>\n<li><p>新生命周期</p>\n</li>\n</ul>\n<p><img src=\"//github.com/onlyH/onlyh.github.io/2021/07/01/vue3-新特性/生命周期.png\" alt=\"生命周期\"></p>\n<h4 id=\"免费api：-https-dog-ceo-dog-api\"><a href=\"#免费api：-https-dog-ceo-dog-api\" class=\"headerlink\" title=\"免费api： https://dog.ceo/dog-api/\"></a>免费api： <a href=\"https://dog.ceo/dog-api/\" target=\"_blank\" rel=\"noopener\">https://dog.ceo/dog-api/</a></h4><h4 id=\"teleport-瞬间移动\"><a href=\"#teleport-瞬间移动\" class=\"headerlink\" title=\"teleport 瞬间移动\"></a>teleport 瞬间移动</h4><ul>\n<li>将子节点渲染到存在于父组件以外的 DOM 节点</li>\n</ul>\n<h4 id=\"definedComponent\"><a href=\"#definedComponent\" class=\"headerlink\" title=\"definedComponent\"></a>definedComponent</h4><ul>\n<li>为ts而定义，保存输入输出整个对象，组件的定义与导出都是 object，更好的提示</li>\n</ul>\n<h4 id=\"Suspense\"><a href=\"#Suspense\" class=\"headerlink\" title=\"Suspense\"></a>Suspense</h4><ul>\n<li>异步请求的困境</li>\n<li>suspense 是 vue3 推出的一个内置的特殊组件</li>\n<li>使用 suspense，要返回一个 promise</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--如果放两个组件不显示，那么加一个div即可--&gt;</span><br><span class=\"line\">&lt;Suspense&gt;</span><br><span class=\"line\">&lt;template #default&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;asyncShow&gt;&lt;/asyncShow&gt;</span><br><span class=\"line\">    &lt;dogShow&gt;&lt;/dogShow&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;template #fallback&gt;</span><br><span class=\"line\">  &lt;h1&gt;loading ------ &lt;/h1&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;/Suspense&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"vue2-全局-API-遇到的问题\"><a href=\"#vue2-全局-API-遇到的问题\" class=\"headerlink\" title=\"vue2 全局 API 遇到的问题\"></a>vue2 全局 API 遇到的问题</h4><ul>\n<li>在单元测试中，全局配置非常容易污染全局环境</li>\n<li>在不同的 apps 中，共享一份有不同配置的 vue 对象，也变得非常困难</li>\n</ul>\n<h5 id=\"全局配置：Vue-config-gt-app-config\"><a href=\"#全局配置：Vue-config-gt-app-config\" class=\"headerlink\" title=\"全局配置：Vue.config -&gt; app.config\"></a>全局配置：Vue.config -&gt; app.config</h5><ul>\n<li>config.productionTip 被删除</li>\n<li>config.ignoredElements 改名为 config.isCustomElement</li>\n<li>config,keyCodes 被删除</li>\n</ul>\n<h4 id=\"全局注册类-API\"><a href=\"#全局注册类-API\" class=\"headerlink\" title=\"全局注册类 API\"></a>全局注册类 API</h4><ul>\n<li>Vue.component -&gt; app.component</li>\n<li>Vue.directive -&gt; app.directive</li>\n</ul>\n<h4 id=\"行为扩展类\"><a href=\"#行为扩展类\" class=\"headerlink\" title=\"行为扩展类\"></a>行为扩展类</h4><ul>\n<li>Vue，minxin -&gt; app.minxin</li>\n<li>Vue.use -&gt; app.use</li>\n</ul>\n<h4 id=\"完美的-vue-实践项目是怎样的？\"><a href=\"#完美的-vue-实践项目是怎样的？\" class=\"headerlink\" title=\"完美的 vue 实践项目是怎样的？\"></a>完美的 vue 实践项目是怎样的？</h4><ul>\n<li>数据的展示 - 最好是有多级复杂数据的展示</li>\n<li>数据的创建 - 可以发散出多个功能</li>\n<li><p>组件的抽象 - 循序渐进的组件开发</p>\n</li>\n<li><p>整体状态数据结构的设计和实现</p>\n</li>\n<li>权限管理和控制</li>\n<li>真实的后端 API</li>\n</ul>\n<h4 id=\"开发流程\"><a href=\"#开发流程\" class=\"headerlink\" title=\"开发流程\"></a>开发流程</h4><ul>\n<li>将 ui 话划分出组件的层级</li>\n<li>创建应用的静态版本</li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"<p><blockquote class=\"blockquote-center\"><br><img src=\"https://www.runoob.com/wp-content/uploads/2017/01/vue.png\"><br>vue3都做了什么呢？<br></blockquote><br></p>","more":"<p></p>\n<h4 id=\"性能提升\"><a href=\"#性能提升\" class=\"headerlink\" title=\"性能提升\"></a>性能提升</h4><ul>\n<li>打包大小减少41%</li>\n<li>初次渲染快55%，133%</li>\n<li>内存使用减少54%</li>\n</ul>\n<h4 id=\"Composition-API\"><a href=\"#Composition-API\" class=\"headerlink\" title=\"Composition API\"></a>Composition API</h4><ul>\n<li>ref 和 reactive</li>\n<li>computed 和 watch</li>\n<li>新的生命周期函数</li>\n<li>自定义函数-Hooks 函数</li>\n</ul>\n<h4 id=\"新增特性\"><a href=\"#新增特性\" class=\"headerlink\" title=\"新增特性\"></a>新增特性</h4><ul>\n<li>Teleport 瞬移组件的位置</li>\n<li>Suspense 异步加载组件的新福音</li>\n<li>全局 API 的修改和优化</li>\n<li>更多的试验性特性</li>\n</ul>\n<h4 id=\"更好的ts支持\"><a href=\"#更好的ts支持\" class=\"headerlink\" title=\"更好的ts支持\"></a>更好的ts支持</h4><h4 id=\"为什么要有vue3（解决现有存在的棘手问题）\"><a href=\"#为什么要有vue3（解决现有存在的棘手问题）\" class=\"headerlink\" title=\"为什么要有vue3（解决现有存在的棘手问题）\"></a>为什么要有vue3（解决现有存在的棘手问题）</h4><ul>\n<li><p>随着功能的增长，复杂组件的代码变得难以维护</p>\n</li>\n<li><p>Mixin 的缺点</p>\n</li>\n</ul>\n<ol>\n<li>明明冲突</li>\n<li>不清楚暴露出来的变量的作用</li>\n<li>重用到其他component经常遇到问题</li>\n</ol>\n<ul>\n<li><p>setup 中无法访问 this</p>\n</li>\n<li><p>新生命周期</p>\n</li>\n</ul>\n<p><img src=\"//github.com/onlyH/onlyh.github.io/2021/07/01/vue3-新特性/生命周期.png\" alt=\"生命周期\"></p>\n<h4 id=\"免费api：-https-dog-ceo-dog-api\"><a href=\"#免费api：-https-dog-ceo-dog-api\" class=\"headerlink\" title=\"免费api： https://dog.ceo/dog-api/\"></a>免费api： <a href=\"https://dog.ceo/dog-api/\" target=\"_blank\" rel=\"noopener\">https://dog.ceo/dog-api/</a></h4><h4 id=\"teleport-瞬间移动\"><a href=\"#teleport-瞬间移动\" class=\"headerlink\" title=\"teleport 瞬间移动\"></a>teleport 瞬间移动</h4><ul>\n<li>将子节点渲染到存在于父组件以外的 DOM 节点</li>\n</ul>\n<h4 id=\"definedComponent\"><a href=\"#definedComponent\" class=\"headerlink\" title=\"definedComponent\"></a>definedComponent</h4><ul>\n<li>为ts而定义，保存输入输出整个对象，组件的定义与导出都是 object，更好的提示</li>\n</ul>\n<h4 id=\"Suspense\"><a href=\"#Suspense\" class=\"headerlink\" title=\"Suspense\"></a>Suspense</h4><ul>\n<li>异步请求的困境</li>\n<li>suspense 是 vue3 推出的一个内置的特殊组件</li>\n<li>使用 suspense，要返回一个 promise</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--如果放两个组件不显示，那么加一个div即可--&gt;</span><br><span class=\"line\">&lt;Suspense&gt;</span><br><span class=\"line\">&lt;template #default&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;asyncShow&gt;&lt;/asyncShow&gt;</span><br><span class=\"line\">    &lt;dogShow&gt;&lt;/dogShow&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;template #fallback&gt;</span><br><span class=\"line\">  &lt;h1&gt;loading ------ &lt;/h1&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;/Suspense&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"vue2-全局-API-遇到的问题\"><a href=\"#vue2-全局-API-遇到的问题\" class=\"headerlink\" title=\"vue2 全局 API 遇到的问题\"></a>vue2 全局 API 遇到的问题</h4><ul>\n<li>在单元测试中，全局配置非常容易污染全局环境</li>\n<li>在不同的 apps 中，共享一份有不同配置的 vue 对象，也变得非常困难</li>\n</ul>\n<h5 id=\"全局配置：Vue-config-gt-app-config\"><a href=\"#全局配置：Vue-config-gt-app-config\" class=\"headerlink\" title=\"全局配置：Vue.config -&gt; app.config\"></a>全局配置：Vue.config -&gt; app.config</h5><ul>\n<li>config.productionTip 被删除</li>\n<li>config.ignoredElements 改名为 config.isCustomElement</li>\n<li>config,keyCodes 被删除</li>\n</ul>\n<h4 id=\"全局注册类-API\"><a href=\"#全局注册类-API\" class=\"headerlink\" title=\"全局注册类 API\"></a>全局注册类 API</h4><ul>\n<li>Vue.component -&gt; app.component</li>\n<li>Vue.directive -&gt; app.directive</li>\n</ul>\n<h4 id=\"行为扩展类\"><a href=\"#行为扩展类\" class=\"headerlink\" title=\"行为扩展类\"></a>行为扩展类</h4><ul>\n<li>Vue，minxin -&gt; app.minxin</li>\n<li>Vue.use -&gt; app.use</li>\n</ul>\n<h4 id=\"完美的-vue-实践项目是怎样的？\"><a href=\"#完美的-vue-实践项目是怎样的？\" class=\"headerlink\" title=\"完美的 vue 实践项目是怎样的？\"></a>完美的 vue 实践项目是怎样的？</h4><ul>\n<li>数据的展示 - 最好是有多级复杂数据的展示</li>\n<li>数据的创建 - 可以发散出多个功能</li>\n<li><p>组件的抽象 - 循序渐进的组件开发</p>\n</li>\n<li><p>整体状态数据结构的设计和实现</p>\n</li>\n<li>权限管理和控制</li>\n<li>真实的后端 API</li>\n</ul>\n<h4 id=\"开发流程\"><a href=\"#开发流程\" class=\"headerlink\" title=\"开发流程\"></a>开发流程</h4><ul>\n<li>将 ui 话划分出组件的层级</li>\n<li>创建应用的静态版本</li>\n</ul>"},{"title":"vue上传文件","date":"2018-02-27T16:00:00.000Z","_content":"\n例如点击标签`<span @click = \"addLesson\"></span>`上传文件\n```html\n<input @change=\"fileChange(lesson,$event.target)\" type=\"file\">\n```\n\n\n```javascript  \naddLesson:function() {\n    this.lessons.push({\n        name:'',\n        files:[],\n        editing:true //需要隐藏的地方/显示的地方\n    })\n} \n\nfileChange:function(course,input) {\n    let fileObj = input.file[0]\n    let file = {\n        previewFlag:false, //是否可预览\n        name:fileObj.name,\n        process:0,\n        size:fileObj.size\n    };\n    course.files.push(file)\n}\n```","source":"_posts/vue_upfile.md","raw":"---\ntitle: vue上传文件\ndate: 2018-2-28\ncategories: vue\ntags: [编程,学习]\n---\n\n例如点击标签`<span @click = \"addLesson\"></span>`上传文件\n```html\n<input @change=\"fileChange(lesson,$event.target)\" type=\"file\">\n```\n\n\n```javascript  \naddLesson:function() {\n    this.lessons.push({\n        name:'',\n        files:[],\n        editing:true //需要隐藏的地方/显示的地方\n    })\n} \n\nfileChange:function(course,input) {\n    let fileObj = input.file[0]\n    let file = {\n        previewFlag:false, //是否可预览\n        name:fileObj.name,\n        process:0,\n        size:fileObj.size\n    };\n    course.files.push(file)\n}\n```","slug":"vue_upfile","published":1,"updated":"2021-07-01T07:30:54.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wufb0037zgsy3z5ptrvs","content":"<p>例如点击标签<code>&lt;span @click = &quot;addLesson&quot;&gt;&lt;/span&gt;</code>上传文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">change</span>=<span class=\"string\">\"fileChange(lesson,$event.target)\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addLesson:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.lessons.push(&#123;</span><br><span class=\"line\">        name:<span class=\"string\">''</span>,</span><br><span class=\"line\">        files:[],</span><br><span class=\"line\">        editing:<span class=\"literal\">true</span> <span class=\"comment\">//需要隐藏的地方/显示的地方</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">fileChange:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">course,input</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileObj = input.file[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> file = &#123;</span><br><span class=\"line\">        previewFlag:<span class=\"literal\">false</span>, <span class=\"comment\">//是否可预览</span></span><br><span class=\"line\">        name:fileObj.name,</span><br><span class=\"line\">        process:<span class=\"number\">0</span>,</span><br><span class=\"line\">        size:fileObj.size</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    course.files.push(file)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>例如点击标签<code>&lt;span @click = &quot;addLesson&quot;&gt;&lt;/span&gt;</code>上传文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">change</span>=<span class=\"string\">\"fileChange(lesson,$event.target)\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addLesson:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.lessons.push(&#123;</span><br><span class=\"line\">        name:<span class=\"string\">''</span>,</span><br><span class=\"line\">        files:[],</span><br><span class=\"line\">        editing:<span class=\"literal\">true</span> <span class=\"comment\">//需要隐藏的地方/显示的地方</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">fileChange:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">course,input</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileObj = input.file[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> file = &#123;</span><br><span class=\"line\">        previewFlag:<span class=\"literal\">false</span>, <span class=\"comment\">//是否可预览</span></span><br><span class=\"line\">        name:fileObj.name,</span><br><span class=\"line\">        process:<span class=\"number\">0</span>,</span><br><span class=\"line\">        size:fileObj.size</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    course.files.push(file)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"webpack.config.js配置错误问题","copyright":true,"_content":"今日搭建webpack的时候，一直在报错，其中一个问题是`Cannot find module '@babel/core'问题`\n最初以为是babel-core没有安装上。重装了好几遍babel-core还是不行。对照以前的项目,发现babel-loader的版本不一样,之前的是@7.1.5版本,而现在是@8.0.0版本。\n- 解决办法：降版本。。。\n`npm uninstall babel-loader npm install babel-loader@7.1.5`\n\n#### 官方文档说：\n##### 官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel","source":"_posts/webpack-babel-core.md","raw":"---\ntitle: webpack.config.js配置错误问题\ncategories: webpack\ntags: [编程,感悟]\ncopyright: true\n---\n今日搭建webpack的时候，一直在报错，其中一个问题是`Cannot find module '@babel/core'问题`\n最初以为是babel-core没有安装上。重装了好几遍babel-core还是不行。对照以前的项目,发现babel-loader的版本不一样,之前的是@7.1.5版本,而现在是@8.0.0版本。\n- 解决办法：降版本。。。\n`npm uninstall babel-loader npm install babel-loader@7.1.5`\n\n#### 官方文档说：\n##### 官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel","slug":"webpack-babel-core","published":1,"date":"2021-07-01T07:30:54.555Z","updated":"2021-07-01T07:30:54.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wufd003bzgsy4ad30r7o","content":"<p>今日搭建webpack的时候，一直在报错，其中一个问题是<code>Cannot find module &#39;@babel/core&#39;问题</code><br>最初以为是babel-core没有安装上。重装了好几遍babel-core还是不行。对照以前的项目,发现babel-loader的版本不一样,之前的是@7.1.5版本,而现在是@8.0.0版本。</p>\n<ul>\n<li>解决办法：降版本。。。<br><code>npm uninstall babel-loader npm install babel-loader@7.1.5</code></li>\n</ul>\n<h4 id=\"官方文档说：\"><a href=\"#官方文档说：\" class=\"headerlink\" title=\"官方文档说：\"></a>官方文档说：</h4><h5 id=\"官方默认babel-loader-babel-对应的版本需要一致-即babel-loader需要搭配最新版本babel\"><a href=\"#官方默认babel-loader-babel-对应的版本需要一致-即babel-loader需要搭配最新版本babel\" class=\"headerlink\" title=\"官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel\"></a>官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel</h5>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>今日搭建webpack的时候，一直在报错，其中一个问题是<code>Cannot find module &#39;@babel/core&#39;问题</code><br>最初以为是babel-core没有安装上。重装了好几遍babel-core还是不行。对照以前的项目,发现babel-loader的版本不一样,之前的是@7.1.5版本,而现在是@8.0.0版本。</p>\n<ul>\n<li>解决办法：降版本。。。<br><code>npm uninstall babel-loader npm install babel-loader@7.1.5</code></li>\n</ul>\n<h4 id=\"官方文档说：\"><a href=\"#官方文档说：\" class=\"headerlink\" title=\"官方文档说：\"></a>官方文档说：</h4><h5 id=\"官方默认babel-loader-babel-对应的版本需要一致-即babel-loader需要搭配最新版本babel\"><a href=\"#官方默认babel-loader-babel-对应的版本需要一致-即babel-loader需要搭配最新版本babel\" class=\"headerlink\" title=\"官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel\"></a>官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel</h5>"},{"title":"webpack配置","_content":"\n\n#### webpack属性配置\n```javascript\n const path = require('path')\n module.exports = {\n     entry:{\n         //main默认入口，可以是多入口\n         main:'./src/main.js'\n     },\n     //出口\n     output:{\n         filemane:'./build.js',\n         //指定js文件\n         path:path.join(__dirname,'..','dist',)\n         //最好是绝对路径，代表当前目录的上一级的dist\n     },\n     module:{\n            // 一样的功能rules:   webpack2.x之后新加的\n            loaders:[       require('./a.css||./a.js')\n                {test:/\\.css$/,\n                 loader:'style-loader!css-loader',\n               //  顺序是反过来的2!1\n                },\n                {\n                 test:/\\.(jpg|svg)$/,\n                 loader:'url-loader?limit=4096&name=[name].[ext]',\n                // 顺序是反过来的2!1 \n               //  [name].[ext]内置提供的，因为本身是先读这个文件\n                 options:{\n                    limit:4096,\n                    name:'[name].[ext]'\n                 }\n                }\n            ]\n     },\n     plugins:[\n         //  插件的执行顺序是依次执行的\n            new htmlWebpackPlugin({\n                template:'./src/index.html',\n                })\n                //将src下的template属性描述的文件根据当前配置的output.path，将文件移动到该目录\n     ]\n }\n```\n#### webpack-es6\n* vue默认支持es6的模块导入导出\n* babel-->babel-core\n\n#### es6模块\n\n```javascript\n//default\nimport [,...xxx] [,..form] './xxx.ext'\nexport default obj;\n\n//声明式\nexport var obj = xxx\nexport var obj2 = {}\nexport {stu}//单独导出\nimport {obj,obj2,stu} form './xxx.js'    //直接使用obj\n\n```\n* 默认导出和声明式导入在使用上的区别\n    - 声明式导入的时候，必须{名称} 名称要一致（按需导入)\n    - 默认导入，可以随意的使用变量名\n\n ```javascript\n{\ndefault:\"我是默认导出的结果\"    \n        import xxx from './cal.js'会获取到整个对象的default属性\nobj1:\"我是声明式导出1\"\nobj2:\"我是声明式导出2\" \nobj3:\"我是声明式导出3\"     import {obj1,obj2}\nobj4:\"我是声明式导出4\"\n}\n    import * as allObj from './cal.js';  获取的就是一整个对象\n```\n* import 和export一定写在顶级，不要包含在{}内\n\n\n\n- build：打包配置所在的文件夹\n- 打包的配置\n- 开发项目的源码\n- App.vue入口组件(.vue都是一个组件)\n- main.js项目入口的文件\n- static：静态资源\n- webpack.base.conf.js 打包核心的配置与config->index.js可以合并成为一个\n\n- build.js打生产包\n\n\n- package.json\n1. 项目描述\n2. dependencies：依赖库\n3. devDependencied：开发依赖库\n4. engines： 引擎\n5. browserslist：浏览器列表\n\n\n","source":"_posts/webpack.md","raw":"---\ntitle: webpack配置\ncategories: webpack\ntags: [编程,感悟]\n---\n\n\n#### webpack属性配置\n```javascript\n const path = require('path')\n module.exports = {\n     entry:{\n         //main默认入口，可以是多入口\n         main:'./src/main.js'\n     },\n     //出口\n     output:{\n         filemane:'./build.js',\n         //指定js文件\n         path:path.join(__dirname,'..','dist',)\n         //最好是绝对路径，代表当前目录的上一级的dist\n     },\n     module:{\n            // 一样的功能rules:   webpack2.x之后新加的\n            loaders:[       require('./a.css||./a.js')\n                {test:/\\.css$/,\n                 loader:'style-loader!css-loader',\n               //  顺序是反过来的2!1\n                },\n                {\n                 test:/\\.(jpg|svg)$/,\n                 loader:'url-loader?limit=4096&name=[name].[ext]',\n                // 顺序是反过来的2!1 \n               //  [name].[ext]内置提供的，因为本身是先读这个文件\n                 options:{\n                    limit:4096,\n                    name:'[name].[ext]'\n                 }\n                }\n            ]\n     },\n     plugins:[\n         //  插件的执行顺序是依次执行的\n            new htmlWebpackPlugin({\n                template:'./src/index.html',\n                })\n                //将src下的template属性描述的文件根据当前配置的output.path，将文件移动到该目录\n     ]\n }\n```\n#### webpack-es6\n* vue默认支持es6的模块导入导出\n* babel-->babel-core\n\n#### es6模块\n\n```javascript\n//default\nimport [,...xxx] [,..form] './xxx.ext'\nexport default obj;\n\n//声明式\nexport var obj = xxx\nexport var obj2 = {}\nexport {stu}//单独导出\nimport {obj,obj2,stu} form './xxx.js'    //直接使用obj\n\n```\n* 默认导出和声明式导入在使用上的区别\n    - 声明式导入的时候，必须{名称} 名称要一致（按需导入)\n    - 默认导入，可以随意的使用变量名\n\n ```javascript\n{\ndefault:\"我是默认导出的结果\"    \n        import xxx from './cal.js'会获取到整个对象的default属性\nobj1:\"我是声明式导出1\"\nobj2:\"我是声明式导出2\" \nobj3:\"我是声明式导出3\"     import {obj1,obj2}\nobj4:\"我是声明式导出4\"\n}\n    import * as allObj from './cal.js';  获取的就是一整个对象\n```\n* import 和export一定写在顶级，不要包含在{}内\n\n\n\n- build：打包配置所在的文件夹\n- 打包的配置\n- 开发项目的源码\n- App.vue入口组件(.vue都是一个组件)\n- main.js项目入口的文件\n- static：静态资源\n- webpack.base.conf.js 打包核心的配置与config->index.js可以合并成为一个\n\n- build.js打生产包\n\n\n- package.json\n1. 项目描述\n2. dependencies：依赖库\n3. devDependencied：开发依赖库\n4. engines： 引擎\n5. browserslist：浏览器列表\n\n\n","slug":"webpack","published":1,"date":"2021-07-01T07:30:54.555Z","updated":"2021-07-01T07:30:54.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuff003ezgsy2sden9at","content":"<h4 id=\"webpack属性配置\"><a href=\"#webpack属性配置\" class=\"headerlink\" title=\"webpack属性配置\"></a>webpack属性配置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        <span class=\"comment\">//main默认入口，可以是多入口</span></span><br><span class=\"line\">        main:<span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//出口</span></span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        filemane:<span class=\"string\">'./build.js'</span>,</span><br><span class=\"line\">        <span class=\"comment\">//指定js文件</span></span><br><span class=\"line\">        path:path.join(__dirname,<span class=\"string\">'..'</span>,<span class=\"string\">'dist'</span>,)</span><br><span class=\"line\">        <span class=\"comment\">//最好是绝对路径，代表当前目录的上一级的dist</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">           <span class=\"comment\">// 一样的功能rules:   webpack2.x之后新加的</span></span><br><span class=\"line\">           loaders:[       <span class=\"built_in\">require</span>(<span class=\"string\">'./a.css||./a.js'</span>)</span><br><span class=\"line\">               &#123;<span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                loader:<span class=\"string\">'style-loader!css-loader'</span>,</span><br><span class=\"line\">              <span class=\"comment\">//  顺序是反过来的2!1</span></span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                test:<span class=\"regexp\">/\\.(jpg|svg)$/</span>,</span><br><span class=\"line\">                loader:<span class=\"string\">'url-loader?limit=4096&amp;name=[name].[ext]'</span>,</span><br><span class=\"line\">               <span class=\"comment\">// 顺序是反过来的2!1 </span></span><br><span class=\"line\">              <span class=\"comment\">//  [name].[ext]内置提供的，因为本身是先读这个文件</span></span><br><span class=\"line\">                options:&#123;</span><br><span class=\"line\">                   limit:<span class=\"number\">4096</span>,</span><br><span class=\"line\">                   name:<span class=\"string\">'[name].[ext]'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">        <span class=\"comment\">//  插件的执行顺序是依次执行的</span></span><br><span class=\"line\">           <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">               template:<span class=\"string\">'./src/index.html'</span>,</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">               <span class=\"comment\">//将src下的template属性描述的文件根据当前配置的output.path，将文件移动到该目录</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"webpack-es6\"><a href=\"#webpack-es6\" class=\"headerlink\" title=\"webpack-es6\"></a>webpack-es6</h4><ul>\n<li>vue默认支持es6的模块导入导出</li>\n<li>babel–&gt;babel-core</li>\n</ul>\n<h4 id=\"es6模块\"><a href=\"#es6模块\" class=\"headerlink\" title=\"es6模块\"></a>es6模块</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//default</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> [,...xxx] [,..form] <span class=\"string\">'./xxx.ext'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> obj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明式</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> obj = xxx</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> obj2 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;stu&#125;<span class=\"comment\">//单独导出</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;obj,obj2,stu&#125; form <span class=\"string\">'./xxx.js'</span>    <span class=\"comment\">//直接使用obj</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>默认导出和声明式导入在使用上的区别</p>\n<ul>\n<li>声明式导入的时候，必须{名称} 名称要一致（按需导入)</li>\n<li>默认导入，可以随意的使用变量名</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">default</span>:<span class=\"string\">\"我是默认导出的结果\"</span>    </span><br><span class=\"line\">        <span class=\"keyword\">import</span> xxx <span class=\"keyword\">from</span> <span class=\"string\">'./cal.js'</span>会获取到整个对象的<span class=\"keyword\">default</span>属性</span><br><span class=\"line\">obj1:<span class=\"string\">\"我是声明式导出1\"</span></span><br><span class=\"line\">obj2:<span class=\"string\">\"我是声明式导出2\"</span> </span><br><span class=\"line\">obj3:<span class=\"string\">\"我是声明式导出3\"</span>     <span class=\"keyword\">import</span> &#123;obj1,obj2&#125;</span><br><span class=\"line\">obj4:<span class=\"string\">\"我是声明式导出4\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> allObj <span class=\"keyword\">from</span> <span class=\"string\">'./cal.js'</span>;  获取的就是一整个对象</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>import 和export一定写在顶级，不要包含在{}内</p>\n</li>\n</ul>\n<ul>\n<li>build：打包配置所在的文件夹</li>\n<li>打包的配置</li>\n<li>开发项目的源码</li>\n<li>App.vue入口组件(.vue都是一个组件)</li>\n<li>main.js项目入口的文件</li>\n<li>static：静态资源</li>\n<li><p>webpack.base.conf.js 打包核心的配置与config-&gt;index.js可以合并成为一个</p>\n</li>\n<li><p>build.js打生产包</p>\n</li>\n</ul>\n<ul>\n<li>package.json</li>\n</ul>\n<ol>\n<li>项目描述</li>\n<li>dependencies：依赖库</li>\n<li>devDependencied：开发依赖库</li>\n<li>engines： 引擎</li>\n<li>browserslist：浏览器列表</li>\n</ol>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<h4 id=\"webpack属性配置\"><a href=\"#webpack属性配置\" class=\"headerlink\" title=\"webpack属性配置\"></a>webpack属性配置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        <span class=\"comment\">//main默认入口，可以是多入口</span></span><br><span class=\"line\">        main:<span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//出口</span></span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        filemane:<span class=\"string\">'./build.js'</span>,</span><br><span class=\"line\">        <span class=\"comment\">//指定js文件</span></span><br><span class=\"line\">        path:path.join(__dirname,<span class=\"string\">'..'</span>,<span class=\"string\">'dist'</span>,)</span><br><span class=\"line\">        <span class=\"comment\">//最好是绝对路径，代表当前目录的上一级的dist</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">           <span class=\"comment\">// 一样的功能rules:   webpack2.x之后新加的</span></span><br><span class=\"line\">           loaders:[       <span class=\"built_in\">require</span>(<span class=\"string\">'./a.css||./a.js'</span>)</span><br><span class=\"line\">               &#123;<span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">                loader:<span class=\"string\">'style-loader!css-loader'</span>,</span><br><span class=\"line\">              <span class=\"comment\">//  顺序是反过来的2!1</span></span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                test:<span class=\"regexp\">/\\.(jpg|svg)$/</span>,</span><br><span class=\"line\">                loader:<span class=\"string\">'url-loader?limit=4096&amp;name=[name].[ext]'</span>,</span><br><span class=\"line\">               <span class=\"comment\">// 顺序是反过来的2!1 </span></span><br><span class=\"line\">              <span class=\"comment\">//  [name].[ext]内置提供的，因为本身是先读这个文件</span></span><br><span class=\"line\">                options:&#123;</span><br><span class=\"line\">                   limit:<span class=\"number\">4096</span>,</span><br><span class=\"line\">                   name:<span class=\"string\">'[name].[ext]'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">        <span class=\"comment\">//  插件的执行顺序是依次执行的</span></span><br><span class=\"line\">           <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">               template:<span class=\"string\">'./src/index.html'</span>,</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">               <span class=\"comment\">//将src下的template属性描述的文件根据当前配置的output.path，将文件移动到该目录</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"webpack-es6\"><a href=\"#webpack-es6\" class=\"headerlink\" title=\"webpack-es6\"></a>webpack-es6</h4><ul>\n<li>vue默认支持es6的模块导入导出</li>\n<li>babel–&gt;babel-core</li>\n</ul>\n<h4 id=\"es6模块\"><a href=\"#es6模块\" class=\"headerlink\" title=\"es6模块\"></a>es6模块</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//default</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> [,...xxx] [,..form] <span class=\"string\">'./xxx.ext'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> obj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明式</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> obj = xxx</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> obj2 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;stu&#125;<span class=\"comment\">//单独导出</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;obj,obj2,stu&#125; form <span class=\"string\">'./xxx.js'</span>    <span class=\"comment\">//直接使用obj</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>默认导出和声明式导入在使用上的区别</p>\n<ul>\n<li>声明式导入的时候，必须{名称} 名称要一致（按需导入)</li>\n<li>默认导入，可以随意的使用变量名</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">default</span>:<span class=\"string\">\"我是默认导出的结果\"</span>    </span><br><span class=\"line\">        <span class=\"keyword\">import</span> xxx <span class=\"keyword\">from</span> <span class=\"string\">'./cal.js'</span>会获取到整个对象的<span class=\"keyword\">default</span>属性</span><br><span class=\"line\">obj1:<span class=\"string\">\"我是声明式导出1\"</span></span><br><span class=\"line\">obj2:<span class=\"string\">\"我是声明式导出2\"</span> </span><br><span class=\"line\">obj3:<span class=\"string\">\"我是声明式导出3\"</span>     <span class=\"keyword\">import</span> &#123;obj1,obj2&#125;</span><br><span class=\"line\">obj4:<span class=\"string\">\"我是声明式导出4\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> allObj <span class=\"keyword\">from</span> <span class=\"string\">'./cal.js'</span>;  获取的就是一整个对象</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>import 和export一定写在顶级，不要包含在{}内</p>\n</li>\n</ul>\n<ul>\n<li>build：打包配置所在的文件夹</li>\n<li>打包的配置</li>\n<li>开发项目的源码</li>\n<li>App.vue入口组件(.vue都是一个组件)</li>\n<li>main.js项目入口的文件</li>\n<li>static：静态资源</li>\n<li><p>webpack.base.conf.js 打包核心的配置与config-&gt;index.js可以合并成为一个</p>\n</li>\n<li><p>build.js打生产包</p>\n</li>\n</ul>\n<ul>\n<li>package.json</li>\n</ul>\n<ol>\n<li>项目描述</li>\n<li>dependencies：依赖库</li>\n<li>devDependencied：开发依赖库</li>\n<li>engines： 引擎</li>\n<li>browserslist：浏览器列表</li>\n</ol>\n"},{"title":"vue简易下拉框","date":"2018-12-13T16:00:00.000Z","_content":"使用vue模拟了一个简易的下拉框，主要是根据传入当前索引实现数据切换的。具体实现代码如下：\n```html\n  <div class=\"dropdown show\">\n    <div class=\"dropdown-toggle\" @click=\"toggleDrop\"  ref=\"listParents\">\n    {{content.languages[nowIndex].name}}\n    </div>\n\n    <div class=\"drop\">\n    <a class=\"dropdown-item\"\n        v-show=\"isDrop\" \n        v-for=\"(ops,index) in content.languages\" \n        :key=\"ops.id\" \n        @click=\"chooseSelection(index)\">{{ops.name}}</a>\n    </div>\n</div>\n```\n```javascript\ndata(){\n    return {\n        isDrop:false,\n        nowIndex:0,\n        content{\n            languages:{\n                [\n                    name:'lele',\n                    id:1\n                ],\n                [\n                    name:'xiaohong',\n                    id:2\n                ],\n            }\n        }\n    }\n},\nmethods:{\n    toggleDrop() {\n        this.isDrop = !this.isDrop\n    },\n    chooseSelection(index) {\n        this.nowIndex = index;\n        this.isDrop = false\n    }\n}\n```\n关于点击空白处隐藏，具体实现的思路是：\n1. 给document添加一个事件监听\n2. 当发生点击事件的时候判断点击的是否是当前对象（vue使用ref）\n3. 此段js写在mounted函数里面\n```javascript\nmounted() {\n    document.addEventListener('click',e=>{\n        if(!this.$refs.listParents.contains(e.target)) { //这句是说如果我们点击到了listParents以外的区域\n            this.isDrop = false\n        }\n    })\n}\n```\n> 原生JS中是有contains方法的,但它并不是字符串方法，，仅用于判断DOM元素的包含关系，参数是Element类型 \n> JS中通用的contains方法判断两个节点的关系","source":"_posts/vue下拉框.md","raw":"---\ntitle: vue简易下拉框\ncategories: vue\ndate: 2018-12-14\ntags: [编程,学习]\n---\n使用vue模拟了一个简易的下拉框，主要是根据传入当前索引实现数据切换的。具体实现代码如下：\n```html\n  <div class=\"dropdown show\">\n    <div class=\"dropdown-toggle\" @click=\"toggleDrop\"  ref=\"listParents\">\n    {{content.languages[nowIndex].name}}\n    </div>\n\n    <div class=\"drop\">\n    <a class=\"dropdown-item\"\n        v-show=\"isDrop\" \n        v-for=\"(ops,index) in content.languages\" \n        :key=\"ops.id\" \n        @click=\"chooseSelection(index)\">{{ops.name}}</a>\n    </div>\n</div>\n```\n```javascript\ndata(){\n    return {\n        isDrop:false,\n        nowIndex:0,\n        content{\n            languages:{\n                [\n                    name:'lele',\n                    id:1\n                ],\n                [\n                    name:'xiaohong',\n                    id:2\n                ],\n            }\n        }\n    }\n},\nmethods:{\n    toggleDrop() {\n        this.isDrop = !this.isDrop\n    },\n    chooseSelection(index) {\n        this.nowIndex = index;\n        this.isDrop = false\n    }\n}\n```\n关于点击空白处隐藏，具体实现的思路是：\n1. 给document添加一个事件监听\n2. 当发生点击事件的时候判断点击的是否是当前对象（vue使用ref）\n3. 此段js写在mounted函数里面\n```javascript\nmounted() {\n    document.addEventListener('click',e=>{\n        if(!this.$refs.listParents.contains(e.target)) { //这句是说如果我们点击到了listParents以外的区域\n            this.isDrop = false\n        }\n    })\n}\n```\n> 原生JS中是有contains方法的,但它并不是字符串方法，，仅用于判断DOM元素的包含关系，参数是Element类型 \n> JS中通用的contains方法判断两个节点的关系","slug":"vue下拉框","published":1,"updated":"2021-07-01T07:30:54.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wumz004rzgsyowhqr76c","content":"<p>使用vue模拟了一个简易的下拉框，主要是根据传入当前索引实现数据切换的。具体实现代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown show\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-toggle\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"toggleDrop\"</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"listParents\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;content.languages[nowIndex].name&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"drop\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-show</span>=<span class=\"string\">\"isDrop\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-for</span>=<span class=\"string\">\"(ops,index) in content.languages\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:key</span>=<span class=\"string\">\"ops.id\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        @<span class=\"attr\">click</span>=<span class=\"string\">\"chooseSelection(index)\"</span>&gt;</span>&#123;&#123;ops.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        isDrop:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        nowIndex:<span class=\"number\">0</span>,</span><br><span class=\"line\">        content&#123;</span><br><span class=\"line\">            languages:&#123;</span><br><span class=\"line\">                [</span><br><span class=\"line\">                    name:<span class=\"string\">'lele'</span>,</span><br><span class=\"line\">                    id:<span class=\"number\">1</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                [</span><br><span class=\"line\">                    name:<span class=\"string\">'xiaohong'</span>,</span><br><span class=\"line\">                    id:<span class=\"number\">2</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    toggleDrop() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isDrop = !<span class=\"keyword\">this</span>.isDrop</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    chooseSelection(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nowIndex = index;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isDrop = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于点击空白处隐藏，具体实现的思路是：</p>\n<ol>\n<li>给document添加一个事件监听</li>\n<li>当发生点击事件的时候判断点击的是否是当前对象（vue使用ref）</li>\n<li>此段js写在mounted函数里面<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'click'</span>,e=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.$refs.listParents.contains(e.target)) &#123; <span class=\"comment\">//这句是说如果我们点击到了listParents以外的区域</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.isDrop = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>原生JS中是有contains方法的,但它并不是字符串方法，，仅用于判断DOM元素的包含关系，参数是Element类型<br>JS中通用的contains方法判断两个节点的关系</p>\n</blockquote>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>使用vue模拟了一个简易的下拉框，主要是根据传入当前索引实现数据切换的。具体实现代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown show\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-toggle\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"toggleDrop\"</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"listParents\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;content.languages[nowIndex].name&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"drop\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-show</span>=<span class=\"string\">\"isDrop\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-for</span>=<span class=\"string\">\"(ops,index) in content.languages\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:key</span>=<span class=\"string\">\"ops.id\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        @<span class=\"attr\">click</span>=<span class=\"string\">\"chooseSelection(index)\"</span>&gt;</span>&#123;&#123;ops.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        isDrop:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        nowIndex:<span class=\"number\">0</span>,</span><br><span class=\"line\">        content&#123;</span><br><span class=\"line\">            languages:&#123;</span><br><span class=\"line\">                [</span><br><span class=\"line\">                    name:<span class=\"string\">'lele'</span>,</span><br><span class=\"line\">                    id:<span class=\"number\">1</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                [</span><br><span class=\"line\">                    name:<span class=\"string\">'xiaohong'</span>,</span><br><span class=\"line\">                    id:<span class=\"number\">2</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    toggleDrop() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isDrop = !<span class=\"keyword\">this</span>.isDrop</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    chooseSelection(index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nowIndex = index;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isDrop = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于点击空白处隐藏，具体实现的思路是：</p>\n<ol>\n<li>给document添加一个事件监听</li>\n<li>当发生点击事件的时候判断点击的是否是当前对象（vue使用ref）</li>\n<li>此段js写在mounted函数里面<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'click'</span>,e=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.$refs.listParents.contains(e.target)) &#123; <span class=\"comment\">//这句是说如果我们点击到了listParents以外的区域</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.isDrop = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>原生JS中是有contains方法的,但它并不是字符串方法，，仅用于判断DOM元素的包含关系，参数是Element类型<br>JS中通用的contains方法判断两个节点的关系</p>\n</blockquote>\n"},{"title":"清空上传内容","date":"2018-04-27T16:00:00.000Z","_content":"\n如果要上传同一个文件。例如\n`<input @change=\"fileChange(lesson, $event.target,index)\" type=\"file\" accept=\".jpg,.png,.JPG,.PNG,.gif,.GIF,.xls,.xlsx,.ppt,.pptx,.doc,.docx,.txt,.pdf,.jpeg,.bmp,.XLS,.XLSX,.PPT,.PPTX,.DOC,.DOCX,.TXT,.PDF,.JPEG,.BMP\">\n`\n```javascript\n fileChange: function (course, input, index) {\n        let fileObj = input.files[0];\n        var file = {\n          prepare: false,//是否可预览\n          name: fileObj.name,\n          size: fileObj.size,\n          previewFlag: false,\n          process: true\n        };\n        course.files.push(file);\n                  input.value = \"\"\n\n        }\n```\n那么在js里只需要一行代码\n`input.value = \"\"`\n","source":"_posts/上传多个file文件.md","raw":"---\ntitle: 清空上传内容\ndate: 2018-4-28\ncategories: js\ntags: [编程,学习]\n---\n\n如果要上传同一个文件。例如\n`<input @change=\"fileChange(lesson, $event.target,index)\" type=\"file\" accept=\".jpg,.png,.JPG,.PNG,.gif,.GIF,.xls,.xlsx,.ppt,.pptx,.doc,.docx,.txt,.pdf,.jpeg,.bmp,.XLS,.XLSX,.PPT,.PPTX,.DOC,.DOCX,.TXT,.PDF,.JPEG,.BMP\">\n`\n```javascript\n fileChange: function (course, input, index) {\n        let fileObj = input.files[0];\n        var file = {\n          prepare: false,//是否可预览\n          name: fileObj.name,\n          size: fileObj.size,\n          previewFlag: false,\n          process: true\n        };\n        course.files.push(file);\n                  input.value = \"\"\n\n        }\n```\n那么在js里只需要一行代码\n`input.value = \"\"`\n","slug":"上传多个file文件","published":1,"updated":"2021-07-01T07:30:54.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wun2004tzgsy3dehgzs7","content":"<p>如果要上传同一个文件。例如<br><code>&lt;input @change=&quot;fileChange(lesson, $event.target,index)&quot; type=&quot;file&quot; accept=&quot;.jpg,.png,.JPG,.PNG,.gif,.GIF,.xls,.xlsx,.ppt,.pptx,.doc,.docx,.txt,.pdf,.jpeg,.bmp,.XLS,.XLSX,.PPT,.PPTX,.DOC,.DOCX,.TXT,.PDF,.JPEG,.BMP&quot;&gt;</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fileChange: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">course, input, index</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> fileObj = input.files[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">var</span> file = &#123;</span><br><span class=\"line\">         prepare: <span class=\"literal\">false</span>,<span class=\"comment\">//是否可预览</span></span><br><span class=\"line\">         name: fileObj.name,</span><br><span class=\"line\">         size: fileObj.size,</span><br><span class=\"line\">         previewFlag: <span class=\"literal\">false</span>,</span><br><span class=\"line\">         process: <span class=\"literal\">true</span></span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       course.files.push(file);</span><br><span class=\"line\">                 input.value = <span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么在js里只需要一行代码<br><code>input.value = &quot;&quot;</code></p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>如果要上传同一个文件。例如<br><code>&lt;input @change=&quot;fileChange(lesson, $event.target,index)&quot; type=&quot;file&quot; accept=&quot;.jpg,.png,.JPG,.PNG,.gif,.GIF,.xls,.xlsx,.ppt,.pptx,.doc,.docx,.txt,.pdf,.jpeg,.bmp,.XLS,.XLSX,.PPT,.PPTX,.DOC,.DOCX,.TXT,.PDF,.JPEG,.BMP&quot;&gt;</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fileChange: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">course, input, index</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> fileObj = input.files[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">var</span> file = &#123;</span><br><span class=\"line\">         prepare: <span class=\"literal\">false</span>,<span class=\"comment\">//是否可预览</span></span><br><span class=\"line\">         name: fileObj.name,</span><br><span class=\"line\">         size: fileObj.size,</span><br><span class=\"line\">         previewFlag: <span class=\"literal\">false</span>,</span><br><span class=\"line\">         process: <span class=\"literal\">true</span></span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       course.files.push(file);</span><br><span class=\"line\">                 input.value = <span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么在js里只需要一行代码<br><code>input.value = &quot;&quot;</code></p>\n"},{"title":"使用blob下载文件","date":"2021-07-05T02:28:23.000Z","_content":"<blockquote class=\"blockquote-center\">\n使用 bolb 下载文件并修改文件名称\n</blockquote>\n<!-- more -->\n\n\n```javascript\n getDownload(url: string, requestData: any) {\n        // 响应类型：arraybuffer, blob\n        axiosservice\n            .get(url, {params: requestData, responseType: 'blob'})\n            .then((resp) => {\n                const headers = resp.headers;\n                const contentType = headers[\"content-type\"];\n\n                console.log(\"响应头信息\", headers);\n                if (!resp.data) {\n                    console.error(\"响应异常：\", resp);\n                    return false;\n                } else {\n                    console.log(\"下载文件：\", resp);\n                    const blob = new Blob([resp.data], {type: contentType});\n\n                    const contentDisposition = resp.headers[\"content-disposition\"];\n                    let fileName = \"unknown\";\n                    if (contentDisposition) {\n                        fileName = window.decodeURI(resp.headers[\"content-disposition\"].split(\"=\")[1]);\n                    }\n                    let name = null\n                    if (requestData.fileName) {\n                        name = fileName.split('.')\n                        fileName = name[0] + '(' + requestData.fileName + ')' + '.' + name[1]\n                        downFile(blob, fileName);\n                    } else {\n                        downFile(blob, fileName);\n                    }\n\n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n```\n\n```javascript\n/* 下载方法 */\nfunction downFile(blob: any, fileName: string) {\n    // 非IE下载\n    if (\"download\" in document.createElement(\"a\")) {\n        const link = document.createElement(\"a\");\n        link.href = window.URL.createObjectURL(blob); // 创建下载的链接\n        link.download = fileName; // 下载后文件名\n        link.style.display = \"none\";\n        document.body.appendChild(link);\n        link.click(); // 点击下载\n        window.URL.revokeObjectURL(link.href); // 释放掉blob对象\n        document.body.removeChild(link); // 下载完成移除元素\n    } else {\n        // IE10+下载\n        window.navigator.msSaveBlob(blob, fileName);\n    }\n}\n```\n\n```javascript\n// 使用：\n\n// 下载模板\nhandleClickDownload() {\n    let Label = this.$refs[\"deviceCascader\"].getCheckedNodes()[0].pathLabels\n    let fileName = Label[Label.length - 1]\n    const getParams = {\n        projectId: this.projectId,\n        classCode: this.aliasCode,\n        stage: 'dpm',\n        fileName\n    }\n    getDownload(getParams);\n}\n\nexport function getDownload(postParams: any): any {\n    return httputils.postJson(`${baseApi}/object/download`, postParams)\n}\n\n\n```\n","source":"_posts/使用blob下载文件.md","raw":"---\ntitle: 使用blob下载文件\ndate: 2021-07-05 10:28:23\ntags:\n---\n<blockquote class=\"blockquote-center\">\n使用 bolb 下载文件并修改文件名称\n</blockquote>\n<!-- more -->\n\n\n```javascript\n getDownload(url: string, requestData: any) {\n        // 响应类型：arraybuffer, blob\n        axiosservice\n            .get(url, {params: requestData, responseType: 'blob'})\n            .then((resp) => {\n                const headers = resp.headers;\n                const contentType = headers[\"content-type\"];\n\n                console.log(\"响应头信息\", headers);\n                if (!resp.data) {\n                    console.error(\"响应异常：\", resp);\n                    return false;\n                } else {\n                    console.log(\"下载文件：\", resp);\n                    const blob = new Blob([resp.data], {type: contentType});\n\n                    const contentDisposition = resp.headers[\"content-disposition\"];\n                    let fileName = \"unknown\";\n                    if (contentDisposition) {\n                        fileName = window.decodeURI(resp.headers[\"content-disposition\"].split(\"=\")[1]);\n                    }\n                    let name = null\n                    if (requestData.fileName) {\n                        name = fileName.split('.')\n                        fileName = name[0] + '(' + requestData.fileName + ')' + '.' + name[1]\n                        downFile(blob, fileName);\n                    } else {\n                        downFile(blob, fileName);\n                    }\n\n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n```\n\n```javascript\n/* 下载方法 */\nfunction downFile(blob: any, fileName: string) {\n    // 非IE下载\n    if (\"download\" in document.createElement(\"a\")) {\n        const link = document.createElement(\"a\");\n        link.href = window.URL.createObjectURL(blob); // 创建下载的链接\n        link.download = fileName; // 下载后文件名\n        link.style.display = \"none\";\n        document.body.appendChild(link);\n        link.click(); // 点击下载\n        window.URL.revokeObjectURL(link.href); // 释放掉blob对象\n        document.body.removeChild(link); // 下载完成移除元素\n    } else {\n        // IE10+下载\n        window.navigator.msSaveBlob(blob, fileName);\n    }\n}\n```\n\n```javascript\n// 使用：\n\n// 下载模板\nhandleClickDownload() {\n    let Label = this.$refs[\"deviceCascader\"].getCheckedNodes()[0].pathLabels\n    let fileName = Label[Label.length - 1]\n    const getParams = {\n        projectId: this.projectId,\n        classCode: this.aliasCode,\n        stage: 'dpm',\n        fileName\n    }\n    getDownload(getParams);\n}\n\nexport function getDownload(postParams: any): any {\n    return httputils.postJson(`${baseApi}/object/download`, postParams)\n}\n\n\n```\n","slug":"使用blob下载文件","published":1,"updated":"2021-07-05T02:37:18.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wun7004wzgsyp4kb88mj","content":"<p><blockquote class=\"blockquote-center\"><br>使用 bolb 下载文件并修改文件名称<br></blockquote><br><a id=\"more\"></a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDownload(url: string, <span class=\"attr\">requestData</span>: any) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 响应类型：arraybuffer, blob</span></span><br><span class=\"line\">       axiosservice</span><br><span class=\"line\">           .get(url, &#123;<span class=\"attr\">params</span>: requestData, <span class=\"attr\">responseType</span>: <span class=\"string\">'blob'</span>&#125;)</span><br><span class=\"line\">           .then(<span class=\"function\">(<span class=\"params\">resp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">const</span> headers = resp.headers;</span><br><span class=\"line\">               <span class=\"keyword\">const</span> contentType = headers[<span class=\"string\">\"content-type\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"built_in\">console</span>.log(<span class=\"string\">\"响应头信息\"</span>, headers);</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (!resp.data) &#123;</span><br><span class=\"line\">                   <span class=\"built_in\">console</span>.error(<span class=\"string\">\"响应异常：\"</span>, resp);</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"下载文件：\"</span>, resp);</span><br><span class=\"line\">                   <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> Blob([resp.data], &#123;<span class=\"attr\">type</span>: contentType&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                   <span class=\"keyword\">const</span> contentDisposition = resp.headers[<span class=\"string\">\"content-disposition\"</span>];</span><br><span class=\"line\">                   <span class=\"keyword\">let</span> fileName = <span class=\"string\">\"unknown\"</span>;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (contentDisposition) &#123;</span><br><span class=\"line\">                       fileName = <span class=\"built_in\">window</span>.decodeURI(resp.headers[<span class=\"string\">\"content-disposition\"</span>].split(<span class=\"string\">\"=\"</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"keyword\">let</span> name = <span class=\"literal\">null</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (requestData.fileName) &#123;</span><br><span class=\"line\">                       name = fileName.split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">                       fileName = name[<span class=\"number\">0</span>] + <span class=\"string\">'('</span> + requestData.fileName + <span class=\"string\">')'</span> + <span class=\"string\">'.'</span> + name[<span class=\"number\">1</span>]</span><br><span class=\"line\">                       downFile(blob, fileName);</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                       downFile(blob, fileName);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\">           .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">               <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 下载方法 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downFile</span>(<span class=\"params\">blob: any, fileName: string</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 非IE下载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"download\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">        link.href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob); <span class=\"comment\">// 创建下载的链接</span></span><br><span class=\"line\">        link.download = fileName; <span class=\"comment\">// 下载后文件名</span></span><br><span class=\"line\">        link.style.display = <span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(link);</span><br><span class=\"line\">        link.click(); <span class=\"comment\">// 点击下载</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.URL.revokeObjectURL(link.href); <span class=\"comment\">// 释放掉blob对象</span></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(link); <span class=\"comment\">// 下载完成移除元素</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// IE10+下载</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.navigator.msSaveBlob(blob, fileName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下载模板</span></span><br><span class=\"line\">handleClickDownload() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> Label = <span class=\"keyword\">this</span>.$refs[<span class=\"string\">\"deviceCascader\"</span>].getCheckedNodes()[<span class=\"number\">0</span>].pathLabels</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileName = Label[Label.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> getParams = &#123;</span><br><span class=\"line\">        projectId: <span class=\"keyword\">this</span>.projectId,</span><br><span class=\"line\">        classCode: <span class=\"keyword\">this</span>.aliasCode,</span><br><span class=\"line\">        stage: <span class=\"string\">'dpm'</span>,</span><br><span class=\"line\">        fileName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getDownload(getParams);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDownload</span>(<span class=\"params\">postParams: any</span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> httputils.postJson(<span class=\"string\">`<span class=\"subst\">$&#123;baseApi&#125;</span>/object/download`</span>, postParams)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"<p><blockquote class=\"blockquote-center\"><br>使用 bolb 下载文件并修改文件名称<br></blockquote><br></p>","more":"<p></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDownload(url: string, <span class=\"attr\">requestData</span>: any) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 响应类型：arraybuffer, blob</span></span><br><span class=\"line\">       axiosservice</span><br><span class=\"line\">           .get(url, &#123;<span class=\"attr\">params</span>: requestData, <span class=\"attr\">responseType</span>: <span class=\"string\">'blob'</span>&#125;)</span><br><span class=\"line\">           .then(<span class=\"function\">(<span class=\"params\">resp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">const</span> headers = resp.headers;</span><br><span class=\"line\">               <span class=\"keyword\">const</span> contentType = headers[<span class=\"string\">\"content-type\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"built_in\">console</span>.log(<span class=\"string\">\"响应头信息\"</span>, headers);</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (!resp.data) &#123;</span><br><span class=\"line\">                   <span class=\"built_in\">console</span>.error(<span class=\"string\">\"响应异常：\"</span>, resp);</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"下载文件：\"</span>, resp);</span><br><span class=\"line\">                   <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> Blob([resp.data], &#123;<span class=\"attr\">type</span>: contentType&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                   <span class=\"keyword\">const</span> contentDisposition = resp.headers[<span class=\"string\">\"content-disposition\"</span>];</span><br><span class=\"line\">                   <span class=\"keyword\">let</span> fileName = <span class=\"string\">\"unknown\"</span>;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (contentDisposition) &#123;</span><br><span class=\"line\">                       fileName = <span class=\"built_in\">window</span>.decodeURI(resp.headers[<span class=\"string\">\"content-disposition\"</span>].split(<span class=\"string\">\"=\"</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"keyword\">let</span> name = <span class=\"literal\">null</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (requestData.fileName) &#123;</span><br><span class=\"line\">                       name = fileName.split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">                       fileName = name[<span class=\"number\">0</span>] + <span class=\"string\">'('</span> + requestData.fileName + <span class=\"string\">')'</span> + <span class=\"string\">'.'</span> + name[<span class=\"number\">1</span>]</span><br><span class=\"line\">                       downFile(blob, fileName);</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                       downFile(blob, fileName);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\">           .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">               <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 下载方法 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downFile</span>(<span class=\"params\">blob: any, fileName: string</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 非IE下载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"download\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">        link.href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob); <span class=\"comment\">// 创建下载的链接</span></span><br><span class=\"line\">        link.download = fileName; <span class=\"comment\">// 下载后文件名</span></span><br><span class=\"line\">        link.style.display = <span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(link);</span><br><span class=\"line\">        link.click(); <span class=\"comment\">// 点击下载</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.URL.revokeObjectURL(link.href); <span class=\"comment\">// 释放掉blob对象</span></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(link); <span class=\"comment\">// 下载完成移除元素</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// IE10+下载</span></span><br><span class=\"line\">        <span class=\"built_in\">window</span>.navigator.msSaveBlob(blob, fileName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下载模板</span></span><br><span class=\"line\">handleClickDownload() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> Label = <span class=\"keyword\">this</span>.$refs[<span class=\"string\">\"deviceCascader\"</span>].getCheckedNodes()[<span class=\"number\">0</span>].pathLabels</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileName = Label[Label.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> getParams = &#123;</span><br><span class=\"line\">        projectId: <span class=\"keyword\">this</span>.projectId,</span><br><span class=\"line\">        classCode: <span class=\"keyword\">this</span>.aliasCode,</span><br><span class=\"line\">        stage: <span class=\"string\">'dpm'</span>,</span><br><span class=\"line\">        fileName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getDownload(getParams);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDownload</span>(<span class=\"params\">postParams: any</span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> httputils.postJson(<span class=\"string\">`<span class=\"subst\">$&#123;baseApi&#125;</span>/object/download`</span>, postParams)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"作用域","date":"2017-11-30T16:00:00.000Z","_content":"#### ReferenceError 同作用域判别失败相关，而 TypeError 则代表作用域判别成功了，但是对结果的操作是非法或不合理的。\n```javascript\n//js具有基于函数的作用域，每声明一个函数都会为其自身创造一个气泡，而其他结构都不会创建作用域气泡，但并非完全真确\nfunction foo(a) {\n    var b = 2;\n    //..\n    function bar() {\n        //..\n    }\n    //..\n    var c = 3\n}\n// foo(..)包含了a,b,c,bar，所以无法从foo(..)的外部对他进行访问，这些标识符全都无法从全局作用域中进行访问。\nbar() //ReferenceError\nconsole.log(a,b,c) //ReferenceError\n```\n##### 函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）\n\n##### 隐藏内部实现--最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。\n```javascript\n//变量 b 和函数 doSomethingElse(..) 应该是 doSomething(..) 内部具体 实现的“私有”内容\nfunction doSomething(a) {\n    function doSomethingElse(a) {\n        return a - 1;\n    }\n    var b;\n    b = a + doSomethingElse(a * 2);\n    console.log(b * 3)\n\n}\ndoSomething(2) //15\n//b 和 doSomethingElse(..) 都无法从外部被访问，而只能被 doSomething(..) 所控制\n```\n##### 全局命名空间 -- 避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。\n```javascript\nvar myRellyCoolLibrary = {\n    awesome:'stuff',\n    doSomething:function() {\n        //..\n    },\n    doAotherThing:function() {\n        //..\n    }\n}\n```\n##### 函数作用域 --任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。\n```javascript\nvar a = 2;\nfunction foo() {\n    var a = 3;\n    console.log(a) //3\n}\nfoo()\nconsole.log(a) //2\n// foo 被绑定在所在作用域中，可以直接通过foo() 来调用它\n```\n- 缺点：必须声明一个具名函数foo(),'污染'了作用域，必须要显式的通过调用函数名foo()才能运行。\n- 参考以下方法\n```javascript\nvar a = 2;\n(function foo(){\n    var a = 3;\n    console.log(a);//3\n})()\nconsole.log(a) //2\n// foo 被绑定在函数表达式自身的函数中而不是所在作用域中,此时函数会被当作函数表达式而不是一个标准的函数声明来处理。\n//(function foo(){ .. })作为函数表达式意味着foo只能在..所代表的位置中 被访问，外部作用域则不行。foo 变量名被隐藏在自身中意味着不会非必要地污染外部作 用域。\n```\n`区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位 置(不仅仅是一行代码，而是整个声明中的位置)。如果 function 是声明中 的第一个词，那么就是一个函数声明，否则就是一个函数表达式。`\n\n##### let--let 关键字可以将变量绑定到所在的任意作用域中，(通常是 {..}内部).\n```javascript\nvar foo = true;\nif(foo) {\n    let bar = foo * 2;\n    bar = something(bar)\n    console.log(bar)\n}\nconsole.log(bar) //ReferenceError\n\n{\nconsole.log( bar ); // ReferenceError! let bar = 2;\n}\n\nfunction process(data) {\n    //..doSomething\n}\n{\n    let someReally = {..}\n    process(someReally)\n}\nvar btn = document.getElementById('div')\nbtn.addEventListener('click',function(evt){\n    console.log('button clicked')\n})\n\nfor(let i = 0; i<10;i++) {\n    console.log(i)\n}\n     console.log( i ); // ReferenceError\n//for 循环头部的 let 不仅将 i 绑定到了 for 循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。\n{\n    let j;\n    for(j = 0; j<10;j++) {\n        let i = j; //// 每个迭代重新绑定!\n        console.log(i)\n    }\n}\n\n```\n- 由于 let 声明附属于一个新的作用域而不是当前的函数作用域(也不属于全局作用域)， 当代码中存在对于函数作用域中 var 声明的隐式依赖时，就会有很多隐藏的陷阱，如果用 let 来替代 var 则需要在代码重构的过程中付出额外的精力。\n\n##### const\n```javascript\n    var foo = true\n    if(foo) {\n        var a = 2;\n        const b = 3;\n        a = 3;//ok\n        b = 4;//no\n    }\n    console.log(a);//3\n    console.log(b);//PrferenceError\n```\n- 函数是 JavaScript 中最常见的作用域单元。\n- 声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，这是有意为之的良好软件的设计原则。\n- 但函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块(通常指 { .. } 内部)。\n- try/catch 结构在 catch 分句中具有块作用域。\n\n##### 提升\n- 函数表达式不会提升，函数声明会\n```javascript\nfoo()\nvar foo = function() {\n    console.log(a) //ubdefined\n    var a = 2\n}\n//理解如此\nfunction foo() {\n    var a;\n    console.log(a);//undefined\n    a = 2;\n}\nfoo()\n//理解如下\nvar foo;\nfoo();//TypeError\nfoo = function() {\n    //..\n}\n```\n\n##### 函数优先\n- 函数会首先被提升，然后才是变量\n```javascript\nfoo() //1\nvar foo;\n\nfunction foo() {\n    console.log(1)\n}\nfoo = function() {\n    console.log(2)\n}\n//理解如下\nfunction foo() {\n    console.log(1)\n}\nfoo() //1\nfoo = function () {\n    console.log(2)\n}\n//出现在后面的函数声明还是可以覆盖前面的\nfoo() //3\n\nfunction foo() {\n    console.log(1)\n}\nvar foo = function() {\n    console.log(2)\n}\nfunction foo() {\n    console.log(3)\n}\n\n//一个普通块内部的函数声明通常会被提升到所在作用域的顶部\n\n```\n> 《你不知道的javascript上卷》","source":"_posts/作用域.md","raw":"---\ntitle: 作用域\ndate: 2017-12-01\ncategories: js\ntags: [编程,学习]\n---\n#### ReferenceError 同作用域判别失败相关，而 TypeError 则代表作用域判别成功了，但是对结果的操作是非法或不合理的。\n```javascript\n//js具有基于函数的作用域，每声明一个函数都会为其自身创造一个气泡，而其他结构都不会创建作用域气泡，但并非完全真确\nfunction foo(a) {\n    var b = 2;\n    //..\n    function bar() {\n        //..\n    }\n    //..\n    var c = 3\n}\n// foo(..)包含了a,b,c,bar，所以无法从foo(..)的外部对他进行访问，这些标识符全都无法从全局作用域中进行访问。\nbar() //ReferenceError\nconsole.log(a,b,c) //ReferenceError\n```\n##### 函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）\n\n##### 隐藏内部实现--最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。\n```javascript\n//变量 b 和函数 doSomethingElse(..) 应该是 doSomething(..) 内部具体 实现的“私有”内容\nfunction doSomething(a) {\n    function doSomethingElse(a) {\n        return a - 1;\n    }\n    var b;\n    b = a + doSomethingElse(a * 2);\n    console.log(b * 3)\n\n}\ndoSomething(2) //15\n//b 和 doSomethingElse(..) 都无法从外部被访问，而只能被 doSomething(..) 所控制\n```\n##### 全局命名空间 -- 避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。\n```javascript\nvar myRellyCoolLibrary = {\n    awesome:'stuff',\n    doSomething:function() {\n        //..\n    },\n    doAotherThing:function() {\n        //..\n    }\n}\n```\n##### 函数作用域 --任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。\n```javascript\nvar a = 2;\nfunction foo() {\n    var a = 3;\n    console.log(a) //3\n}\nfoo()\nconsole.log(a) //2\n// foo 被绑定在所在作用域中，可以直接通过foo() 来调用它\n```\n- 缺点：必须声明一个具名函数foo(),'污染'了作用域，必须要显式的通过调用函数名foo()才能运行。\n- 参考以下方法\n```javascript\nvar a = 2;\n(function foo(){\n    var a = 3;\n    console.log(a);//3\n})()\nconsole.log(a) //2\n// foo 被绑定在函数表达式自身的函数中而不是所在作用域中,此时函数会被当作函数表达式而不是一个标准的函数声明来处理。\n//(function foo(){ .. })作为函数表达式意味着foo只能在..所代表的位置中 被访问，外部作用域则不行。foo 变量名被隐藏在自身中意味着不会非必要地污染外部作 用域。\n```\n`区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位 置(不仅仅是一行代码，而是整个声明中的位置)。如果 function 是声明中 的第一个词，那么就是一个函数声明，否则就是一个函数表达式。`\n\n##### let--let 关键字可以将变量绑定到所在的任意作用域中，(通常是 {..}内部).\n```javascript\nvar foo = true;\nif(foo) {\n    let bar = foo * 2;\n    bar = something(bar)\n    console.log(bar)\n}\nconsole.log(bar) //ReferenceError\n\n{\nconsole.log( bar ); // ReferenceError! let bar = 2;\n}\n\nfunction process(data) {\n    //..doSomething\n}\n{\n    let someReally = {..}\n    process(someReally)\n}\nvar btn = document.getElementById('div')\nbtn.addEventListener('click',function(evt){\n    console.log('button clicked')\n})\n\nfor(let i = 0; i<10;i++) {\n    console.log(i)\n}\n     console.log( i ); // ReferenceError\n//for 循环头部的 let 不仅将 i 绑定到了 for 循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。\n{\n    let j;\n    for(j = 0; j<10;j++) {\n        let i = j; //// 每个迭代重新绑定!\n        console.log(i)\n    }\n}\n\n```\n- 由于 let 声明附属于一个新的作用域而不是当前的函数作用域(也不属于全局作用域)， 当代码中存在对于函数作用域中 var 声明的隐式依赖时，就会有很多隐藏的陷阱，如果用 let 来替代 var 则需要在代码重构的过程中付出额外的精力。\n\n##### const\n```javascript\n    var foo = true\n    if(foo) {\n        var a = 2;\n        const b = 3;\n        a = 3;//ok\n        b = 4;//no\n    }\n    console.log(a);//3\n    console.log(b);//PrferenceError\n```\n- 函数是 JavaScript 中最常见的作用域单元。\n- 声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，这是有意为之的良好软件的设计原则。\n- 但函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块(通常指 { .. } 内部)。\n- try/catch 结构在 catch 分句中具有块作用域。\n\n##### 提升\n- 函数表达式不会提升，函数声明会\n```javascript\nfoo()\nvar foo = function() {\n    console.log(a) //ubdefined\n    var a = 2\n}\n//理解如此\nfunction foo() {\n    var a;\n    console.log(a);//undefined\n    a = 2;\n}\nfoo()\n//理解如下\nvar foo;\nfoo();//TypeError\nfoo = function() {\n    //..\n}\n```\n\n##### 函数优先\n- 函数会首先被提升，然后才是变量\n```javascript\nfoo() //1\nvar foo;\n\nfunction foo() {\n    console.log(1)\n}\nfoo = function() {\n    console.log(2)\n}\n//理解如下\nfunction foo() {\n    console.log(1)\n}\nfoo() //1\nfoo = function () {\n    console.log(2)\n}\n//出现在后面的函数声明还是可以覆盖前面的\nfoo() //3\n\nfunction foo() {\n    console.log(1)\n}\nvar foo = function() {\n    console.log(2)\n}\nfunction foo() {\n    console.log(3)\n}\n\n//一个普通块内部的函数声明通常会被提升到所在作用域的顶部\n\n```\n> 《你不知道的javascript上卷》","slug":"作用域","published":1,"updated":"2021-07-01T07:30:54.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wun9004zzgsytbl1vdmn","content":"<h4 id=\"ReferenceError-同作用域判别失败相关，而-TypeError-则代表作用域判别成功了，但是对结果的操作是非法或不合理的。\"><a href=\"#ReferenceError-同作用域判别失败相关，而-TypeError-则代表作用域判别成功了，但是对结果的操作是非法或不合理的。\" class=\"headerlink\" title=\"ReferenceError 同作用域判别失败相关，而 TypeError 则代表作用域判别成功了，但是对结果的操作是非法或不合理的。\"></a>ReferenceError 同作用域判别失败相关，而 TypeError 则代表作用域判别成功了，但是对结果的操作是非法或不合理的。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js具有基于函数的作用域，每声明一个函数都会为其自身创造一个气泡，而其他结构都不会创建作用域气泡，但并非完全真确</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// foo(..)包含了a,b,c,bar，所以无法从foo(..)的外部对他进行访问，这些标识符全都无法从全局作用域中进行访问。</span></span><br><span class=\"line\">bar() <span class=\"comment\">//ReferenceError</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b,c) <span class=\"comment\">//ReferenceError</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）\"><a href=\"#函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）\" class=\"headerlink\" title=\"函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）\"></a>函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）</h5><h5 id=\"隐藏内部实现–最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的-API-设计。\"><a href=\"#隐藏内部实现–最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的-API-设计。\" class=\"headerlink\" title=\"隐藏内部实现–最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。\"></a>隐藏内部实现–最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//变量 b 和函数 doSomethingElse(..) 应该是 doSomething(..) 内部具体 实现的“私有”内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomethingElse</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b;</span><br><span class=\"line\">    b = a + doSomethingElse(a * <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b * <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSomething(<span class=\"number\">2</span>) <span class=\"comment\">//15</span></span><br><span class=\"line\"><span class=\"comment\">//b 和 doSomethingElse(..) 都无法从外部被访问，而只能被 doSomething(..) 所控制</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"全局命名空间-–-避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。\"><a href=\"#全局命名空间-–-避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。\" class=\"headerlink\" title=\"全局命名空间 – 避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。\"></a>全局命名空间 – 避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myRellyCoolLibrary = &#123;</span><br><span class=\"line\">    awesome:<span class=\"string\">'stuff'</span>,</span><br><span class=\"line\">    doSomething:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//..</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doAotherThing:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"函数作用域-–任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。\"><a href=\"#函数作用域-–任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。\" class=\"headerlink\" title=\"函数作用域 –任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。\"></a>函数作用域 –任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">// foo 被绑定在所在作用域中，可以直接通过foo() 来调用它</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点：必须声明一个具名函数foo(),’污染’了作用域，必须要显式的通过调用函数名foo()才能运行。</li>\n<li>参考以下方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//3</span></span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">// foo 被绑定在函数表达式自身的函数中而不是所在作用域中,此时函数会被当作函数表达式而不是一个标准的函数声明来处理。</span></span><br><span class=\"line\"><span class=\"comment\">//(function foo()&#123; .. &#125;)作为函数表达式意味着foo只能在..所代表的位置中 被访问，外部作用域则不行。foo 变量名被隐藏在自身中意味着不会非必要地污染外部作 用域。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位 置(不仅仅是一行代码，而是整个声明中的位置)。如果 function 是声明中 的第一个词，那么就是一个函数声明，否则就是一个函数表达式。</code></p>\n<h5 id=\"let–let-关键字可以将变量绑定到所在的任意作用域中，-通常是-内部\"><a href=\"#let–let-关键字可以将变量绑定到所在的任意作用域中，-通常是-内部\" class=\"headerlink\" title=\"let–let 关键字可以将变量绑定到所在的任意作用域中，(通常是 {..}内部).\"></a>let–let 关键字可以将变量绑定到所在的任意作用域中，(通常是 {..}内部).</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(foo) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> bar = foo * <span class=\"number\">2</span>;</span><br><span class=\"line\">    bar = something(bar)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(bar)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar) <span class=\"comment\">//ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( bar ); <span class=\"comment\">// ReferenceError! let bar = 2;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">process</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..doSomething</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> someReally = &#123;..&#125;</span><br><span class=\"line\">    process(someReally)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'button clicked'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log( i ); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"><span class=\"comment\">//for 循环头部的 let 不仅将 i 绑定到了 for 循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j&lt;<span class=\"number\">10</span>;j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = j; <span class=\"comment\">//// 每个迭代重新绑定!</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>由于 let 声明附属于一个新的作用域而不是当前的函数作用域(也不属于全局作用域)， 当代码中存在对于函数作用域中 var 声明的隐式依赖时，就会有很多隐藏的陷阱，如果用 let 来替代 var 则需要在代码重构的过程中付出额外的精力。</li>\n</ul>\n<h5 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(foo) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\">    a = <span class=\"number\">3</span>;<span class=\"comment\">//ok</span></span><br><span class=\"line\">    b = <span class=\"number\">4</span>;<span class=\"comment\">//no</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);<span class=\"comment\">//PrferenceError</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数是 JavaScript 中最常见的作用域单元。</li>\n<li>声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，这是有意为之的良好软件的设计原则。</li>\n<li>但函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块(通常指 { .. } 内部)。</li>\n<li>try/catch 结构在 catch 分句中具有块作用域。</li>\n</ul>\n<h5 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h5><ul>\n<li>函数表达式不会提升，函数声明会<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//ubdefined</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//理解如此</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//undefined</span></span><br><span class=\"line\">    a = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"comment\">//理解如下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">foo();<span class=\"comment\">//TypeError</span></span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"函数优先\"><a href=\"#函数优先\" class=\"headerlink\" title=\"函数优先\"></a>函数优先</h5><ul>\n<li>函数会首先被提升，然后才是变量<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo() <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//理解如下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo() <span class=\"comment\">//1</span></span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//出现在后面的函数声明还是可以覆盖前面的</span></span><br><span class=\"line\">foo() <span class=\"comment\">//3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一个普通块内部的函数声明通常会被提升到所在作用域的顶部</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>《你不知道的javascript上卷》</p>\n</blockquote>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<h4 id=\"ReferenceError-同作用域判别失败相关，而-TypeError-则代表作用域判别成功了，但是对结果的操作是非法或不合理的。\"><a href=\"#ReferenceError-同作用域判别失败相关，而-TypeError-则代表作用域判别成功了，但是对结果的操作是非法或不合理的。\" class=\"headerlink\" title=\"ReferenceError 同作用域判别失败相关，而 TypeError 则代表作用域判别成功了，但是对结果的操作是非法或不合理的。\"></a>ReferenceError 同作用域判别失败相关，而 TypeError 则代表作用域判别成功了，但是对结果的操作是非法或不合理的。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js具有基于函数的作用域，每声明一个函数都会为其自身创造一个气泡，而其他结构都不会创建作用域气泡，但并非完全真确</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// foo(..)包含了a,b,c,bar，所以无法从foo(..)的外部对他进行访问，这些标识符全都无法从全局作用域中进行访问。</span></span><br><span class=\"line\">bar() <span class=\"comment\">//ReferenceError</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b,c) <span class=\"comment\">//ReferenceError</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）\"><a href=\"#函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）\" class=\"headerlink\" title=\"函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）\"></a>函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）</h5><h5 id=\"隐藏内部实现–最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的-API-设计。\"><a href=\"#隐藏内部实现–最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的-API-设计。\" class=\"headerlink\" title=\"隐藏内部实现–最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。\"></a>隐藏内部实现–最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//变量 b 和函数 doSomethingElse(..) 应该是 doSomething(..) 内部具体 实现的“私有”内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomethingElse</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b;</span><br><span class=\"line\">    b = a + doSomethingElse(a * <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b * <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSomething(<span class=\"number\">2</span>) <span class=\"comment\">//15</span></span><br><span class=\"line\"><span class=\"comment\">//b 和 doSomethingElse(..) 都无法从外部被访问，而只能被 doSomething(..) 所控制</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"全局命名空间-–-避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。\"><a href=\"#全局命名空间-–-避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。\" class=\"headerlink\" title=\"全局命名空间 – 避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。\"></a>全局命名空间 – 避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myRellyCoolLibrary = &#123;</span><br><span class=\"line\">    awesome:<span class=\"string\">'stuff'</span>,</span><br><span class=\"line\">    doSomething:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//..</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doAotherThing:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"函数作用域-–任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。\"><a href=\"#函数作用域-–任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。\" class=\"headerlink\" title=\"函数作用域 –任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。\"></a>函数作用域 –任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">// foo 被绑定在所在作用域中，可以直接通过foo() 来调用它</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点：必须声明一个具名函数foo(),’污染’了作用域，必须要显式的通过调用函数名foo()才能运行。</li>\n<li>参考以下方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//3</span></span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">// foo 被绑定在函数表达式自身的函数中而不是所在作用域中,此时函数会被当作函数表达式而不是一个标准的函数声明来处理。</span></span><br><span class=\"line\"><span class=\"comment\">//(function foo()&#123; .. &#125;)作为函数表达式意味着foo只能在..所代表的位置中 被访问，外部作用域则不行。foo 变量名被隐藏在自身中意味着不会非必要地污染外部作 用域。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位 置(不仅仅是一行代码，而是整个声明中的位置)。如果 function 是声明中 的第一个词，那么就是一个函数声明，否则就是一个函数表达式。</code></p>\n<h5 id=\"let–let-关键字可以将变量绑定到所在的任意作用域中，-通常是-内部\"><a href=\"#let–let-关键字可以将变量绑定到所在的任意作用域中，-通常是-内部\" class=\"headerlink\" title=\"let–let 关键字可以将变量绑定到所在的任意作用域中，(通常是 {..}内部).\"></a>let–let 关键字可以将变量绑定到所在的任意作用域中，(通常是 {..}内部).</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(foo) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> bar = foo * <span class=\"number\">2</span>;</span><br><span class=\"line\">    bar = something(bar)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(bar)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar) <span class=\"comment\">//ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( bar ); <span class=\"comment\">// ReferenceError! let bar = 2;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">process</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..doSomething</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> someReally = &#123;..&#125;</span><br><span class=\"line\">    process(someReally)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'button clicked'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>;i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log( i ); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"><span class=\"comment\">//for 循环头部的 let 不仅将 i 绑定到了 for 循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j&lt;<span class=\"number\">10</span>;j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = j; <span class=\"comment\">//// 每个迭代重新绑定!</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>由于 let 声明附属于一个新的作用域而不是当前的函数作用域(也不属于全局作用域)， 当代码中存在对于函数作用域中 var 声明的隐式依赖时，就会有很多隐藏的陷阱，如果用 let 来替代 var 则需要在代码重构的过程中付出额外的精力。</li>\n</ul>\n<h5 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(foo) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\">    a = <span class=\"number\">3</span>;<span class=\"comment\">//ok</span></span><br><span class=\"line\">    b = <span class=\"number\">4</span>;<span class=\"comment\">//no</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);<span class=\"comment\">//PrferenceError</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数是 JavaScript 中最常见的作用域单元。</li>\n<li>声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，这是有意为之的良好软件的设计原则。</li>\n<li>但函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块(通常指 { .. } 内部)。</li>\n<li>try/catch 结构在 catch 分句中具有块作用域。</li>\n</ul>\n<h5 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h5><ul>\n<li>函数表达式不会提升，函数声明会<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//ubdefined</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//理解如此</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//undefined</span></span><br><span class=\"line\">    a = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"><span class=\"comment\">//理解如下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\">foo();<span class=\"comment\">//TypeError</span></span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"函数优先\"><a href=\"#函数优先\" class=\"headerlink\" title=\"函数优先\"></a>函数优先</h5><ul>\n<li>函数会首先被提升，然后才是变量<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo() <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//理解如下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo() <span class=\"comment\">//1</span></span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//出现在后面的函数声明还是可以覆盖前面的</span></span><br><span class=\"line\">foo() <span class=\"comment\">//3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一个普通块内部的函数声明通常会被提升到所在作用域的顶部</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>《你不知道的javascript上卷》</p>\n</blockquote>\n"},{"title":"webpack端口号","_content":"\n今日，修改webpack端口号，遇到了问题\n本来是在webpack.config.js文件夹里添加了devServer属性\n```\n   devServer: {\n        port: 2333,\n        host: '0.0.0.0',\n        overlay: {\n            errors: true\n        },\n        hot: true\n    },\n\n     plugins: [\n        new webpack.HotModuleReplacementPlugin(),]\n```   \n`webpack-dev-server` 带 `hot` 参数的时候，要去掉config里面的 HotModuleReplacementPlugin\n不然会内存溢出。\n解决办法：删除\n```\nplugins: [\n        new webpack.HotModuleReplacementPlugin()\n]\n```\n将\n`\"dev\": \"webpack-dev-server --mode development\",`\n改为\n`\"dev\": \"webpack-dev-server --hot --inline\",`\n启动服务并不能自动刷新，要自动刷新需要用到webpack-dev-server --hot --inline\n当使用webpack-dev-server --hot --inline命令时，\n在每次修改文件，是将文件打包\n　　保存在内存中并没有写在磁盘里(默认是根据webpack.config.js打包文件，通过--config xxxx.js修改)，这种打包得到的文件\n　　和项目根目录中的index.html位于同一级（你看不到，因为\n　　它在内存中并没有在磁盘里）。使用webpack命令将打包后的文件保存在磁盘中\n　　例如在index.html文件中引入通过webpack-dev-server --hot --inline打包的build.js\n`<script src=\"build.js\"></script>`\n　　在index.html文件中引入通过webpack命令打包的build.js\n`　<script src=\"./build/build.js\"></script>`\n\n\n","source":"_posts/webpack端口.md","raw":"---\ntitle: webpack端口号\ncategories: js\ntags: [编程,学习]\n---\n\n今日，修改webpack端口号，遇到了问题\n本来是在webpack.config.js文件夹里添加了devServer属性\n```\n   devServer: {\n        port: 2333,\n        host: '0.0.0.0',\n        overlay: {\n            errors: true\n        },\n        hot: true\n    },\n\n     plugins: [\n        new webpack.HotModuleReplacementPlugin(),]\n```   \n`webpack-dev-server` 带 `hot` 参数的时候，要去掉config里面的 HotModuleReplacementPlugin\n不然会内存溢出。\n解决办法：删除\n```\nplugins: [\n        new webpack.HotModuleReplacementPlugin()\n]\n```\n将\n`\"dev\": \"webpack-dev-server --mode development\",`\n改为\n`\"dev\": \"webpack-dev-server --hot --inline\",`\n启动服务并不能自动刷新，要自动刷新需要用到webpack-dev-server --hot --inline\n当使用webpack-dev-server --hot --inline命令时，\n在每次修改文件，是将文件打包\n　　保存在内存中并没有写在磁盘里(默认是根据webpack.config.js打包文件，通过--config xxxx.js修改)，这种打包得到的文件\n　　和项目根目录中的index.html位于同一级（你看不到，因为\n　　它在内存中并没有在磁盘里）。使用webpack命令将打包后的文件保存在磁盘中\n　　例如在index.html文件中引入通过webpack-dev-server --hot --inline打包的build.js\n`<script src=\"build.js\"></script>`\n　　在index.html文件中引入通过webpack命令打包的build.js\n`　<script src=\"./build/build.js\"></script>`\n\n\n","slug":"webpack端口","published":1,"date":"2021-07-01T07:30:54.555Z","updated":"2021-07-01T07:30:54.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wunb0052zgsy6tkiuuej","content":"<p>今日，修改webpack端口号，遇到了问题<br>本来是在webpack.config.js文件夹里添加了devServer属性<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"attribute\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attribute\">port</span>: <span class=\"number\">2333</span>,</span><br><span class=\"line\">        <span class=\"attribute\">host</span>: <span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">        <span class=\"attribute\">overlay</span>: &#123;</span><br><span class=\"line\">            <span class=\"attribute\">errors</span>: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attribute\">hot</span>: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attribute\">plugins</span>: [</span><br><span class=\"line\">        new webpack.HotModuleReplacementPlugin(),]</span><br><span class=\"line\"><span class=\"built_in\">``</span>`   </span><br><span class=\"line\"><span class=\"built_in\">`webpack-dev-server`</span> 带 <span class=\"built_in\">`hot`</span> 参数的时候，要去掉config里面的 HotModuleReplacementPlugin</span><br><span class=\"line\">不然会内存溢出。</span><br><span class=\"line\">解决办法：删除</span><br></pre></td></tr></table></figure></p>\n<p>plugins: [<br>        new webpack.HotModuleReplacementPlugin()<br>]<br><code>`</code><br>将<br><code>&quot;dev&quot;: &quot;webpack-dev-server --mode development&quot;,</code><br>改为<br><code>&quot;dev&quot;: &quot;webpack-dev-server --hot --inline&quot;,</code><br>启动服务并不能自动刷新，要自动刷新需要用到webpack-dev-server –hot –inline<br>当使用webpack-dev-server –hot –inline命令时，<br>在每次修改文件，是将文件打包<br>　　保存在内存中并没有写在磁盘里(默认是根据webpack.config.js打包文件，通过–config xxxx.js修改)，这种打包得到的文件<br>　　和项目根目录中的index.html位于同一级（你看不到，因为<br>　　它在内存中并没有在磁盘里）。使用webpack命令将打包后的文件保存在磁盘中<br>　　例如在index.html文件中引入通过webpack-dev-server –hot –inline打包的build.js<br><code>&lt;script src=&quot;build.js&quot;&gt;&lt;/script&gt;</code><br>　　在index.html文件中引入通过webpack命令打包的build.js<br><code>&lt;script src=&quot;./build/build.js&quot;&gt;&lt;/script&gt;</code></p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>今日，修改webpack端口号，遇到了问题<br>本来是在webpack.config.js文件夹里添加了devServer属性<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"attribute\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"attribute\">port</span>: <span class=\"number\">2333</span>,</span><br><span class=\"line\">        <span class=\"attribute\">host</span>: <span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">        <span class=\"attribute\">overlay</span>: &#123;</span><br><span class=\"line\">            <span class=\"attribute\">errors</span>: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attribute\">hot</span>: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"attribute\">plugins</span>: [</span><br><span class=\"line\">        new webpack.HotModuleReplacementPlugin(),]</span><br><span class=\"line\"><span class=\"built_in\">``</span>`   </span><br><span class=\"line\"><span class=\"built_in\">`webpack-dev-server`</span> 带 <span class=\"built_in\">`hot`</span> 参数的时候，要去掉config里面的 HotModuleReplacementPlugin</span><br><span class=\"line\">不然会内存溢出。</span><br><span class=\"line\">解决办法：删除</span><br></pre></td></tr></table></figure></p>\n<p>plugins: [<br>        new webpack.HotModuleReplacementPlugin()<br>]<br><code>`</code><br>将<br><code>&quot;dev&quot;: &quot;webpack-dev-server --mode development&quot;,</code><br>改为<br><code>&quot;dev&quot;: &quot;webpack-dev-server --hot --inline&quot;,</code><br>启动服务并不能自动刷新，要自动刷新需要用到webpack-dev-server –hot –inline<br>当使用webpack-dev-server –hot –inline命令时，<br>在每次修改文件，是将文件打包<br>　　保存在内存中并没有写在磁盘里(默认是根据webpack.config.js打包文件，通过–config xxxx.js修改)，这种打包得到的文件<br>　　和项目根目录中的index.html位于同一级（你看不到，因为<br>　　它在内存中并没有在磁盘里）。使用webpack命令将打包后的文件保存在磁盘中<br>　　例如在index.html文件中引入通过webpack-dev-server –hot –inline打包的build.js<br><code>&lt;script src=&quot;build.js&quot;&gt;&lt;/script&gt;</code><br>　　在index.html文件中引入通过webpack命令打包的build.js<br><code>&lt;script src=&quot;./build/build.js&quot;&gt;&lt;/script&gt;</code></p>\n"},{"title":"动态添加属性（set）","date":"2016-06-24T02:39:40.000Z","_content":"<blockquote class=\"blockquote-center\">\n你了解 vue 的 set 吗？\n</blockquote>\n\n<!-- more -->\n\n使用vue动态的添加属性，假设从父组件`props`传来一个数组，要为数组中的每一项添加一个属性，每个属性点击一次就+1，大于2的时候就为0，（0，1，2），添加另一组属性，当为0的时候显示一张图，当为1的时候，显示另一张图片，当为1的时候再换一张图片。当点击某一个按钮，剩余其他的状态要归0，图片显示0的对应的图片。\n代码实现如下：\n```javascript\nitemsTrans:{},\ncurrentSort: 0,//当前排序\ncreated() {\n    this.content.titles.forEach((i,index)=>{\n        this.$set(this.itemsTrans,`toggle${index}`,0)\n        this.$set(this.itemsTrans,`toggle${index}img`,'xxx.png')\n    })\n}\nmethods:{\n    changeToggle(item,index) {\n        for(let i = 0; i < this.content.titles.length;i++) { //返回默认状态\n            if(i !== index) {\n                this.itemsTrans[`toggle${i}`] = 0\n                this.itemsTrans[`toggle${i}img`] = 'xxx.png'\n            }\n        }\n        this.itemsTrans[`toggle${index}`] += 1\n          if (this.itemTrans[`toggle${index}`] == 1) {\n                this.content.currentSort = 1\n                this.itemTrans[`toggle${index}img`] = 'yyy.png'\n              }\n              if (this.itemTrans[`toggle${index}`] == 2) {\n                this.content.currentSort = 2\n                this.itemTrans[`toggle${index}img`] = 'zzz.png'\n              }\n              if (this.itemTrans[`toggle${index}`] > 2) {\n                this.itemTrans[`toggle${index}img`] = 0\n                this.itemTrans[`toggle${index}`] = 'xxx.png'\n                this.content.currentSort = 0\n              }\n        \n    }\n}\n```\n\n如果要做数据加载分页的话一定要先切割，以免出现数据重复。\n```javascript\nthis.content.items.splice(0,this.content.items.length)\nthis.content.items.push(...items)\n```\n","source":"_posts/动态添加属性.md","raw":"---\ntitle: 动态添加属性（set）\ncategories: vue\ndate: 2016-06-24 10:39:40\ntags: [编程,学习]\n---\n<blockquote class=\"blockquote-center\">\n你了解 vue 的 set 吗？\n</blockquote>\n\n<!-- more -->\n\n使用vue动态的添加属性，假设从父组件`props`传来一个数组，要为数组中的每一项添加一个属性，每个属性点击一次就+1，大于2的时候就为0，（0，1，2），添加另一组属性，当为0的时候显示一张图，当为1的时候，显示另一张图片，当为1的时候再换一张图片。当点击某一个按钮，剩余其他的状态要归0，图片显示0的对应的图片。\n代码实现如下：\n```javascript\nitemsTrans:{},\ncurrentSort: 0,//当前排序\ncreated() {\n    this.content.titles.forEach((i,index)=>{\n        this.$set(this.itemsTrans,`toggle${index}`,0)\n        this.$set(this.itemsTrans,`toggle${index}img`,'xxx.png')\n    })\n}\nmethods:{\n    changeToggle(item,index) {\n        for(let i = 0; i < this.content.titles.length;i++) { //返回默认状态\n            if(i !== index) {\n                this.itemsTrans[`toggle${i}`] = 0\n                this.itemsTrans[`toggle${i}img`] = 'xxx.png'\n            }\n        }\n        this.itemsTrans[`toggle${index}`] += 1\n          if (this.itemTrans[`toggle${index}`] == 1) {\n                this.content.currentSort = 1\n                this.itemTrans[`toggle${index}img`] = 'yyy.png'\n              }\n              if (this.itemTrans[`toggle${index}`] == 2) {\n                this.content.currentSort = 2\n                this.itemTrans[`toggle${index}img`] = 'zzz.png'\n              }\n              if (this.itemTrans[`toggle${index}`] > 2) {\n                this.itemTrans[`toggle${index}img`] = 0\n                this.itemTrans[`toggle${index}`] = 'xxx.png'\n                this.content.currentSort = 0\n              }\n        \n    }\n}\n```\n\n如果要做数据加载分页的话一定要先切割，以免出现数据重复。\n```javascript\nthis.content.items.splice(0,this.content.items.length)\nthis.content.items.push(...items)\n```\n","slug":"动态添加属性","published":1,"updated":"2021-07-06T02:07:18.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wund0055zgsy0ut5hb62","content":"<blockquote class=\"blockquote-center\"><br>你了解 vue 的 set 吗？<br></blockquote>\n\n<a id=\"more\"></a>\n<p>使用vue动态的添加属性，假设从父组件<code>props</code>传来一个数组，要为数组中的每一项添加一个属性，每个属性点击一次就+1，大于2的时候就为0，（0，1，2），添加另一组属性，当为0的时候显示一张图，当为1的时候，显示另一张图片，当为1的时候再换一张图片。当点击某一个按钮，剩余其他的状态要归0，图片显示0的对应的图片。<br>代码实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">itemsTrans:&#123;&#125;,</span><br><span class=\"line\">currentSort: <span class=\"number\">0</span>,<span class=\"comment\">//当前排序</span></span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.content.titles.forEach(<span class=\"function\">(<span class=\"params\">i,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$set(<span class=\"keyword\">this</span>.itemsTrans,<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>`</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$set(<span class=\"keyword\">this</span>.itemsTrans,<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>img`</span>,<span class=\"string\">'xxx.png'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    changeToggle(item,index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.content.titles.length;i++) &#123; <span class=\"comment\">//返回默认状态</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i !== index) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.itemsTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;i&#125;</span>`</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.itemsTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;i&#125;</span>img`</span>] = <span class=\"string\">'xxx.png'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.itemsTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>`</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>`</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.content.currentSort = <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>img`</span>] = <span class=\"string\">'yyy.png'</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>`</span>] == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.content.currentSort = <span class=\"number\">2</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>img`</span>] = <span class=\"string\">'zzz.png'</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>`</span>] &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>img`</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>`</span>] = <span class=\"string\">'xxx.png'</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.content.currentSort = <span class=\"number\">0</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果要做数据加载分页的话一定要先切割，以免出现数据重复。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.content.items.splice(<span class=\"number\">0</span>,<span class=\"keyword\">this</span>.content.items.length)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.content.items.push(...items)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"<blockquote class=\"blockquote-center\"><br>你了解 vue 的 set 吗？<br></blockquote>","more":"<p>使用vue动态的添加属性，假设从父组件<code>props</code>传来一个数组，要为数组中的每一项添加一个属性，每个属性点击一次就+1，大于2的时候就为0，（0，1，2），添加另一组属性，当为0的时候显示一张图，当为1的时候，显示另一张图片，当为1的时候再换一张图片。当点击某一个按钮，剩余其他的状态要归0，图片显示0的对应的图片。<br>代码实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">itemsTrans:&#123;&#125;,</span><br><span class=\"line\">currentSort: <span class=\"number\">0</span>,<span class=\"comment\">//当前排序</span></span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.content.titles.forEach(<span class=\"function\">(<span class=\"params\">i,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$set(<span class=\"keyword\">this</span>.itemsTrans,<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>`</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$set(<span class=\"keyword\">this</span>.itemsTrans,<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>img`</span>,<span class=\"string\">'xxx.png'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    changeToggle(item,index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.content.titles.length;i++) &#123; <span class=\"comment\">//返回默认状态</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i !== index) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.itemsTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;i&#125;</span>`</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.itemsTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;i&#125;</span>img`</span>] = <span class=\"string\">'xxx.png'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.itemsTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>`</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>`</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.content.currentSort = <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>img`</span>] = <span class=\"string\">'yyy.png'</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>`</span>] == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.content.currentSort = <span class=\"number\">2</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>img`</span>] = <span class=\"string\">'zzz.png'</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>`</span>] &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>img`</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.itemTrans[<span class=\"string\">`toggle<span class=\"subst\">$&#123;index&#125;</span>`</span>] = <span class=\"string\">'xxx.png'</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.content.currentSort = <span class=\"number\">0</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果要做数据加载分页的话一定要先切割，以免出现数据重复。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.content.items.splice(<span class=\"number\">0</span>,<span class=\"keyword\">this</span>.content.items.length)</span><br><span class=\"line\"><span class=\"keyword\">this</span>.content.items.push(...items)</span><br></pre></td></tr></table></figure></p>"},{"title":"js中的内置函数","date":"2018-03-27T16:00:00.000Z","_content":"\njs中有哪些内置函数？--函数封装类对象\n\n~~~\nObject\nArray\nBoolearn\nString\nFunction\nError\nNumber\nDate\nRegExp\n~~~","source":"_posts/内置函数.md","raw":"---\ntitle: js中的内置函数\ndate: 2018-3-28\ncategories: js\ntags: [编程,学习]\n---\n\njs中有哪些内置函数？--函数封装类对象\n\n~~~\nObject\nArray\nBoolearn\nString\nFunction\nError\nNumber\nDate\nRegExp\n~~~","slug":"内置函数","published":1,"updated":"2021-07-01T07:30:54.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wune0057zgsy5mo2035x","content":"<p>js中有哪些内置函数？–函数封装类对象</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object</span><br><span class=\"line\">Array</span><br><span class=\"line\">Boolearn</span><br><span class=\"line\">String</span><br><span class=\"line\">Function</span><br><span class=\"line\">Error</span><br><span class=\"line\">Number</span><br><span class=\"line\">Date</span><br><span class=\"line\">RegExp</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>js中有哪些内置函数？–函数封装类对象</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object</span><br><span class=\"line\">Array</span><br><span class=\"line\">Boolearn</span><br><span class=\"line\">String</span><br><span class=\"line\">Function</span><br><span class=\"line\">Error</span><br><span class=\"line\">Number</span><br><span class=\"line\">Date</span><br><span class=\"line\">RegExp</span><br></pre></td></tr></table></figure>"},{"title":"日常js","date":"2017-02-28T16:00:00.000Z","copyright":true,"_content":"\n* 直接将函数名作为参数，直接调用\n```javascript\nfunction test1(fn) {\n    fn()\n}\nfunction test2() {\n    alert('success')\n}\ntest1(test2)\n```\n* 定义一个调用以带参数的函数为参数的函数\n```javascript\nfunction test1(fn) {\n    fn(mydata)\n}\nfunction test2(x) {\n    console.log(x)\n}\ntest1(test2('hello world'))\n```\n* 作为参数的函数不再单独定义\n```javascript\nfunction test1(fn) {\n    fn('hello')\n}\ntest1(data =>{\n    alert(data)\n})\n```\n#### 属性删除\n```javascript  \n//delete只能删除属性，不可以删除一个变量,在函数内也不可以，隐式的创建一个变量可以删除\nvar obj = {x:1,y:2}\ndelete obj.x; //true\nobj.x;//undefined\n\nvar a = 1;\ndelete a; //false\na; //1\n\n(function() {\n    var localVal = 1;\n    return delete localVal;\n})()//false\n\nfunction fd() {\n    delete fd; //false\n}\n\n(function() {\n    function fd() {\n        return delete fd;\n    }\n}()) //false\n\nohNo = 1;\nwindow.ohNo; //1\ndelete ohNo; //true\n\n```\n#### 属性检测\n```javascript\nvar cat = new Object;\ncat.legs = 4;\ncat.name = 'lele';\n\n\n'legs' in cat //true\n'abc' in cat //false\n'toString' in cat //true\n\ncat.hasOwnProperty('legs')//true\ncat.hasOwnProperty('toString') //false\n//是否可枚举\ncat.propertyIsEnumerable('legs');//true\ncat.propertyIsEnumerable('toString');//false\n\n//在枚举是false的方法,Object.defineProperty默认的属性都是false\n \nObject.defineProperty(cat,'price',{\n    enumerable:false,\n    value:1000\n})\ncat.propertyIsEnumerable('price') //false\ncat.hasOwnProperty('price') //true\n\n```\n\n```javascript\nif(cat && cat.legs) {\n    cat.legs *=2\n} \nif(cat.legs != undefined) {\n    // !=undefined or !=null\n} \n\nif(cat.legs !== undefined) {\n    // only id cat.legs is not undefined\n}\n```\n\n#### 属性枚举\n```javascript  \n var o = {\n     x:1,\n     y:2,\n     z:3\n}\n'toString' in o;//true\no.propertyIsEnumerable('toString') //false\nfor(var key in o) {\n    console.log(key) //x,y,z\n}\n\nvar obj = Object(o)\nobj.a = 4;\nfor(var i in obj) {\n    console.log(i) //a,x,y,z\n}\nfor(var o in obj) {\n    if(obj.hasOwnProperty(key)) {\n        console.log)(a) //a\n    }\n}\n```\n#### 属性getter/setter方法\n```javascript\nvar person = {\n    name:'lele',\n    get age() {\n        return new Date().getFullYear() -2014\n    },\n    set age(val) {\n        console.log('no set' +val)\n    }\n}\nconsole.log(person.age) //4\nperson.age = 20 //no set20\nconsole.log(person.age) //4\n\n\n```","source":"_posts/函数作为参数.md","raw":"---\ntitle: 日常js\ncategories: js\ndate: 2017-03-01\ntags: [编程,感悟]\ncopyright: true\n\n---\n\n* 直接将函数名作为参数，直接调用\n```javascript\nfunction test1(fn) {\n    fn()\n}\nfunction test2() {\n    alert('success')\n}\ntest1(test2)\n```\n* 定义一个调用以带参数的函数为参数的函数\n```javascript\nfunction test1(fn) {\n    fn(mydata)\n}\nfunction test2(x) {\n    console.log(x)\n}\ntest1(test2('hello world'))\n```\n* 作为参数的函数不再单独定义\n```javascript\nfunction test1(fn) {\n    fn('hello')\n}\ntest1(data =>{\n    alert(data)\n})\n```\n#### 属性删除\n```javascript  \n//delete只能删除属性，不可以删除一个变量,在函数内也不可以，隐式的创建一个变量可以删除\nvar obj = {x:1,y:2}\ndelete obj.x; //true\nobj.x;//undefined\n\nvar a = 1;\ndelete a; //false\na; //1\n\n(function() {\n    var localVal = 1;\n    return delete localVal;\n})()//false\n\nfunction fd() {\n    delete fd; //false\n}\n\n(function() {\n    function fd() {\n        return delete fd;\n    }\n}()) //false\n\nohNo = 1;\nwindow.ohNo; //1\ndelete ohNo; //true\n\n```\n#### 属性检测\n```javascript\nvar cat = new Object;\ncat.legs = 4;\ncat.name = 'lele';\n\n\n'legs' in cat //true\n'abc' in cat //false\n'toString' in cat //true\n\ncat.hasOwnProperty('legs')//true\ncat.hasOwnProperty('toString') //false\n//是否可枚举\ncat.propertyIsEnumerable('legs');//true\ncat.propertyIsEnumerable('toString');//false\n\n//在枚举是false的方法,Object.defineProperty默认的属性都是false\n \nObject.defineProperty(cat,'price',{\n    enumerable:false,\n    value:1000\n})\ncat.propertyIsEnumerable('price') //false\ncat.hasOwnProperty('price') //true\n\n```\n\n```javascript\nif(cat && cat.legs) {\n    cat.legs *=2\n} \nif(cat.legs != undefined) {\n    // !=undefined or !=null\n} \n\nif(cat.legs !== undefined) {\n    // only id cat.legs is not undefined\n}\n```\n\n#### 属性枚举\n```javascript  \n var o = {\n     x:1,\n     y:2,\n     z:3\n}\n'toString' in o;//true\no.propertyIsEnumerable('toString') //false\nfor(var key in o) {\n    console.log(key) //x,y,z\n}\n\nvar obj = Object(o)\nobj.a = 4;\nfor(var i in obj) {\n    console.log(i) //a,x,y,z\n}\nfor(var o in obj) {\n    if(obj.hasOwnProperty(key)) {\n        console.log)(a) //a\n    }\n}\n```\n#### 属性getter/setter方法\n```javascript\nvar person = {\n    name:'lele',\n    get age() {\n        return new Date().getFullYear() -2014\n    },\n    set age(val) {\n        console.log('no set' +val)\n    }\n}\nconsole.log(person.age) //4\nperson.age = 20 //no set20\nconsole.log(person.age) //4\n\n\n```","slug":"函数作为参数","published":1,"updated":"2021-07-01T07:30:54.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wung005azgsymoufv5dt","content":"<ul>\n<li><p>直接将函数名作为参数，直接调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test1(test2)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义一个调用以带参数的函数为参数的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    fn(mydata)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test1(test2(<span class=\"string\">'hello world'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>作为参数的函数不再单独定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    fn(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test1(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span>&#123;</span><br><span class=\"line\">    alert(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"属性删除\"><a href=\"#属性删除\" class=\"headerlink\" title=\"属性删除\"></a>属性删除</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//delete只能删除属性，不可以删除一个变量,在函数内也不可以，隐式的创建一个变量可以删除</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>,<span class=\"attr\">y</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.x; <span class=\"comment\">//true</span></span><br><span class=\"line\">obj.x;<span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> a; <span class=\"comment\">//false</span></span><br><span class=\"line\">a; <span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> localVal = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">delete</span> localVal;</span><br><span class=\"line\">&#125;)()<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> fd; <span class=\"comment\">//false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">delete</span> fd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;()) <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">ohNo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.ohNo; <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> ohNo; <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"属性检测\"><a href=\"#属性检测\" class=\"headerlink\" title=\"属性检测\"></a>属性检测</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>;</span><br><span class=\"line\">cat.legs = <span class=\"number\">4</span>;</span><br><span class=\"line\">cat.name = <span class=\"string\">'lele'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'legs'</span> <span class=\"keyword\">in</span> cat <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span> <span class=\"keyword\">in</span> cat <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"string\">'toString'</span> <span class=\"keyword\">in</span> cat <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat.hasOwnProperty(<span class=\"string\">'legs'</span>)<span class=\"comment\">//true</span></span><br><span class=\"line\">cat.hasOwnProperty(<span class=\"string\">'toString'</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//是否可枚举</span></span><br><span class=\"line\">cat.propertyIsEnumerable(<span class=\"string\">'legs'</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\">cat.propertyIsEnumerable(<span class=\"string\">'toString'</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在枚举是false的方法,Object.defineProperty默认的属性都是false</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(cat,<span class=\"string\">'price'</span>,&#123;</span><br><span class=\"line\">    enumerable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    value:<span class=\"number\">1000</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">cat.propertyIsEnumerable(<span class=\"string\">'price'</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\">cat.hasOwnProperty(<span class=\"string\">'price'</span>) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(cat &amp;&amp; cat.legs) &#123;</span><br><span class=\"line\">    cat.legs *=<span class=\"number\">2</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(cat.legs != <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// !=undefined or !=null</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(cat.legs !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// only id cat.legs is not undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"属性枚举\"><a href=\"#属性枚举\" class=\"headerlink\" title=\"属性枚举\"></a>属性枚举</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">     x:<span class=\"number\">1</span>,</span><br><span class=\"line\">     y:<span class=\"number\">2</span>,</span><br><span class=\"line\">     z:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">'toString'</span> <span class=\"keyword\">in</span> o;<span class=\"comment\">//true</span></span><br><span class=\"line\">o.propertyIsEnumerable(<span class=\"string\">'toString'</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">//x,y,z</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>(o)</span><br><span class=\"line\">obj.a = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i) <span class=\"comment\">//a,x,y,z</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> o <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log)(a) <span class=\"comment\">//a</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"属性getter-setter方法\"><a href=\"#属性getter-setter方法\" class=\"headerlink\" title=\"属性getter/setter方法\"></a>属性getter/setter方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">'lele'</span>,</span><br><span class=\"line\">    get age() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() <span class=\"number\">-2014</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set age(val) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'no set'</span> +val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age) <span class=\"comment\">//4</span></span><br><span class=\"line\">person.age = <span class=\"number\">20</span> <span class=\"comment\">//no set20</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age) <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<ul>\n<li><p>直接将函数名作为参数，直接调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'success'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test1(test2)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义一个调用以带参数的函数为参数的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    fn(mydata)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test1(test2(<span class=\"string\">'hello world'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>作为参数的函数不再单独定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    fn(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test1(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span>&#123;</span><br><span class=\"line\">    alert(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"属性删除\"><a href=\"#属性删除\" class=\"headerlink\" title=\"属性删除\"></a>属性删除</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//delete只能删除属性，不可以删除一个变量,在函数内也不可以，隐式的创建一个变量可以删除</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>,<span class=\"attr\">y</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.x; <span class=\"comment\">//true</span></span><br><span class=\"line\">obj.x;<span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> a; <span class=\"comment\">//false</span></span><br><span class=\"line\">a; <span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> localVal = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">delete</span> localVal;</span><br><span class=\"line\">&#125;)()<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> fd; <span class=\"comment\">//false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">delete</span> fd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;()) <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">ohNo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.ohNo; <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> ohNo; <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"属性检测\"><a href=\"#属性检测\" class=\"headerlink\" title=\"属性检测\"></a>属性检测</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>;</span><br><span class=\"line\">cat.legs = <span class=\"number\">4</span>;</span><br><span class=\"line\">cat.name = <span class=\"string\">'lele'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'legs'</span> <span class=\"keyword\">in</span> cat <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span> <span class=\"keyword\">in</span> cat <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"string\">'toString'</span> <span class=\"keyword\">in</span> cat <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat.hasOwnProperty(<span class=\"string\">'legs'</span>)<span class=\"comment\">//true</span></span><br><span class=\"line\">cat.hasOwnProperty(<span class=\"string\">'toString'</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//是否可枚举</span></span><br><span class=\"line\">cat.propertyIsEnumerable(<span class=\"string\">'legs'</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\">cat.propertyIsEnumerable(<span class=\"string\">'toString'</span>);<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在枚举是false的方法,Object.defineProperty默认的属性都是false</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(cat,<span class=\"string\">'price'</span>,&#123;</span><br><span class=\"line\">    enumerable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    value:<span class=\"number\">1000</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">cat.propertyIsEnumerable(<span class=\"string\">'price'</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\">cat.hasOwnProperty(<span class=\"string\">'price'</span>) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(cat &amp;&amp; cat.legs) &#123;</span><br><span class=\"line\">    cat.legs *=<span class=\"number\">2</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(cat.legs != <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// !=undefined or !=null</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(cat.legs !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// only id cat.legs is not undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"属性枚举\"><a href=\"#属性枚举\" class=\"headerlink\" title=\"属性枚举\"></a>属性枚举</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">     x:<span class=\"number\">1</span>,</span><br><span class=\"line\">     y:<span class=\"number\">2</span>,</span><br><span class=\"line\">     z:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">'toString'</span> <span class=\"keyword\">in</span> o;<span class=\"comment\">//true</span></span><br><span class=\"line\">o.propertyIsEnumerable(<span class=\"string\">'toString'</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">//x,y,z</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>(o)</span><br><span class=\"line\">obj.a = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i) <span class=\"comment\">//a,x,y,z</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> o <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log)(a) <span class=\"comment\">//a</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"属性getter-setter方法\"><a href=\"#属性getter-setter方法\" class=\"headerlink\" title=\"属性getter/setter方法\"></a>属性getter/setter方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">'lele'</span>,</span><br><span class=\"line\">    get age() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear() <span class=\"number\">-2014</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set age(val) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'no set'</span> +val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age) <span class=\"comment\">//4</span></span><br><span class=\"line\">person.age = <span class=\"number\">20</span> <span class=\"comment\">//no set20</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.age) <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>"},{"title":"变量","date":"2016-12-31T16:00:00.000Z","_content":"\n\n#### 全局变量\n* 全局变量可以减少变量的个数，减少由于实际参数和形式参数的数据传递带来的时间消耗\n* 全局变量保存在静态存储区，程序开始运行时为其分配内存，程序结束的时候释放该内存，局部变量的动态分配，动态释放相比，生存期比较长，因此过多的全局变量会占用较多的内存单元。\n* 全局变量破坏了函数的封装性能。函数象一个黑匣子，一般是通过函数参数 和返回值进行输入输出，函数内部实现相对独立。但函数中如果使用了全局变量， 那么函数体内的语句就可以绕过函数参数和返回值进行存取，这种情况破坏了函 数的独立性，使函数对全局变量产生依赖。同时，也降低了该函数的可移植性。\n* 全局变量使函数的代码可读性降低。由于多个函数都可能使用全局变量，函 数执行时全局变量的值可能随时发生变化，对于程序的查错和调试都非常不利。 因此，如果不是万不得已，最好不要使用全局变量。\n\n#### 局部变量\n*  当局部变量与全局变量同名的时候，全局变量会被局部变量覆盖。也就是说 函数在使用该变量的时候会以局部变量覆盖全局变量，也就是只有局部变量会起 效果。在此定义域中赋值等操作时都不会使用到全局变量。\n*  在 main 函数或其他函数里定义了局部变量，同时同名的全局变量同时也存 在，当调用一个使用了该变量的函数(该变量在此函数中无定义)时，函数会使 用全局变量。而不是 main 或其他函数中定义的同名变量\n\n\n#### var \n* 没有块级作用域\n* 可以重复使用\n* 无法限制修改\n\n\n","source":"_posts/变量.md","raw":"---\ntitle: 变量\ndate: 2017-01-01\ncategories: js\ntags: [编程,感悟]\n---\n\n\n#### 全局变量\n* 全局变量可以减少变量的个数，减少由于实际参数和形式参数的数据传递带来的时间消耗\n* 全局变量保存在静态存储区，程序开始运行时为其分配内存，程序结束的时候释放该内存，局部变量的动态分配，动态释放相比，生存期比较长，因此过多的全局变量会占用较多的内存单元。\n* 全局变量破坏了函数的封装性能。函数象一个黑匣子，一般是通过函数参数 和返回值进行输入输出，函数内部实现相对独立。但函数中如果使用了全局变量， 那么函数体内的语句就可以绕过函数参数和返回值进行存取，这种情况破坏了函 数的独立性，使函数对全局变量产生依赖。同时，也降低了该函数的可移植性。\n* 全局变量使函数的代码可读性降低。由于多个函数都可能使用全局变量，函 数执行时全局变量的值可能随时发生变化，对于程序的查错和调试都非常不利。 因此，如果不是万不得已，最好不要使用全局变量。\n\n#### 局部变量\n*  当局部变量与全局变量同名的时候，全局变量会被局部变量覆盖。也就是说 函数在使用该变量的时候会以局部变量覆盖全局变量，也就是只有局部变量会起 效果。在此定义域中赋值等操作时都不会使用到全局变量。\n*  在 main 函数或其他函数里定义了局部变量，同时同名的全局变量同时也存 在，当调用一个使用了该变量的函数(该变量在此函数中无定义)时，函数会使 用全局变量。而不是 main 或其他函数中定义的同名变量\n\n\n#### var \n* 没有块级作用域\n* 可以重复使用\n* 无法限制修改\n\n\n","slug":"变量","published":1,"updated":"2021-07-01T07:30:54.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuni005dzgsyv2wcjo9p","content":"<h4 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h4><ul>\n<li>全局变量可以减少变量的个数，减少由于实际参数和形式参数的数据传递带来的时间消耗</li>\n<li>全局变量保存在静态存储区，程序开始运行时为其分配内存，程序结束的时候释放该内存，局部变量的动态分配，动态释放相比，生存期比较长，因此过多的全局变量会占用较多的内存单元。</li>\n<li>全局变量破坏了函数的封装性能。函数象一个黑匣子，一般是通过函数参数 和返回值进行输入输出，函数内部实现相对独立。但函数中如果使用了全局变量， 那么函数体内的语句就可以绕过函数参数和返回值进行存取，这种情况破坏了函 数的独立性，使函数对全局变量产生依赖。同时，也降低了该函数的可移植性。</li>\n<li>全局变量使函数的代码可读性降低。由于多个函数都可能使用全局变量，函 数执行时全局变量的值可能随时发生变化，对于程序的查错和调试都非常不利。 因此，如果不是万不得已，最好不要使用全局变量。</li>\n</ul>\n<h4 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h4><ul>\n<li>当局部变量与全局变量同名的时候，全局变量会被局部变量覆盖。也就是说 函数在使用该变量的时候会以局部变量覆盖全局变量，也就是只有局部变量会起 效果。在此定义域中赋值等操作时都不会使用到全局变量。</li>\n<li>在 main 函数或其他函数里定义了局部变量，同时同名的全局变量同时也存 在，当调用一个使用了该变量的函数(该变量在此函数中无定义)时，函数会使 用全局变量。而不是 main 或其他函数中定义的同名变量</li>\n</ul>\n<h4 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h4><ul>\n<li>没有块级作用域</li>\n<li>可以重复使用</li>\n<li>无法限制修改</li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<h4 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h4><ul>\n<li>全局变量可以减少变量的个数，减少由于实际参数和形式参数的数据传递带来的时间消耗</li>\n<li>全局变量保存在静态存储区，程序开始运行时为其分配内存，程序结束的时候释放该内存，局部变量的动态分配，动态释放相比，生存期比较长，因此过多的全局变量会占用较多的内存单元。</li>\n<li>全局变量破坏了函数的封装性能。函数象一个黑匣子，一般是通过函数参数 和返回值进行输入输出，函数内部实现相对独立。但函数中如果使用了全局变量， 那么函数体内的语句就可以绕过函数参数和返回值进行存取，这种情况破坏了函 数的独立性，使函数对全局变量产生依赖。同时，也降低了该函数的可移植性。</li>\n<li>全局变量使函数的代码可读性降低。由于多个函数都可能使用全局变量，函 数执行时全局变量的值可能随时发生变化，对于程序的查错和调试都非常不利。 因此，如果不是万不得已，最好不要使用全局变量。</li>\n</ul>\n<h4 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h4><ul>\n<li>当局部变量与全局变量同名的时候，全局变量会被局部变量覆盖。也就是说 函数在使用该变量的时候会以局部变量覆盖全局变量，也就是只有局部变量会起 效果。在此定义域中赋值等操作时都不会使用到全局变量。</li>\n<li>在 main 函数或其他函数里定义了局部变量，同时同名的全局变量同时也存 在，当调用一个使用了该变量的函数(该变量在此函数中无定义)时，函数会使 用全局变量。而不是 main 或其他函数中定义的同名变量</li>\n</ul>\n<h4 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h4><ul>\n<li>没有块级作用域</li>\n<li>可以重复使用</li>\n<li>无法限制修改</li>\n</ul>\n"},{"title":"回调函数","date":"2018-02-28T16:00:00.000Z","copyright":true,"_content":"\n* js代码是顺序执行的，如果需要等到一个操作结束之后再进行下一个操作，这个时候需要用到回调函数\n* 函数也是一种数据结构，可以像变量一样使用\n","source":"_posts/回调函数.md","raw":"---\ntitle: 回调函数\ncategories: js\ndate: 2018-03-01\ntags: [编程,感悟]\ncopyright: true\n\n---\n\n* js代码是顺序执行的，如果需要等到一个操作结束之后再进行下一个操作，这个时候需要用到回调函数\n* 函数也是一种数据结构，可以像变量一样使用\n","slug":"回调函数","published":1,"updated":"2021-07-01T07:30:54.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wunk005gzgsyw8g5mgyx","content":"<ul>\n<li>js代码是顺序执行的，如果需要等到一个操作结束之后再进行下一个操作，这个时候需要用到回调函数</li>\n<li>函数也是一种数据结构，可以像变量一样使用</li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<ul>\n<li>js代码是顺序执行的，如果需要等到一个操作结束之后再进行下一个操作，这个时候需要用到回调函数</li>\n<li>函数也是一种数据结构，可以像变量一样使用</li>\n</ul>\n"},{"title":"在项目中使用二次元（live2d）","date":"2021-07-01T07:02:41.000Z","_content":"<blockquote class=\"blockquote-center\">\n<image src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzk4YjQzNTJhZ3kxZzI5NGVocG96aWoyMDVhMDVuZ2xrLmpwZw?x-oss-process=image/format,png\"></image>\n了解live2d使用原理\n</blockquote>\n\n<!-- more -->\n\n\n\n```shell\nnpm install --save hexo-helper-live2d\nnpm install live2d-widget-model-hijiki #这里可以改成你想要的动画资源\n\n```\n![](https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzk4YjQzNTJhZ3kxZzI5NThmMGd5cGoyMGloMGhpYWFuLmpwZw?x-oss-process=image/format,png)\n\n找到并拷贝`node_modules\\live2d-widget-model-hijiki`文件夹\n\n在博客的根目录下新建一个文件夹（live2d_modules），将之前拷贝的内容放进去\n\n找到根目录的配置文件`_config.xml`\n```\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  debug: false\n  model:\n    use: live2d-widget-model-hijiki\n  display:\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: true\n```\n\n运行 `hexo clean && hexo g && hexo d`\n\n\n 编译完后 public 目录会多出来一个live2dw,index.html\n\n 打开HTML文件，拉到最下面，复制js代码段\n\n```javascript\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script>\n<script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/live2d-widget-model-hijiki.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":true},\"log\":false});\n</script>\n```\n\n把复制出来的 2 段script标签和上图中 live2dw文件夹，拷到自己的项目中\n\n#### 要注意资源路径的存放方式，避免因为资源文件找不到一直报错\n\n只要把资源文件放好，JS引入正确，方法调用没问题。那就是已经成功了\n\n>其实通过 hexo 编译只是为了拿到 /live2dw/lib/L2Dwidget.min.js 这段核心JS文件,在 init 方法中的一些配置，其实都是对应的路径。比如 lib 的路径 assets(动画资源的路径)。只要细心一点，观察一下目录的路径不同。就可以在项目中通过修改配置使用全部的动画了！\n\n### 在vue中的使用\n\n将live2dw放入public文件夹中\n\n在index.html文件中引用`<script src=\"/live2dw/lib/L2Dwidget.min.js\"></script>`\n\n使用：\n```js\n created () {\n    setTimeout(() => {\n      window.L2Dwidget.init({\n        pluginRootPath: 'live2dw/',\n        pluginJsPath: 'lib/',\n        pluginModelPath: 'live2d-widget-model-hijiki/assets/',\n        tagMode: false,\n        debug: false,\n        model: { jsonPath: '/live2dw/live2d-widget-model-hijiki/assets/hijiki.model.json' },\n        display: { position: 'right', width: 150, height: 300 },\n        mobile: { show: true },\n        log: false\n      })\n    }, 3000)\n  }\n```\n\n\n\n","source":"_posts/在项目中使用二次元（live2d）.md","raw":"---\ntitle: 在项目中使用二次元（live2d）\ndate: 2021-07-01 15:02:41\ntags: []\n---\n<blockquote class=\"blockquote-center\">\n<image src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzk4YjQzNTJhZ3kxZzI5NGVocG96aWoyMDVhMDVuZ2xrLmpwZw?x-oss-process=image/format,png\"></image>\n了解live2d使用原理\n</blockquote>\n\n<!-- more -->\n\n\n\n```shell\nnpm install --save hexo-helper-live2d\nnpm install live2d-widget-model-hijiki #这里可以改成你想要的动画资源\n\n```\n![](https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzk4YjQzNTJhZ3kxZzI5NThmMGd5cGoyMGloMGhpYWFuLmpwZw?x-oss-process=image/format,png)\n\n找到并拷贝`node_modules\\live2d-widget-model-hijiki`文件夹\n\n在博客的根目录下新建一个文件夹（live2d_modules），将之前拷贝的内容放进去\n\n找到根目录的配置文件`_config.xml`\n```\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  debug: false\n  model:\n    use: live2d-widget-model-hijiki\n  display:\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: true\n```\n\n运行 `hexo clean && hexo g && hexo d`\n\n\n 编译完后 public 目录会多出来一个live2dw,index.html\n\n 打开HTML文件，拉到最下面，复制js代码段\n\n```javascript\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script>\n<script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/live2d-widget-model-hijiki.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":true},\"log\":false});\n</script>\n```\n\n把复制出来的 2 段script标签和上图中 live2dw文件夹，拷到自己的项目中\n\n#### 要注意资源路径的存放方式，避免因为资源文件找不到一直报错\n\n只要把资源文件放好，JS引入正确，方法调用没问题。那就是已经成功了\n\n>其实通过 hexo 编译只是为了拿到 /live2dw/lib/L2Dwidget.min.js 这段核心JS文件,在 init 方法中的一些配置，其实都是对应的路径。比如 lib 的路径 assets(动画资源的路径)。只要细心一点，观察一下目录的路径不同。就可以在项目中通过修改配置使用全部的动画了！\n\n### 在vue中的使用\n\n将live2dw放入public文件夹中\n\n在index.html文件中引用`<script src=\"/live2dw/lib/L2Dwidget.min.js\"></script>`\n\n使用：\n```js\n created () {\n    setTimeout(() => {\n      window.L2Dwidget.init({\n        pluginRootPath: 'live2dw/',\n        pluginJsPath: 'lib/',\n        pluginModelPath: 'live2d-widget-model-hijiki/assets/',\n        tagMode: false,\n        debug: false,\n        model: { jsonPath: '/live2dw/live2d-widget-model-hijiki/assets/hijiki.model.json' },\n        display: { position: 'right', width: 150, height: 300 },\n        mobile: { show: true },\n        log: false\n      })\n    }, 3000)\n  }\n```\n\n\n\n","slug":"在项目中使用二次元（live2d）","published":1,"updated":"2021-07-01T10:22:00.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wunm005jzgsybvd07ral","content":"<blockquote class=\"blockquote-center\"><br><image src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzk4YjQzNTJhZ3kxZzI5NGVocG96aWoyMDVhMDVuZ2xrLmpwZw?x-oss-process=image/format,png\"></image><br>了解live2d使用原理<br></blockquote>\n\n<a id=\"more\"></a>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-helper-live2d</span><br><span class=\"line\">npm install live2d-widget-model-hijiki #这里可以改成你想要的动画资源</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzk4YjQzNTJhZ3kxZzI5NThmMGd5cGoyMGloMGhpYWFuLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>找到并拷贝<code>node_modules\\live2d-widget-model-hijiki</code>文件夹</p>\n<p>在博客的根目录下新建一个文件夹（live2d_modules），将之前拷贝的内容放进去</p>\n<p>找到根目录的配置文件<code>_config.xml</code><br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">live2d:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  scriptFrom:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  pluginRootPath:</span> <span class=\"string\">live2dw/</span></span><br><span class=\"line\"><span class=\"attr\">  pluginJsPath:</span> <span class=\"string\">lib/</span></span><br><span class=\"line\"><span class=\"attr\">  pluginModelPath:</span> <span class=\"string\">assets/</span></span><br><span class=\"line\"><span class=\"attr\">  tagMode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  model:</span></span><br><span class=\"line\"><span class=\"attr\">    use:</span> <span class=\"string\">live2d-widget-model-hijiki</span></span><br><span class=\"line\"><span class=\"attr\">  display:</span></span><br><span class=\"line\"><span class=\"attr\">    position:</span> <span class=\"string\">right</span></span><br><span class=\"line\"><span class=\"attr\">    width:</span> <span class=\"number\">150</span></span><br><span class=\"line\"><span class=\"attr\">    height:</span> <span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"attr\">  mobile:</span></span><br><span class=\"line\"><span class=\"attr\">    show:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>运行 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>\n<p> 编译完后 public 目录会多出来一个live2dw,index.html</p>\n<p> 打开HTML文件，拉到最下面，复制js代码段</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script&gt;L2Dwidget.init(&#123;<span class=\"string\">\"pluginRootPath\"</span>:<span class=\"string\">\"live2dw/\"</span>,<span class=\"string\">\"pluginJsPath\"</span>:<span class=\"string\">\"lib/\"</span>,<span class=\"string\">\"pluginModelPath\"</span>:<span class=\"string\">\"assets/\"</span>,<span class=\"string\">\"tagMode\"</span>:<span class=\"literal\">false</span>,<span class=\"string\">\"debug\"</span>:<span class=\"literal\">false</span>,<span class=\"string\">\"model\"</span>:&#123;<span class=\"string\">\"jsonPath\"</span>:<span class=\"string\">\"/live2dw/assets/live2d-widget-model-hijiki.model.json\"</span>&#125;,<span class=\"string\">\"display\"</span>:&#123;<span class=\"string\">\"position\"</span>:<span class=\"string\">\"right\"</span>,<span class=\"string\">\"width\"</span>:<span class=\"number\">150</span>,<span class=\"string\">\"height\"</span>:<span class=\"number\">300</span>&#125;,<span class=\"string\">\"mobile\"</span>:&#123;<span class=\"string\">\"show\"</span>:<span class=\"literal\">true</span>&#125;,<span class=\"string\">\"log\"</span>:<span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>把复制出来的 2 段script标签和上图中 live2dw文件夹，拷到自己的项目中</p>\n<h4 id=\"要注意资源路径的存放方式，避免因为资源文件找不到一直报错\"><a href=\"#要注意资源路径的存放方式，避免因为资源文件找不到一直报错\" class=\"headerlink\" title=\"要注意资源路径的存放方式，避免因为资源文件找不到一直报错\"></a>要注意资源路径的存放方式，避免因为资源文件找不到一直报错</h4><p>只要把资源文件放好，JS引入正确，方法调用没问题。那就是已经成功了</p>\n<blockquote>\n<p>其实通过 hexo 编译只是为了拿到 /live2dw/lib/L2Dwidget.min.js 这段核心JS文件,在 init 方法中的一些配置，其实都是对应的路径。比如 lib 的路径 assets(动画资源的路径)。只要细心一点，观察一下目录的路径不同。就可以在项目中通过修改配置使用全部的动画了！</p>\n</blockquote>\n<h3 id=\"在vue中的使用\"><a href=\"#在vue中的使用\" class=\"headerlink\" title=\"在vue中的使用\"></a>在vue中的使用</h3><p>将live2dw放入public文件夹中</p>\n<p>在index.html文件中引用<code>&lt;script src=&quot;/live2dw/lib/L2Dwidget.min.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>使用：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">created () &#123;</span><br><span class=\"line\">   setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">window</span>.L2Dwidget.init(&#123;</span><br><span class=\"line\">       pluginRootPath: <span class=\"string\">'live2dw/'</span>,</span><br><span class=\"line\">       pluginJsPath: <span class=\"string\">'lib/'</span>,</span><br><span class=\"line\">       pluginModelPath: <span class=\"string\">'live2d-widget-model-hijiki/assets/'</span>,</span><br><span class=\"line\">       tagMode: <span class=\"literal\">false</span>,</span><br><span class=\"line\">       debug: <span class=\"literal\">false</span>,</span><br><span class=\"line\">       model: &#123; <span class=\"attr\">jsonPath</span>: <span class=\"string\">'/live2dw/live2d-widget-model-hijiki/assets/hijiki.model.json'</span> &#125;,</span><br><span class=\"line\">       display: &#123; <span class=\"attr\">position</span>: <span class=\"string\">'right'</span>, <span class=\"attr\">width</span>: <span class=\"number\">150</span>, <span class=\"attr\">height</span>: <span class=\"number\">300</span> &#125;,</span><br><span class=\"line\">       mobile: &#123; <span class=\"attr\">show</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">       log: <span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"<blockquote class=\"blockquote-center\"><br><image src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzk4YjQzNTJhZ3kxZzI5NGVocG96aWoyMDVhMDVuZ2xrLmpwZw?x-oss-process=image/format,png\"></image><br>了解live2d使用原理<br></blockquote>","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-helper-live2d</span><br><span class=\"line\">npm install live2d-widget-model-hijiki #这里可以改成你想要的动画资源</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzk4YjQzNTJhZ3kxZzI5NThmMGd5cGoyMGloMGhpYWFuLmpwZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<p>找到并拷贝<code>node_modules\\live2d-widget-model-hijiki</code>文件夹</p>\n<p>在博客的根目录下新建一个文件夹（live2d_modules），将之前拷贝的内容放进去</p>\n<p>找到根目录的配置文件<code>_config.xml</code><br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">live2d:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  scriptFrom:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  pluginRootPath:</span> <span class=\"string\">live2dw/</span></span><br><span class=\"line\"><span class=\"attr\">  pluginJsPath:</span> <span class=\"string\">lib/</span></span><br><span class=\"line\"><span class=\"attr\">  pluginModelPath:</span> <span class=\"string\">assets/</span></span><br><span class=\"line\"><span class=\"attr\">  tagMode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  model:</span></span><br><span class=\"line\"><span class=\"attr\">    use:</span> <span class=\"string\">live2d-widget-model-hijiki</span></span><br><span class=\"line\"><span class=\"attr\">  display:</span></span><br><span class=\"line\"><span class=\"attr\">    position:</span> <span class=\"string\">right</span></span><br><span class=\"line\"><span class=\"attr\">    width:</span> <span class=\"number\">150</span></span><br><span class=\"line\"><span class=\"attr\">    height:</span> <span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"attr\">  mobile:</span></span><br><span class=\"line\"><span class=\"attr\">    show:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>运行 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>\n<p> 编译完后 public 目录会多出来一个live2dw,index.html</p>\n<p> 打开HTML文件，拉到最下面，复制js代码段</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script&gt;L2Dwidget.init(&#123;<span class=\"string\">\"pluginRootPath\"</span>:<span class=\"string\">\"live2dw/\"</span>,<span class=\"string\">\"pluginJsPath\"</span>:<span class=\"string\">\"lib/\"</span>,<span class=\"string\">\"pluginModelPath\"</span>:<span class=\"string\">\"assets/\"</span>,<span class=\"string\">\"tagMode\"</span>:<span class=\"literal\">false</span>,<span class=\"string\">\"debug\"</span>:<span class=\"literal\">false</span>,<span class=\"string\">\"model\"</span>:&#123;<span class=\"string\">\"jsonPath\"</span>:<span class=\"string\">\"/live2dw/assets/live2d-widget-model-hijiki.model.json\"</span>&#125;,<span class=\"string\">\"display\"</span>:&#123;<span class=\"string\">\"position\"</span>:<span class=\"string\">\"right\"</span>,<span class=\"string\">\"width\"</span>:<span class=\"number\">150</span>,<span class=\"string\">\"height\"</span>:<span class=\"number\">300</span>&#125;,<span class=\"string\">\"mobile\"</span>:&#123;<span class=\"string\">\"show\"</span>:<span class=\"literal\">true</span>&#125;,<span class=\"string\">\"log\"</span>:<span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>把复制出来的 2 段script标签和上图中 live2dw文件夹，拷到自己的项目中</p>\n<h4 id=\"要注意资源路径的存放方式，避免因为资源文件找不到一直报错\"><a href=\"#要注意资源路径的存放方式，避免因为资源文件找不到一直报错\" class=\"headerlink\" title=\"要注意资源路径的存放方式，避免因为资源文件找不到一直报错\"></a>要注意资源路径的存放方式，避免因为资源文件找不到一直报错</h4><p>只要把资源文件放好，JS引入正确，方法调用没问题。那就是已经成功了</p>\n<blockquote>\n<p>其实通过 hexo 编译只是为了拿到 /live2dw/lib/L2Dwidget.min.js 这段核心JS文件,在 init 方法中的一些配置，其实都是对应的路径。比如 lib 的路径 assets(动画资源的路径)。只要细心一点，观察一下目录的路径不同。就可以在项目中通过修改配置使用全部的动画了！</p>\n</blockquote>\n<h3 id=\"在vue中的使用\"><a href=\"#在vue中的使用\" class=\"headerlink\" title=\"在vue中的使用\"></a>在vue中的使用</h3><p>将live2dw放入public文件夹中</p>\n<p>在index.html文件中引用<code>&lt;script src=&quot;/live2dw/lib/L2Dwidget.min.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>使用：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">created () &#123;</span><br><span class=\"line\">   setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">window</span>.L2Dwidget.init(&#123;</span><br><span class=\"line\">       pluginRootPath: <span class=\"string\">'live2dw/'</span>,</span><br><span class=\"line\">       pluginJsPath: <span class=\"string\">'lib/'</span>,</span><br><span class=\"line\">       pluginModelPath: <span class=\"string\">'live2d-widget-model-hijiki/assets/'</span>,</span><br><span class=\"line\">       tagMode: <span class=\"literal\">false</span>,</span><br><span class=\"line\">       debug: <span class=\"literal\">false</span>,</span><br><span class=\"line\">       model: &#123; <span class=\"attr\">jsonPath</span>: <span class=\"string\">'/live2dw/live2d-widget-model-hijiki/assets/hijiki.model.json'</span> &#125;,</span><br><span class=\"line\">       display: &#123; <span class=\"attr\">position</span>: <span class=\"string\">'right'</span>, <span class=\"attr\">width</span>: <span class=\"number\">150</span>, <span class=\"attr\">height</span>: <span class=\"number\">300</span> &#125;,</span><br><span class=\"line\">       mobile: &#123; <span class=\"attr\">show</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">       log: <span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">   &#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"垃圾回收","date":"2017-12-02T16:00:00.000Z","_content":"\n#### 代码回收规则\n1. 全局变量不会被回收\n2. 局部变量会被回收，函数一旦运行完毕，函数内部的东西会被销毁\n3. 只要被另外一个作用于所引用就不会被回收\n\n```javascript\n var i = 1;\n var i = 2;\n var add = function() {\n     var i = 0;\n     return function() {\n         i++;\n         console.log(i)\n     }\n }();\n add();\n```\n","source":"_posts/垃圾回收.md","raw":"---\ntitle: 垃圾回收\ncategories: js\ndate: 2017-12-03\ntags: [编程,感悟]\n---\n\n#### 代码回收规则\n1. 全局变量不会被回收\n2. 局部变量会被回收，函数一旦运行完毕，函数内部的东西会被销毁\n3. 只要被另外一个作用于所引用就不会被回收\n\n```javascript\n var i = 1;\n var i = 2;\n var add = function() {\n     var i = 0;\n     return function() {\n         i++;\n         console.log(i)\n     }\n }();\n add();\n```\n","slug":"垃圾回收","published":1,"updated":"2021-07-01T07:30:54.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuno005mzgsyqw1ltika","content":"<h4 id=\"代码回收规则\"><a href=\"#代码回收规则\" class=\"headerlink\" title=\"代码回收规则\"></a>代码回收规则</h4><ol>\n<li>全局变量不会被回收</li>\n<li>局部变量会被回收，函数一旦运行完毕，函数内部的东西会被销毁</li>\n<li>只要被另外一个作用于所引用就不会被回收</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\">add();</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<h4 id=\"代码回收规则\"><a href=\"#代码回收规则\" class=\"headerlink\" title=\"代码回收规则\"></a>代码回收规则</h4><ol>\n<li>全局变量不会被回收</li>\n<li>局部变量会被回收，函数一旦运行完毕，函数内部的东西会被销毁</li>\n<li>只要被另外一个作用于所引用就不会被回收</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\">add();</span><br></pre></td></tr></table></figure>\n"},{"title":"封装(1)","date":"2015-03-22T02:39:40.000Z","_content":"<blockquote class=\"blockquote-center\">\n逐步运动\n</blockquote>\n\n<!-- more -->\n\n\n```javascript\n//html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n        \n        div {\n            width: 200px;\n            height: 200px;\n            opacity: .3;\n            background-color: yellow;\n        }\n    </style>\n</head>\n\n<body>\n    <div></div>\n    <script src=\"moveOne.js\"></script>\n    <script>\n        var tag = $tag('div')\n        tag.onmouseover = function() {\n            starSport(tag, 'width', 400, function() {\n                starSport(tag, 'opacity', 100)\n\n            })\n        }\n        tag.onmouseout = function() {\n            starSport(tag, 'width', 200, function() {\n                starSport(tag, 'opacity', 30)\n            })\n        }\n    </script>\n</body>\n\n</html>\n```\n\n``` javascript\n//moveOne.js\nfunction $tag(id) {\n    return document.querySelector(id)\n}\n//获取样式属性\nfunction getStyle(obj, attr) {\n    if (obj.currentStyle) {\n        return obj.currentStyle[attr]\n    } else {\n        return getComputedStyle(obj, false)[attr]\n    }\n}\n\n//运动\nfunction starSport(obj, attr, target, fn) { //当前对象，属性，变化对象\n    obj.timer = null\n    clearInterval(obj.timer)\n    obj.timer = setInterval(function () {\n        var current = 0\n        //定义当前属性\n        if (attr === 'opacity') {\n            current = Math.round(parseFloat(getStyle(obj, attr) * 100))\n        } else {\n            current = parseInt(getStyle(obj, attr))\n        }\n        //定义速度\n        var speed = (target - current) / 8\n        speed = speed > 0 ? Math.ceil(speed) : Math.floor(speed)\n\n\n        //如果当前值等于目标值\n        if (current === target) {\n            //如果第一次运动停止\n            clearInterval(obj.timer)\n            if (fn) {\n                fn()\n            }\n        } else {\n            if (attr === 'opacity') {\n                obj.style[attr] = (current + speed) / 100\n            } else {\n                obj.style[attr] = current + speed + 'px'\n\n            }\n        }\n    }, 30)\n}\n\n\n```","source":"_posts/封装运动1.md","raw":"---\ntitle: 封装(1)\ncategories: js\ndate: 2015-03-22 10:39:40\ntags: [编程,封装]\n---\n<blockquote class=\"blockquote-center\">\n逐步运动\n</blockquote>\n\n<!-- more -->\n\n\n```javascript\n//html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n        \n        div {\n            width: 200px;\n            height: 200px;\n            opacity: .3;\n            background-color: yellow;\n        }\n    </style>\n</head>\n\n<body>\n    <div></div>\n    <script src=\"moveOne.js\"></script>\n    <script>\n        var tag = $tag('div')\n        tag.onmouseover = function() {\n            starSport(tag, 'width', 400, function() {\n                starSport(tag, 'opacity', 100)\n\n            })\n        }\n        tag.onmouseout = function() {\n            starSport(tag, 'width', 200, function() {\n                starSport(tag, 'opacity', 30)\n            })\n        }\n    </script>\n</body>\n\n</html>\n```\n\n``` javascript\n//moveOne.js\nfunction $tag(id) {\n    return document.querySelector(id)\n}\n//获取样式属性\nfunction getStyle(obj, attr) {\n    if (obj.currentStyle) {\n        return obj.currentStyle[attr]\n    } else {\n        return getComputedStyle(obj, false)[attr]\n    }\n}\n\n//运动\nfunction starSport(obj, attr, target, fn) { //当前对象，属性，变化对象\n    obj.timer = null\n    clearInterval(obj.timer)\n    obj.timer = setInterval(function () {\n        var current = 0\n        //定义当前属性\n        if (attr === 'opacity') {\n            current = Math.round(parseFloat(getStyle(obj, attr) * 100))\n        } else {\n            current = parseInt(getStyle(obj, attr))\n        }\n        //定义速度\n        var speed = (target - current) / 8\n        speed = speed > 0 ? Math.ceil(speed) : Math.floor(speed)\n\n\n        //如果当前值等于目标值\n        if (current === target) {\n            //如果第一次运动停止\n            clearInterval(obj.timer)\n            if (fn) {\n                fn()\n            }\n        } else {\n            if (attr === 'opacity') {\n                obj.style[attr] = (current + speed) / 100\n            } else {\n                obj.style[attr] = current + speed + 'px'\n\n            }\n        }\n    }, 30)\n}\n\n\n```","slug":"封装运动1","published":1,"updated":"2021-07-05T02:41:50.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wunp005pzgsypx6nqjl2","content":"<blockquote class=\"blockquote-center\"><br>逐步运动<br></blockquote>\n\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//html</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=, initial-scale=1.0\"</span>&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=<span class=\"string\">\"X-UA-Compatible\"</span> content=<span class=\"string\">\"ie=edge\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        * &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            margin: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">            padding: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        </span></span><br><span class=\"line\"><span class=\"regexp\">        div &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"regexp\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"regexp\">            opacity: .3;</span></span><br><span class=\"line\"><span class=\"regexp\">            background-color: yellow;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>style&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/head&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"moveOne.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tag = $tag(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">        tag.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            starSport(tag, <span class=\"string\">'width'</span>, <span class=\"number\">400</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                starSport(tag, <span class=\"string\">'opacity'</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tag.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            starSport(tag, <span class=\"string\">'width'</span>, <span class=\"number\">200</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                starSport(tag, <span class=\"string\">'opacity'</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//moveOne.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$tag</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//获取样式属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">obj, attr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.currentStyle) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.currentStyle[attr]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getComputedStyle(obj, <span class=\"literal\">false</span>)[attr]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">starSport</span>(<span class=\"params\">obj, attr, target, fn</span>) </span>&#123; <span class=\"comment\">//当前对象，属性，变化对象</span></span><br><span class=\"line\">    obj.timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    clearInterval(obj.timer)</span><br><span class=\"line\">    obj.timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> current = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\">//定义当前属性</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (attr === <span class=\"string\">'opacity'</span>) &#123;</span><br><span class=\"line\">            current = <span class=\"built_in\">Math</span>.round(<span class=\"built_in\">parseFloat</span>(getStyle(obj, attr) * <span class=\"number\">100</span>))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            current = <span class=\"built_in\">parseInt</span>(getStyle(obj, attr))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//定义速度</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> speed = (target - current) / <span class=\"number\">8</span></span><br><span class=\"line\">        speed = speed &gt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.ceil(speed) : <span class=\"built_in\">Math</span>.floor(speed)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果当前值等于目标值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current === target) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果第一次运动停止</span></span><br><span class=\"line\">            clearInterval(obj.timer)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fn) &#123;</span><br><span class=\"line\">                fn()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (attr === <span class=\"string\">'opacity'</span>) &#123;</span><br><span class=\"line\">                obj.style[attr] = (current + speed) / <span class=\"number\">100</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                obj.style[attr] = current + speed + <span class=\"string\">'px'</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"<blockquote class=\"blockquote-center\"><br>逐步运动<br></blockquote>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//html</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=, initial-scale=1.0\"</span>&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=<span class=\"string\">\"X-UA-Compatible\"</span> content=<span class=\"string\">\"ie=edge\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        * &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            margin: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">            padding: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        </span></span><br><span class=\"line\"><span class=\"regexp\">        div &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            width: 200px;</span></span><br><span class=\"line\"><span class=\"regexp\">            height: 200px;</span></span><br><span class=\"line\"><span class=\"regexp\">            opacity: .3;</span></span><br><span class=\"line\"><span class=\"regexp\">            background-color: yellow;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>style&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/head&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"moveOne.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tag = $tag(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">        tag.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            starSport(tag, <span class=\"string\">'width'</span>, <span class=\"number\">400</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                starSport(tag, <span class=\"string\">'opacity'</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tag.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            starSport(tag, <span class=\"string\">'width'</span>, <span class=\"number\">200</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                starSport(tag, <span class=\"string\">'opacity'</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//moveOne.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$tag</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//获取样式属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">obj, attr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.currentStyle) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.currentStyle[attr]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getComputedStyle(obj, <span class=\"literal\">false</span>)[attr]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">starSport</span>(<span class=\"params\">obj, attr, target, fn</span>) </span>&#123; <span class=\"comment\">//当前对象，属性，变化对象</span></span><br><span class=\"line\">    obj.timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    clearInterval(obj.timer)</span><br><span class=\"line\">    obj.timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> current = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\">//定义当前属性</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (attr === <span class=\"string\">'opacity'</span>) &#123;</span><br><span class=\"line\">            current = <span class=\"built_in\">Math</span>.round(<span class=\"built_in\">parseFloat</span>(getStyle(obj, attr) * <span class=\"number\">100</span>))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            current = <span class=\"built_in\">parseInt</span>(getStyle(obj, attr))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//定义速度</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> speed = (target - current) / <span class=\"number\">8</span></span><br><span class=\"line\">        speed = speed &gt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.ceil(speed) : <span class=\"built_in\">Math</span>.floor(speed)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果当前值等于目标值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current === target) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果第一次运动停止</span></span><br><span class=\"line\">            clearInterval(obj.timer)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fn) &#123;</span><br><span class=\"line\">                fn()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (attr === <span class=\"string\">'opacity'</span>) &#123;</span><br><span class=\"line\">                obj.style[attr] = (current + speed) / <span class=\"number\">100</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                obj.style[attr] = current + speed + <span class=\"string\">'px'</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">30</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"既可以输入又可以显示下拉的列表","date":"2017-12-01T16:00:00.000Z","_content":"今日工作需求，写了一个既可以上传输入又可以下拉列表的输入框\n总结下这个功能的实现\n```javascript\n <input type=\"text\"\n                 id=\"selectId\"\n                 placeholder=\"Select Teacher\"\n                 v-model=\"teaName\"\n                 value=\"\"\n                 @click=\"selectTeacher\"\n                 class=\"form-control pr\">\n                 <img src=\"/static/image/course-back.png\"\n                 class=\"course-select-img\" \n                 :class=\"{'course-select-img-transform':teaSelect}\">\n <--下拉列表-->\n          <div class=\"course-select \" \n               v-show=\"teaSelect\">\n          <ul>\n          <li v-for=\"(item,index) in filtedTeacher\"\n              @click=\"selectOption(item)\">{{item.name}}</li>\n          </ul>\n</div>\n        \n\n//省略列表显示部分，着重记录下输入匹配的方法\ndata() {\n    return{\n        teachers:[] //接收后台传来的对象\n    }\n}\ncomputed:{\n    let filtedTeacher = [];\n    let inputName = this.teaName\n    if(!inputName || !inputName.length) {\n        return this.teachers //把原数组返回\n    }else{\n        for(var teacher of this.teachers) {\n            if(teacher.name.indexOf(inputName) !== -1) {\n                filtedTeacher.push(teacher)\n            }\n        }\n    }\n\n}\n```","source":"_posts/显示下拉.md","raw":"---\ntitle: 既可以输入又可以显示下拉的列表\ndate: 2017-12-02\ncategories: js\ntags: [编程,学习]\n---\n今日工作需求，写了一个既可以上传输入又可以下拉列表的输入框\n总结下这个功能的实现\n```javascript\n <input type=\"text\"\n                 id=\"selectId\"\n                 placeholder=\"Select Teacher\"\n                 v-model=\"teaName\"\n                 value=\"\"\n                 @click=\"selectTeacher\"\n                 class=\"form-control pr\">\n                 <img src=\"/static/image/course-back.png\"\n                 class=\"course-select-img\" \n                 :class=\"{'course-select-img-transform':teaSelect}\">\n <--下拉列表-->\n          <div class=\"course-select \" \n               v-show=\"teaSelect\">\n          <ul>\n          <li v-for=\"(item,index) in filtedTeacher\"\n              @click=\"selectOption(item)\">{{item.name}}</li>\n          </ul>\n</div>\n        \n\n//省略列表显示部分，着重记录下输入匹配的方法\ndata() {\n    return{\n        teachers:[] //接收后台传来的对象\n    }\n}\ncomputed:{\n    let filtedTeacher = [];\n    let inputName = this.teaName\n    if(!inputName || !inputName.length) {\n        return this.teachers //把原数组返回\n    }else{\n        for(var teacher of this.teachers) {\n            if(teacher.name.indexOf(inputName) !== -1) {\n                filtedTeacher.push(teacher)\n            }\n        }\n    }\n\n}\n```","slug":"显示下拉","published":1,"updated":"2021-07-01T07:30:54.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wunr005szgsymadzxqck","content":"<p>今日工作需求，写了一个既可以上传输入又可以下拉列表的输入框<br>总结下这个功能的实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;input type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">                 id=<span class=\"string\">\"selectId\"</span></span><br><span class=\"line\">                 placeholder=<span class=\"string\">\"Select Teacher\"</span></span><br><span class=\"line\">                 v-model=<span class=\"string\">\"teaName\"</span></span><br><span class=\"line\">                 value=<span class=\"string\">\"\"</span></span><br><span class=\"line\">                 @click=<span class=\"string\">\"selectTeacher\"</span></span><br><span class=\"line\">                 <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"form-control pr\"</span>&gt;</span><br><span class=\"line\">                 &lt;img src=<span class=\"string\">\"/static/image/course-back.png\"</span></span><br><span class=\"line\">                 <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"course-select-img\"</span> </span><br><span class=\"line\">                 :<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;'course-select-img-transform':teaSelect&#125;\"</span>&gt;</span><br><span class=\"line\"> &lt;--下拉列表--&gt;</span><br><span class=\"line\">          &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"course-select \"</span> </span><br><span class=\"line\">               v-show=<span class=\"string\">\"teaSelect\"</span>&gt;</span><br><span class=\"line\">          &lt;ul&gt;</span><br><span class=\"line\">          &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(item,index) in filtedTeacher\"</span></span><br><span class=\"line\">              @click=<span class=\"string\">\"selectOption(item)\"</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/u</span>l&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        </span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/省略列表显示部分，着重记录下输入匹配的方法</span></span><br><span class=\"line\"><span class=\"regexp\">data() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        teachers:[] /</span><span class=\"regexp\">/接收后台传来的对象</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">computed:&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    let filtedTeacher = [];</span></span><br><span class=\"line\"><span class=\"regexp\">    let inputName = this.teaName</span></span><br><span class=\"line\"><span class=\"regexp\">    if(!inputName || !inputName.length) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        return this.teachers /</span><span class=\"regexp\">/把原数组返回</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        for(var teacher of this.teachers) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            if(teacher.name.indexOf(inputName) !== -1) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                filtedTeacher.push(teacher)</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>今日工作需求，写了一个既可以上传输入又可以下拉列表的输入框<br>总结下这个功能的实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;input type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">                 id=<span class=\"string\">\"selectId\"</span></span><br><span class=\"line\">                 placeholder=<span class=\"string\">\"Select Teacher\"</span></span><br><span class=\"line\">                 v-model=<span class=\"string\">\"teaName\"</span></span><br><span class=\"line\">                 value=<span class=\"string\">\"\"</span></span><br><span class=\"line\">                 @click=<span class=\"string\">\"selectTeacher\"</span></span><br><span class=\"line\">                 <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"form-control pr\"</span>&gt;</span><br><span class=\"line\">                 &lt;img src=<span class=\"string\">\"/static/image/course-back.png\"</span></span><br><span class=\"line\">                 <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"course-select-img\"</span> </span><br><span class=\"line\">                 :<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;'course-select-img-transform':teaSelect&#125;\"</span>&gt;</span><br><span class=\"line\"> &lt;--下拉列表--&gt;</span><br><span class=\"line\">          &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"course-select \"</span> </span><br><span class=\"line\">               v-show=<span class=\"string\">\"teaSelect\"</span>&gt;</span><br><span class=\"line\">          &lt;ul&gt;</span><br><span class=\"line\">          &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(item,index) in filtedTeacher\"</span></span><br><span class=\"line\">              @click=<span class=\"string\">\"selectOption(item)\"</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;/u</span>l&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        </span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/省略列表显示部分，着重记录下输入匹配的方法</span></span><br><span class=\"line\"><span class=\"regexp\">data() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        teachers:[] /</span><span class=\"regexp\">/接收后台传来的对象</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">computed:&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    let filtedTeacher = [];</span></span><br><span class=\"line\"><span class=\"regexp\">    let inputName = this.teaName</span></span><br><span class=\"line\"><span class=\"regexp\">    if(!inputName || !inputName.length) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        return this.teachers /</span><span class=\"regexp\">/把原数组返回</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        for(var teacher of this.teachers) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            if(teacher.name.indexOf(inputName) !== -1) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                filtedTeacher.push(teacher)</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"异步回调处理","date":"2015-06-30T02:39:40.000Z","_content":"<blockquote class=\"blockquote-center\">\n是否和我一样犯过同样的错误？\n</blockquote>\n\n<!-- more -->\n\n之前异步回调总是出现问题，先上一段错误的代码\n```javascript\ncallbacking = false\nif(!this.callbacking) {\n    this.callbacking = true\n    this.callback()\n    this.callbacking = false\n}\n```\n这段代码会走`this.callbacking = false`但是没有意义，如果callback是同步的，这个if在callback执行期间不再会走第二次，如果是异步的，这样写是不对的。我的callback是异步的。。所以这样写的效果是这样的\n```javascript\nthis.callbacking = true\nthis.callback() //发起异步请求后callback函数结束（请求未完成）\nthis.callbacking = false\n```\n也就是说，callbacking在异步请求没有结束的时候就已经回归到false了，无法起到想要的作用。应该这样写：\n```javascript\nthis.callbacking = true\nthis.callback(()=>{\n    this.callbacking = false\n})\n```\ncallback接受的函数需要在异步完成后执行。这样才能保证指定代码在异步操作完成后才执行，比如说在`this.callbacking = true`上锁后，是希望在异步操作结束后才解锁。\n\n或者使用promise，在.then().then解决","source":"_posts/异步回调.md","raw":"---\ntitle: 异步回调处理\ncategories: js\ndate: 2015-06-30 10:39:40\ntags: [编程,学习]\n---\n<blockquote class=\"blockquote-center\">\n是否和我一样犯过同样的错误？\n</blockquote>\n\n<!-- more -->\n\n之前异步回调总是出现问题，先上一段错误的代码\n```javascript\ncallbacking = false\nif(!this.callbacking) {\n    this.callbacking = true\n    this.callback()\n    this.callbacking = false\n}\n```\n这段代码会走`this.callbacking = false`但是没有意义，如果callback是同步的，这个if在callback执行期间不再会走第二次，如果是异步的，这样写是不对的。我的callback是异步的。。所以这样写的效果是这样的\n```javascript\nthis.callbacking = true\nthis.callback() //发起异步请求后callback函数结束（请求未完成）\nthis.callbacking = false\n```\n也就是说，callbacking在异步请求没有结束的时候就已经回归到false了，无法起到想要的作用。应该这样写：\n```javascript\nthis.callbacking = true\nthis.callback(()=>{\n    this.callbacking = false\n})\n```\ncallback接受的函数需要在异步完成后执行。这样才能保证指定代码在异步操作完成后才执行，比如说在`this.callbacking = true`上锁后，是希望在异步操作结束后才解锁。\n\n或者使用promise，在.then().then解决","slug":"异步回调","published":1,"updated":"2021-07-05T02:41:50.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wunt005vzgsyyhbbp8ip","content":"<blockquote class=\"blockquote-center\"><br>是否和我一样犯过同样的错误？<br></blockquote>\n\n<a id=\"more\"></a>\n<p>之前异步回调总是出现问题，先上一段错误的代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callbacking = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.callbacking) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacking = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callback()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacking = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码会走<code>this.callbacking = false</code>但是没有意义，如果callback是同步的，这个if在callback执行期间不再会走第二次，如果是异步的，这样写是不对的。我的callback是异步的。。所以这样写的效果是这样的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.callbacking = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.callback() <span class=\"comment\">//发起异步请求后callback函数结束（请求未完成）</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.callbacking = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<p>也就是说，callbacking在异步请求没有结束的时候就已经回归到false了，无法起到想要的作用。应该这样写：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.callbacking = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.callback(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacking = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>callback接受的函数需要在异步完成后执行。这样才能保证指定代码在异步操作完成后才执行，比如说在<code>this.callbacking = true</code>上锁后，是希望在异步操作结束后才解锁。</p>\n<p>或者使用promise，在.then().then解决</p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"<blockquote class=\"blockquote-center\"><br>是否和我一样犯过同样的错误？<br></blockquote>","more":"<p>之前异步回调总是出现问题，先上一段错误的代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callbacking = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.callbacking) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacking = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callback()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacking = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码会走<code>this.callbacking = false</code>但是没有意义，如果callback是同步的，这个if在callback执行期间不再会走第二次，如果是异步的，这样写是不对的。我的callback是异步的。。所以这样写的效果是这样的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.callbacking = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.callback() <span class=\"comment\">//发起异步请求后callback函数结束（请求未完成）</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.callbacking = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<p>也就是说，callbacking在异步请求没有结束的时候就已经回归到false了，无法起到想要的作用。应该这样写：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.callbacking = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.callback(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacking = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>callback接受的函数需要在异步完成后执行。这样才能保证指定代码在异步操作完成后才执行，比如说在<code>this.callbacking = true</code>上锁后，是希望在异步操作结束后才解锁。</p>\n<p>或者使用promise，在.then().then解决</p>"},{"title":"截取字符串","date":"2015-05-24T02:39:40.000Z","_content":"<blockquote class=\"blockquote-center\">\n截取字符串最粗暴的方法是什么呢？\n</blockquote>\n\n<!-- more -->\n\n今日解析YouTube视频，采用了YouTube的iframe。\n其中有一坑是YouTube不允许输入第三方链接，也就是不解析，解决的办法就是\n`http://www.youtube.com/embed/VIDEO_ID`\n- 例如：\n`https://www.youtube.com/watch?v=78tNYZUS-ps`\n改为：\n`http://www.youtube.com/embed/78tNYZUS-ps`\n\n- 为了判断输入的URL是否是一个有效的，我们采取了后台解析id的办法，返回title。\n那么我就需要将用户输入的链接进行截取。试了好几种办法，虽然都能实现，但是觉得麻烦，最终选择了，split()方法，他可以将一个字符串分割成字符串数组。\n```\nlet url = 'https://www.youtube.com/watch?v=78tNYZUS-ps';\nlet front = url.split('=')[0]\nlet end = url.split('=')[1]\nconsole.log(front,end) //https://www.youtube.com/watch?v 78tNYZUS-ps\n```\n\n","source":"_posts/截取字符串.md","raw":"---\ntitle: 截取字符串\ncategories: js\ndate: 2015-05-24 10:39:40\ntags: [编程,学习]\n---\n<blockquote class=\"blockquote-center\">\n截取字符串最粗暴的方法是什么呢？\n</blockquote>\n\n<!-- more -->\n\n今日解析YouTube视频，采用了YouTube的iframe。\n其中有一坑是YouTube不允许输入第三方链接，也就是不解析，解决的办法就是\n`http://www.youtube.com/embed/VIDEO_ID`\n- 例如：\n`https://www.youtube.com/watch?v=78tNYZUS-ps`\n改为：\n`http://www.youtube.com/embed/78tNYZUS-ps`\n\n- 为了判断输入的URL是否是一个有效的，我们采取了后台解析id的办法，返回title。\n那么我就需要将用户输入的链接进行截取。试了好几种办法，虽然都能实现，但是觉得麻烦，最终选择了，split()方法，他可以将一个字符串分割成字符串数组。\n```\nlet url = 'https://www.youtube.com/watch?v=78tNYZUS-ps';\nlet front = url.split('=')[0]\nlet end = url.split('=')[1]\nconsole.log(front,end) //https://www.youtube.com/watch?v 78tNYZUS-ps\n```\n\n","slug":"截取字符串","published":1,"updated":"2021-07-05T02:43:36.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wunu005yzgsy56iwi7er","content":"<blockquote class=\"blockquote-center\"><br>截取字符串最粗暴的方法是什么呢？<br></blockquote>\n\n<a id=\"more\"></a>\n<p>今日解析YouTube视频，采用了YouTube的iframe。<br>其中有一坑是YouTube不允许输入第三方链接，也就是不解析，解决的办法就是<br><code>http://www.youtube.com/embed/VIDEO_ID</code></p>\n<ul>\n<li><p>例如：<br><code>https://www.youtube.com/watch?v=78tNYZUS-ps</code><br>改为：<br><code>http://www.youtube.com/embed/78tNYZUS-ps</code></p>\n</li>\n<li><p>为了判断输入的URL是否是一个有效的，我们采取了后台解析id的办法，返回title。<br>那么我就需要将用户输入的链接进行截取。试了好几种办法，虽然都能实现，但是觉得麻烦，最终选择了，split()方法，他可以将一个字符串分割成字符串数组。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">url</span> = <span class=\"string\">'https://www.youtube.com/watch?v=78tNYZUS-ps'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> front = <span class=\"built_in\">url</span>.split(<span class=\"string\">'='</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> end = <span class=\"built_in\">url</span>.split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(front,end) <span class=\"comment\">//https://www.youtube.com/watch?v 78tNYZUS-ps</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"<blockquote class=\"blockquote-center\"><br>截取字符串最粗暴的方法是什么呢？<br></blockquote>","more":"<p>今日解析YouTube视频，采用了YouTube的iframe。<br>其中有一坑是YouTube不允许输入第三方链接，也就是不解析，解决的办法就是<br><code>http://www.youtube.com/embed/VIDEO_ID</code></p>\n<ul>\n<li><p>例如：<br><code>https://www.youtube.com/watch?v=78tNYZUS-ps</code><br>改为：<br><code>http://www.youtube.com/embed/78tNYZUS-ps</code></p>\n</li>\n<li><p>为了判断输入的URL是否是一个有效的，我们采取了后台解析id的办法，返回title。<br>那么我就需要将用户输入的链接进行截取。试了好几种办法，虽然都能实现，但是觉得麻烦，最终选择了，split()方法，他可以将一个字符串分割成字符串数组。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">url</span> = <span class=\"string\">'https://www.youtube.com/watch?v=78tNYZUS-ps'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> front = <span class=\"built_in\">url</span>.split(<span class=\"string\">'='</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> end = <span class=\"built_in\">url</span>.split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(front,end) <span class=\"comment\">//https://www.youtube.com/watch?v 78tNYZUS-ps</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"富文本-select改进","date":"2018-04-19T07:33:03.000Z","_content":"之前在项目中，做了一个富文本编辑器，第一次用的是原生js实现，第二次用vue实现功能，在select里面定义可以选择字体的大小，当时采取的是@input去实现，无聊时读了下vue文档，发现其实。。是可以改进的，比如说v-model是一个语法糖，文档是这样说的：\n- 自定义事件也可以用于创建支持 v-model 的自定义输入组件\n`input v-nodel=searchText`\n等价于：\n```\n<input v-bind:value='searchText' v-on:input='$event.target.value'>\n```\n而我当时的实现就有一些复杂\n```javascript\n <select name=\"fontSize\" class=\"fontSize\" @change=\"showSize($event)\">\n    <option :value=\"ops.value\"\n            v-for=\"ops in fontSize\"\n            :selected=\"ops.value == 16 ? true: '' \">{{ops.value}}</option>\n </select>\n\nshowSize: function (ev) {\n    var execFontSize = function (size, unit) {\n    var spanString = $('<span/>', {\n        'text': document.getSelection()\n    }).css(\n        {'font-size': size + unit, 'color': `#${this.designColor}`}).prop('outerHTML');\n    document.execCommand('insertHTML', false, spanString);\n    };\n    const value = ev.target.value;\n    execFontSize(value, 'px')\n\n}\n```\n嗯嗯，改起来~~","source":"_posts/改进-select.md","raw":"---\ntitle: 富文本-select改进\ndate: 2018-04-19 15:33:03\ncategories: vue\ntags: [编程,功能]\n---\n之前在项目中，做了一个富文本编辑器，第一次用的是原生js实现，第二次用vue实现功能，在select里面定义可以选择字体的大小，当时采取的是@input去实现，无聊时读了下vue文档，发现其实。。是可以改进的，比如说v-model是一个语法糖，文档是这样说的：\n- 自定义事件也可以用于创建支持 v-model 的自定义输入组件\n`input v-nodel=searchText`\n等价于：\n```\n<input v-bind:value='searchText' v-on:input='$event.target.value'>\n```\n而我当时的实现就有一些复杂\n```javascript\n <select name=\"fontSize\" class=\"fontSize\" @change=\"showSize($event)\">\n    <option :value=\"ops.value\"\n            v-for=\"ops in fontSize\"\n            :selected=\"ops.value == 16 ? true: '' \">{{ops.value}}</option>\n </select>\n\nshowSize: function (ev) {\n    var execFontSize = function (size, unit) {\n    var spanString = $('<span/>', {\n        'text': document.getSelection()\n    }).css(\n        {'font-size': size + unit, 'color': `#${this.designColor}`}).prop('outerHTML');\n    document.execCommand('insertHTML', false, spanString);\n    };\n    const value = ev.target.value;\n    execFontSize(value, 'px')\n\n}\n```\n嗯嗯，改起来~~","slug":"改进-select","published":1,"updated":"2021-07-02T11:29:29.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wunw0061zgsy2hz5gh50","content":"<p>之前在项目中，做了一个富文本编辑器，第一次用的是原生js实现，第二次用vue实现功能，在select里面定义可以选择字体的大小，当时采取的是@input去实现，无聊时读了下vue文档，发现其实。。是可以改进的，比如说v-model是一个语法糖，文档是这样说的：</p>\n<ul>\n<li>自定义事件也可以用于创建支持 v-model 的自定义输入组件<br><code>input v-nodel=searchText</code><br>等价于：<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">input</span> v-bind:value=<span class=\"string\">'searchText'</span> v-<span class=\"keyword\">on</span>:<span class=\"keyword\">input</span>=<span class=\"string\">'$event.target.value'</span>&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>而我当时的实现就有一些复杂<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;select name=<span class=\"string\">\"fontSize\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"fontSize\"</span> @change=<span class=\"string\">\"showSize($event)\"</span>&gt;</span><br><span class=\"line\">    &lt;option :value=<span class=\"string\">\"ops.value\"</span></span><br><span class=\"line\">            v-<span class=\"keyword\">for</span>=<span class=\"string\">\"ops in fontSize\"</span></span><br><span class=\"line\">            :selected=<span class=\"string\">\"ops.value == 16 ? true: '' \"</span>&gt;&#123;&#123;ops.value&#125;&#125;&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> &lt;/</span>select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">showSize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> execFontSize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">size, unit</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> spanString = $(<span class=\"string\">'&lt;span/&gt;'</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">'text'</span>: <span class=\"built_in\">document</span>.getSelection()</span><br><span class=\"line\">    &#125;).css(</span><br><span class=\"line\">        &#123;<span class=\"string\">'font-size'</span>: size + unit, <span class=\"string\">'color'</span>: <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.designColor&#125;</span>`</span>&#125;).prop(<span class=\"string\">'outerHTML'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.execCommand(<span class=\"string\">'insertHTML'</span>, <span class=\"literal\">false</span>, spanString);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = ev.target.value;</span><br><span class=\"line\">    execFontSize(value, <span class=\"string\">'px'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>嗯嗯，改起来~~</p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>之前在项目中，做了一个富文本编辑器，第一次用的是原生js实现，第二次用vue实现功能，在select里面定义可以选择字体的大小，当时采取的是@input去实现，无聊时读了下vue文档，发现其实。。是可以改进的，比如说v-model是一个语法糖，文档是这样说的：</p>\n<ul>\n<li>自定义事件也可以用于创建支持 v-model 的自定义输入组件<br><code>input v-nodel=searchText</code><br>等价于：<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">input</span> v-bind:value=<span class=\"string\">'searchText'</span> v-<span class=\"keyword\">on</span>:<span class=\"keyword\">input</span>=<span class=\"string\">'$event.target.value'</span>&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>而我当时的实现就有一些复杂<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;select name=<span class=\"string\">\"fontSize\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"fontSize\"</span> @change=<span class=\"string\">\"showSize($event)\"</span>&gt;</span><br><span class=\"line\">    &lt;option :value=<span class=\"string\">\"ops.value\"</span></span><br><span class=\"line\">            v-<span class=\"keyword\">for</span>=<span class=\"string\">\"ops in fontSize\"</span></span><br><span class=\"line\">            :selected=<span class=\"string\">\"ops.value == 16 ? true: '' \"</span>&gt;&#123;&#123;ops.value&#125;&#125;&lt;<span class=\"regexp\">/option&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> &lt;/</span>select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">showSize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> execFontSize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">size, unit</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> spanString = $(<span class=\"string\">'&lt;span/&gt;'</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">'text'</span>: <span class=\"built_in\">document</span>.getSelection()</span><br><span class=\"line\">    &#125;).css(</span><br><span class=\"line\">        &#123;<span class=\"string\">'font-size'</span>: size + unit, <span class=\"string\">'color'</span>: <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.designColor&#125;</span>`</span>&#125;).prop(<span class=\"string\">'outerHTML'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.execCommand(<span class=\"string\">'insertHTML'</span>, <span class=\"literal\">false</span>, spanString);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = ev.target.value;</span><br><span class=\"line\">    execFontSize(value, <span class=\"string\">'px'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>嗯嗯，改起来~~</p>\n"},{"title":"点击空白区域关闭下拉框(vue3)","date":"2021-07-06T10:06:40.000Z","_content":"\n<blockquote class=\"blockquote-center\">\n开发中是否也遇到过这种需求？\n</blockquote>\n\n<!-- more -->\n\n- 在 mounted 时候添加 click 事件，在 unmounted 的时候将事件删除\n- 拿到组件的 DOM 元素从而判断，点击的内容是否被这个元素包围\n\n```vue\n<!--普通版-->\n<template>\n  <div class=\"dropdown\" ref=\"dropdownRef\">\n    <a href=\"#\" class=\"btn btn-outline-light my-2 dropdown-toggle\" @click.prevent=\"toggleOpen\">{{ title }} </a>\n    <ul class=\"dropdown-menu\" :style=\"{display:'block'}\" v-if=\"isOpen\">\n      <slot></slot>\n    </ul>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {defineComponent, onMounted, onUnmounted, ref} from \"vue\";\n\nexport default defineComponent({\n  name: \"dropdown\",\n  props: {\n    title: {\n      type: String,\n      require: true\n    }\n  },\n  setup() {\n    const isOpen = ref(false)\n    const dropdownRef = ref<null | HTMLElement>(null)\n    const toggleOpen = () => {\n      isOpen.value = !isOpen.value\n    }\n    const handler = (e: MouseEvent) => {\n      if (dropdownRef.value) {\n        if (!dropdownRef.value.contains(e.target as HTMLElement) && isOpen.value == true) {\n          isOpen.value = false\n        }\n      }\n    }\n    onMounted(() => {\n      document.addEventListener('click', handler)\n    })\n    onUnmounted(() => {\n      document.removeEventListener('click', handler)\n    })\n    return {\n      isOpen,\n      toggleOpen,\n      dropdownRef\n    }\n  }\n})\n</script>\n\n<style scoped>\n\n</style>\n```\n```ts\n//自定义函数版本\n//useClickOutside.ts\nimport {onMounted, onUnmounted, ref, Ref} from \"vue\";\n\nconst useClickOutside = (elementRef: Ref<null | HTMLElement>) => {\n    const isClickOutside = ref(false)\n    const handler = (e: MouseEvent) => {\n        if (elementRef.value) {\n            if (elementRef.value.contains(e.target as HTMLElement)) {\n                isClickOutside.value = false\n            } else {\n                isClickOutside.value = true\n            }\n        }\n\n    }\n    onMounted(() => {\n        document.addEventListener('click', handler)\n    })\n    onUnmounted(() => {\n        document.removeEventListener('click', handler)\n    })\n    return isClickOutside\n}\nexport default useClickOutside\n\n```\n```js\nimport useClickOutside from \"@/hooks/useClickOutside\";\n\nconst isClickOutside = useClickOutside(dropdownRef)\n\nwatch(isClickOutside, () => {\nif (isOpen.value && isClickOutside.value) {\nisOpen.value = false\n}\n})\nreturn {\nisClickOutside\n}\n```\n","source":"_posts/点击空白区域关闭下拉框.md","raw":"---\ntitle: 点击空白区域关闭下拉框(vue3)\ndate: 2021-07-06 18:06:40 \ntags: [编程,学习]\n---\n\n<blockquote class=\"blockquote-center\">\n开发中是否也遇到过这种需求？\n</blockquote>\n\n<!-- more -->\n\n- 在 mounted 时候添加 click 事件，在 unmounted 的时候将事件删除\n- 拿到组件的 DOM 元素从而判断，点击的内容是否被这个元素包围\n\n```vue\n<!--普通版-->\n<template>\n  <div class=\"dropdown\" ref=\"dropdownRef\">\n    <a href=\"#\" class=\"btn btn-outline-light my-2 dropdown-toggle\" @click.prevent=\"toggleOpen\">{{ title }} </a>\n    <ul class=\"dropdown-menu\" :style=\"{display:'block'}\" v-if=\"isOpen\">\n      <slot></slot>\n    </ul>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {defineComponent, onMounted, onUnmounted, ref} from \"vue\";\n\nexport default defineComponent({\n  name: \"dropdown\",\n  props: {\n    title: {\n      type: String,\n      require: true\n    }\n  },\n  setup() {\n    const isOpen = ref(false)\n    const dropdownRef = ref<null | HTMLElement>(null)\n    const toggleOpen = () => {\n      isOpen.value = !isOpen.value\n    }\n    const handler = (e: MouseEvent) => {\n      if (dropdownRef.value) {\n        if (!dropdownRef.value.contains(e.target as HTMLElement) && isOpen.value == true) {\n          isOpen.value = false\n        }\n      }\n    }\n    onMounted(() => {\n      document.addEventListener('click', handler)\n    })\n    onUnmounted(() => {\n      document.removeEventListener('click', handler)\n    })\n    return {\n      isOpen,\n      toggleOpen,\n      dropdownRef\n    }\n  }\n})\n</script>\n\n<style scoped>\n\n</style>\n```\n```ts\n//自定义函数版本\n//useClickOutside.ts\nimport {onMounted, onUnmounted, ref, Ref} from \"vue\";\n\nconst useClickOutside = (elementRef: Ref<null | HTMLElement>) => {\n    const isClickOutside = ref(false)\n    const handler = (e: MouseEvent) => {\n        if (elementRef.value) {\n            if (elementRef.value.contains(e.target as HTMLElement)) {\n                isClickOutside.value = false\n            } else {\n                isClickOutside.value = true\n            }\n        }\n\n    }\n    onMounted(() => {\n        document.addEventListener('click', handler)\n    })\n    onUnmounted(() => {\n        document.removeEventListener('click', handler)\n    })\n    return isClickOutside\n}\nexport default useClickOutside\n\n```\n```js\nimport useClickOutside from \"@/hooks/useClickOutside\";\n\nconst isClickOutside = useClickOutside(dropdownRef)\n\nwatch(isClickOutside, () => {\nif (isOpen.value && isClickOutside.value) {\nisOpen.value = false\n}\n})\nreturn {\nisClickOutside\n}\n```\n","slug":"点击空白区域关闭下拉框","published":1,"updated":"2021-07-06T10:33:43.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuny0064zgsypdera9tm","content":"<blockquote class=\"blockquote-center\"><br>开发中是否也遇到过这种需求？<br></blockquote>\n\n<a id=\"more\"></a>\n<ul>\n<li>在 mounted 时候添加 click 事件，在 unmounted 的时候将事件删除</li>\n<li>拿到组件的 DOM 元素从而判断，点击的内容是否被这个元素包围</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--普通版--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;dropdown&quot; ref=&quot;dropdownRef&quot;&gt;</span><br><span class=\"line\">    &lt;a href=&quot;#&quot; class=&quot;btn btn-outline-light my-2 dropdown-toggle&quot; @click.prevent=&quot;toggleOpen&quot;&gt;&#123;&#123; title &#125;&#125; &lt;/a&gt;</span><br><span class=\"line\">    &lt;ul class=&quot;dropdown-menu&quot; :style=&quot;&#123;display:&apos;block&apos;&#125;&quot; v-if=&quot;isOpen&quot;&gt;</span><br><span class=\"line\">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123;defineComponent, onMounted, onUnmounted, ref&#125; from &quot;vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default defineComponent(&#123;</span><br><span class=\"line\">  name: &quot;dropdown&quot;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    title: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      require: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setup() &#123;</span><br><span class=\"line\">    const isOpen = ref(false)</span><br><span class=\"line\">    const dropdownRef = ref&lt;null | HTMLElement&gt;(null)</span><br><span class=\"line\">    const toggleOpen = () =&gt; &#123;</span><br><span class=\"line\">      isOpen.value = !isOpen.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const handler = (e: MouseEvent) =&gt; &#123;</span><br><span class=\"line\">      if (dropdownRef.value) &#123;</span><br><span class=\"line\">        if (!dropdownRef.value.contains(e.target as HTMLElement) &amp;&amp; isOpen.value == true) &#123;</span><br><span class=\"line\">          isOpen.value = false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    onMounted(() =&gt; &#123;</span><br><span class=\"line\">      document.addEventListener(&apos;click&apos;, handler)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    onUnmounted(() =&gt; &#123;</span><br><span class=\"line\">      document.removeEventListener(&apos;click&apos;, handler)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      isOpen,</span><br><span class=\"line\">      toggleOpen,</span><br><span class=\"line\">      dropdownRef</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自定义函数版本</span></span><br><span class=\"line\"><span class=\"comment\">//useClickOutside.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;onMounted, onUnmounted, ref, Ref&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> useClickOutside = <span class=\"function\">(<span class=\"params\">elementRef: Ref&lt;<span class=\"literal\">null</span> | HTMLElement&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isClickOutside = ref(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = <span class=\"function\">(<span class=\"params\">e: MouseEvent</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementRef.value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (elementRef.value.contains(e.target <span class=\"keyword\">as</span> HTMLElement)) &#123;</span><br><span class=\"line\">                isClickOutside.value = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                isClickOutside.value = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    onMounted(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'click'</span>, handler)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    onUnmounted(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">'click'</span>, handler)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isClickOutside</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> useClickOutside</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> useClickOutside <span class=\"keyword\">from</span> <span class=\"string\">\"@/hooks/useClickOutside\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isClickOutside = useClickOutside(dropdownRef)</span><br><span class=\"line\"></span><br><span class=\"line\">watch(isClickOutside, () =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isOpen.value &amp;&amp; isClickOutside.value) &#123;</span><br><span class=\"line\">isOpen.value = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">isClickOutside</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"<blockquote class=\"blockquote-center\"><br>开发中是否也遇到过这种需求？<br></blockquote>","more":"<ul>\n<li>在 mounted 时候添加 click 事件，在 unmounted 的时候将事件删除</li>\n<li>拿到组件的 DOM 元素从而判断，点击的内容是否被这个元素包围</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--普通版--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;dropdown&quot; ref=&quot;dropdownRef&quot;&gt;</span><br><span class=\"line\">    &lt;a href=&quot;#&quot; class=&quot;btn btn-outline-light my-2 dropdown-toggle&quot; @click.prevent=&quot;toggleOpen&quot;&gt;&#123;&#123; title &#125;&#125; &lt;/a&gt;</span><br><span class=\"line\">    &lt;ul class=&quot;dropdown-menu&quot; :style=&quot;&#123;display:&apos;block&apos;&#125;&quot; v-if=&quot;isOpen&quot;&gt;</span><br><span class=\"line\">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123;defineComponent, onMounted, onUnmounted, ref&#125; from &quot;vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default defineComponent(&#123;</span><br><span class=\"line\">  name: &quot;dropdown&quot;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    title: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      require: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setup() &#123;</span><br><span class=\"line\">    const isOpen = ref(false)</span><br><span class=\"line\">    const dropdownRef = ref&lt;null | HTMLElement&gt;(null)</span><br><span class=\"line\">    const toggleOpen = () =&gt; &#123;</span><br><span class=\"line\">      isOpen.value = !isOpen.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const handler = (e: MouseEvent) =&gt; &#123;</span><br><span class=\"line\">      if (dropdownRef.value) &#123;</span><br><span class=\"line\">        if (!dropdownRef.value.contains(e.target as HTMLElement) &amp;&amp; isOpen.value == true) &#123;</span><br><span class=\"line\">          isOpen.value = false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    onMounted(() =&gt; &#123;</span><br><span class=\"line\">      document.addEventListener(&apos;click&apos;, handler)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    onUnmounted(() =&gt; &#123;</span><br><span class=\"line\">      document.removeEventListener(&apos;click&apos;, handler)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      isOpen,</span><br><span class=\"line\">      toggleOpen,</span><br><span class=\"line\">      dropdownRef</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自定义函数版本</span></span><br><span class=\"line\"><span class=\"comment\">//useClickOutside.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;onMounted, onUnmounted, ref, Ref&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> useClickOutside = <span class=\"function\">(<span class=\"params\">elementRef: Ref&lt;<span class=\"literal\">null</span> | HTMLElement&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isClickOutside = ref(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = <span class=\"function\">(<span class=\"params\">e: MouseEvent</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementRef.value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (elementRef.value.contains(e.target <span class=\"keyword\">as</span> HTMLElement)) &#123;</span><br><span class=\"line\">                isClickOutside.value = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                isClickOutside.value = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    onMounted(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'click'</span>, handler)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    onUnmounted(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">'click'</span>, handler)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isClickOutside</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> useClickOutside</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> useClickOutside <span class=\"keyword\">from</span> <span class=\"string\">\"@/hooks/useClickOutside\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isClickOutside = useClickOutside(dropdownRef)</span><br><span class=\"line\"></span><br><span class=\"line\">watch(isClickOutside, () =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isOpen.value &amp;&amp; isClickOutside.value) &#123;</span><br><span class=\"line\">isOpen.value = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">isClickOutside</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"ES6系列-类与对象","date":"2021-01-01T07:02:41.000Z","_content":"\n\n```javascript\n// 类与对象\n{\n    class Person {\n        constructor(name = 'yoyo') {\n            this.name = name;\n        }\n    }\n    let v_person = new Person('v')\n    console.log(v_person) //Person {name: \"v\"}\n\n    class Child extends Person {\n        constructor(name = 'child') {\n            //  super()会使用父类的所有\n            super(name)\n            this.type = 'dog'\n\n        }\n    }\n    console.log(new Child()) //Child {name: \"child\", type: \"dog\"}\n    console.log(new Child('hello')) //Child {name: \"hello\", type: \"dog\"}\n\n}\n// getter,setter\n{\n    class Person {\n        constructor(name = 'yoy') {\n            this.name = name\n        }\n        get longName() {\n            return this.name + '读取属性'\n        }\n        set longName(value) {\n            this.name = value\n        }\n    }\n    let v = new Person()\n    console.log(v.longName, 'getter')//yoy读取属性 getter\n    v.longName = 'hello'\n    console.log(v.longName) //hello读取属性\n    let vs = new Person('lele')\n    console.log(vs.longName, 'setter') //lele读取属性 setter\n\n\n}\n\n\n{\n    // 静态方法，不是使用类的实例去调用\n    class Person {\n        constructor(name = 'yoyo') {\n            this.name = name\n        }\n        static tail() {\n            console.log('this is tail')\n        }\n    }\n    Person.tail()\n}\n\n{\n    // 静态属性 ===> 直接在类上定义\n    class Person {\n        constructor(name = 'uouo') {\n            this.name = name\n        }\n        static tail() {\n            console.log('this is tail')\n        }\n    }\n    Person.numberId = 23333\n    console.log(Person.numberId) //2333\n\n}\n\n\n\n```","source":"_posts/类与对象.md","raw":"---\ntitle: ES6系列-类与对象\ncategories: js\ndate: 2021-01-01 15:02:41\ntags: [编程,学习]\n---\n\n\n```javascript\n// 类与对象\n{\n    class Person {\n        constructor(name = 'yoyo') {\n            this.name = name;\n        }\n    }\n    let v_person = new Person('v')\n    console.log(v_person) //Person {name: \"v\"}\n\n    class Child extends Person {\n        constructor(name = 'child') {\n            //  super()会使用父类的所有\n            super(name)\n            this.type = 'dog'\n\n        }\n    }\n    console.log(new Child()) //Child {name: \"child\", type: \"dog\"}\n    console.log(new Child('hello')) //Child {name: \"hello\", type: \"dog\"}\n\n}\n// getter,setter\n{\n    class Person {\n        constructor(name = 'yoy') {\n            this.name = name\n        }\n        get longName() {\n            return this.name + '读取属性'\n        }\n        set longName(value) {\n            this.name = value\n        }\n    }\n    let v = new Person()\n    console.log(v.longName, 'getter')//yoy读取属性 getter\n    v.longName = 'hello'\n    console.log(v.longName) //hello读取属性\n    let vs = new Person('lele')\n    console.log(vs.longName, 'setter') //lele读取属性 setter\n\n\n}\n\n\n{\n    // 静态方法，不是使用类的实例去调用\n    class Person {\n        constructor(name = 'yoyo') {\n            this.name = name\n        }\n        static tail() {\n            console.log('this is tail')\n        }\n    }\n    Person.tail()\n}\n\n{\n    // 静态属性 ===> 直接在类上定义\n    class Person {\n        constructor(name = 'uouo') {\n            this.name = name\n        }\n        static tail() {\n            console.log('this is tail')\n        }\n    }\n    Person.numberId = 23333\n    console.log(Person.numberId) //2333\n\n}\n\n\n\n```","slug":"类与对象","published":1,"updated":"2021-07-01T08:03:43.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuo00067zgsy5sdj03mk","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类与对象</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(name = 'yoyo') &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> v_person = <span class=\"keyword\">new</span> Person(<span class=\"string\">'v'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v_person) <span class=\"comment\">//Person &#123;name: \"v\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(name = 'child') &#123;</span><br><span class=\"line\">            <span class=\"comment\">//  super()会使用父类的所有</span></span><br><span class=\"line\">            <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.type = <span class=\"string\">'dog'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child()) <span class=\"comment\">//Child &#123;name: \"child\", type: \"dog\"&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child(<span class=\"string\">'hello'</span>)) <span class=\"comment\">//Child &#123;name: \"hello\", type: \"dog\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// getter,setter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(name = 'yoy') &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        get longName() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">'读取属性'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set longName(value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> v = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v.longName, <span class=\"string\">'getter'</span>)<span class=\"comment\">//yoy读取属性 getter</span></span><br><span class=\"line\">    v.longName = <span class=\"string\">'hello'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v.longName) <span class=\"comment\">//hello读取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> vs = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lele'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(vs.longName, <span class=\"string\">'setter'</span>) <span class=\"comment\">//lele读取属性 setter</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 静态方法，不是使用类的实例去调用</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(name = 'yoyo') &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> tail() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is tail'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person.tail()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 静态属性 ===&gt; 直接在类上定义</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(name = 'uouo') &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> tail() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is tail'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person.numberId = <span class=\"number\">23333</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Person.numberId) <span class=\"comment\">//2333</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类与对象</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(name = 'yoyo') &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> v_person = <span class=\"keyword\">new</span> Person(<span class=\"string\">'v'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v_person) <span class=\"comment\">//Person &#123;name: \"v\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(name = 'child') &#123;</span><br><span class=\"line\">            <span class=\"comment\">//  super()会使用父类的所有</span></span><br><span class=\"line\">            <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.type = <span class=\"string\">'dog'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child()) <span class=\"comment\">//Child &#123;name: \"child\", type: \"dog\"&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child(<span class=\"string\">'hello'</span>)) <span class=\"comment\">//Child &#123;name: \"hello\", type: \"dog\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// getter,setter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(name = 'yoy') &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        get longName() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">'读取属性'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set longName(value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> v = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v.longName, <span class=\"string\">'getter'</span>)<span class=\"comment\">//yoy读取属性 getter</span></span><br><span class=\"line\">    v.longName = <span class=\"string\">'hello'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v.longName) <span class=\"comment\">//hello读取属性</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> vs = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lele'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(vs.longName, <span class=\"string\">'setter'</span>) <span class=\"comment\">//lele读取属性 setter</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 静态方法，不是使用类的实例去调用</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(name = 'yoyo') &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> tail() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is tail'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person.tail()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 静态属性 ===&gt; 直接在类上定义</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">constructor</span>(name = 'uouo') &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> tail() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is tail'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person.numberId = <span class=\"number\">23333</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Person.numberId) <span class=\"comment\">//2333</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"表单验证，滚动到错误位置","date":"2017-03-02T16:00:00.000Z","copyright":true,"_content":"今日有个需求是，表单验证的时候，不弹toast，而是滚动到错误位置，公司代码实现就不写了，记录下自己写的demo。\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n        \n        div {\n            height: 1500px;\n        }\n        \n        button {\n            width: 100px;\n            height: 50px;\n            line-height: 50px;\n            background-color: rgb(0, 195, 255);\n            color: #fff;\n        }\n    </style>\n</head>\n\n<body>\n    <label for=\"\">请输入</label>\n    <input type=\"text\" id=\"check\">\n    <p id=\"tips\" style=\"color:red;\">输入有误哟</p>\n    <div></div>\n    <button>确认</button>\n    <script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.js\"></script>\n    <script>\n        //jquery\n        $('#tips').hide()\n            //获取某个元素距离文档区域的距离\n        function move(id) {\n            var currentScroll = $('#' + id).offset().top\n            $('html,body').animate({\n                scrollTop: currentScroll\n            })\n        }\n\n        $('button').on('click', function() {\n                if ($('#check' == undefined)) {\n                    $('#tips').show()\n                    move('check')\n                }\n            })\n            //javascript\n        function $(id) {\n            return document.querySelector(id)\n        }\n        $('#tips').style.display = 'none'\n        $('button').onclick = function() {\n            if ($('#check').innerHTML == '') {\n                $('#tips').style.display = 'block'\n                $('html').scrollTop = $('#check').offsetTop;\n            }\n\n        }\n    </script>\n</body>\n\n</html>\n```","source":"_posts/表单验证滚动.md","raw":"---\ntitle: 表单验证，滚动到错误位置\ncategories: js\ndate: 2017-03-03\ntags: [编程,学习]\ncopyright: true\n\n---\n今日有个需求是，表单验证的时候，不弹toast，而是滚动到错误位置，公司代码实现就不写了，记录下自己写的demo。\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n        }\n        \n        div {\n            height: 1500px;\n        }\n        \n        button {\n            width: 100px;\n            height: 50px;\n            line-height: 50px;\n            background-color: rgb(0, 195, 255);\n            color: #fff;\n        }\n    </style>\n</head>\n\n<body>\n    <label for=\"\">请输入</label>\n    <input type=\"text\" id=\"check\">\n    <p id=\"tips\" style=\"color:red;\">输入有误哟</p>\n    <div></div>\n    <button>确认</button>\n    <script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.js\"></script>\n    <script>\n        //jquery\n        $('#tips').hide()\n            //获取某个元素距离文档区域的距离\n        function move(id) {\n            var currentScroll = $('#' + id).offset().top\n            $('html,body').animate({\n                scrollTop: currentScroll\n            })\n        }\n\n        $('button').on('click', function() {\n                if ($('#check' == undefined)) {\n                    $('#tips').show()\n                    move('check')\n                }\n            })\n            //javascript\n        function $(id) {\n            return document.querySelector(id)\n        }\n        $('#tips').style.display = 'none'\n        $('button').onclick = function() {\n            if ($('#check').innerHTML == '') {\n                $('#tips').style.display = 'block'\n                $('html').scrollTop = $('#check').offsetTop;\n            }\n\n        }\n    </script>\n</body>\n\n</html>\n```","slug":"表单验证滚动","published":1,"updated":"2021-07-01T07:30:54.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuo2006azgsy18451js3","content":"<p>今日有个需求是，表单验证的时候，不弹toast，而是滚动到错误位置，公司代码实现就不写了，记录下自己写的demo。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=<span class=\"string\">\"X-UA-Compatible\"</span> content=<span class=\"string\">\"ie=edge\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        * &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            margin: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">            padding: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        </span></span><br><span class=\"line\"><span class=\"regexp\">        div &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            height: 1500px;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        </span></span><br><span class=\"line\"><span class=\"regexp\">        button &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            width: 100px;</span></span><br><span class=\"line\"><span class=\"regexp\">            height: 50px;</span></span><br><span class=\"line\"><span class=\"regexp\">            line-height: 50px;</span></span><br><span class=\"line\"><span class=\"regexp\">            background-color: rgb(0, 195, 255);</span></span><br><span class=\"line\"><span class=\"regexp\">            color: #fff;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>style&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/head&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;label for=\"\"&gt;请输入&lt;/</span>label&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"check\"</span>&gt;</span><br><span class=\"line\">    &lt;p id=<span class=\"string\">\"tips\"</span> style=<span class=\"string\">\"color:red;\"</span>&gt;输入有误哟&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;button&gt;确认&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;script src=\"https:/</span><span class=\"regexp\">/cdn.bootcss.com/</span>jquery/<span class=\"number\">3.3</span><span class=\"number\">.1</span>/jquery.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        //jquery</span></span><br><span class=\"line\"><span class=\"string\">        $('#tips').hide()</span></span><br><span class=\"line\"><span class=\"string\">            //获取某个元素距离文档区域的距离</span></span><br><span class=\"line\"><span class=\"string\">        function move(id) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            var currentScroll = $('#' + id).offset().top</span></span><br><span class=\"line\"><span class=\"string\">            $('html,body').animate(&#123;</span></span><br><span class=\"line\"><span class=\"string\">                scrollTop: currentScroll</span></span><br><span class=\"line\"><span class=\"string\">            &#125;)</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        $('button').on('click', function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">                if ($('#check' == undefined)) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    $('#tips').show()</span></span><br><span class=\"line\"><span class=\"string\">                    move('check')</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;)</span></span><br><span class=\"line\"><span class=\"string\">            //javascript</span></span><br><span class=\"line\"><span class=\"string\">        function $(id) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            return document.querySelector(id)</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        $('#tips').style.display = 'none'</span></span><br><span class=\"line\"><span class=\"string\">        $('button').onclick = function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            if ($('#check').innerHTML == '') &#123;</span></span><br><span class=\"line\"><span class=\"string\">                $('#tips').style.display = 'block'</span></span><br><span class=\"line\"><span class=\"string\">                $('html').scrollTop = $('#check').offsetTop;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>今日有个需求是，表单验证的时候，不弹toast，而是滚动到错误位置，公司代码实现就不写了，记录下自己写的demo。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=<span class=\"string\">\"X-UA-Compatible\"</span> content=<span class=\"string\">\"ie=edge\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        * &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            margin: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">            padding: 0;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        </span></span><br><span class=\"line\"><span class=\"regexp\">        div &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            height: 1500px;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        </span></span><br><span class=\"line\"><span class=\"regexp\">        button &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            width: 100px;</span></span><br><span class=\"line\"><span class=\"regexp\">            height: 50px;</span></span><br><span class=\"line\"><span class=\"regexp\">            line-height: 50px;</span></span><br><span class=\"line\"><span class=\"regexp\">            background-color: rgb(0, 195, 255);</span></span><br><span class=\"line\"><span class=\"regexp\">            color: #fff;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>style&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/head&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;label for=\"\"&gt;请输入&lt;/</span>label&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"check\"</span>&gt;</span><br><span class=\"line\">    &lt;p id=<span class=\"string\">\"tips\"</span> style=<span class=\"string\">\"color:red;\"</span>&gt;输入有误哟&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;button&gt;确认&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;script src=\"https:/</span><span class=\"regexp\">/cdn.bootcss.com/</span>jquery/<span class=\"number\">3.3</span><span class=\"number\">.1</span>/jquery.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        //jquery</span></span><br><span class=\"line\"><span class=\"string\">        $('#tips').hide()</span></span><br><span class=\"line\"><span class=\"string\">            //获取某个元素距离文档区域的距离</span></span><br><span class=\"line\"><span class=\"string\">        function move(id) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            var currentScroll = $('#' + id).offset().top</span></span><br><span class=\"line\"><span class=\"string\">            $('html,body').animate(&#123;</span></span><br><span class=\"line\"><span class=\"string\">                scrollTop: currentScroll</span></span><br><span class=\"line\"><span class=\"string\">            &#125;)</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        $('button').on('click', function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">                if ($('#check' == undefined)) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    $('#tips').show()</span></span><br><span class=\"line\"><span class=\"string\">                    move('check')</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;)</span></span><br><span class=\"line\"><span class=\"string\">            //javascript</span></span><br><span class=\"line\"><span class=\"string\">        function $(id) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            return document.querySelector(id)</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        $('#tips').style.display = 'none'</span></span><br><span class=\"line\"><span class=\"string\">        $('button').onclick = function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            if ($('#check').innerHTML == '') &#123;</span></span><br><span class=\"line\"><span class=\"string\">                $('#tips').style.display = 'block'</span></span><br><span class=\"line\"><span class=\"string\">                $('html').scrollTop = $('#check').offsetTop;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"表单验证","date":"2021-07-07T06:24:57.000Z","_content":"\n<blockquote class=\"blockquote-center\">\n表单验证是如何实现的\n</blockquote>\n\n<!-- more -->\n\n首先应该知道 表单验证的规则有哪些\n![表单验证](表单验证/表单验证.png)","source":"_posts/表单验证.md","raw":"---\ntitle: 表单验证\ndate: 2021-07-07 14:24:57\ntags: [编程,封装]\n---\n\n<blockquote class=\"blockquote-center\">\n表单验证是如何实现的\n</blockquote>\n\n<!-- more -->\n\n首先应该知道 表单验证的规则有哪些\n![表单验证](表单验证/表单验证.png)","slug":"表单验证","published":1,"updated":"2021-07-07T06:49:59.410Z","_id":"ckqt3wuo3006dzgsy4tpestd3","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote class=\"blockquote-center\"><br>表单验证是如何实现的<br></blockquote>\n\n<a id=\"more\"></a>\n<p>首先应该知道 表单验证的规则有哪些<br><img src=\"//github.com/onlyH/onlyh.github.io/2021/07/07/表单验证/表单验证.png\" alt=\"表单验证\"></p>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"<blockquote class=\"blockquote-center\"><br>表单验证是如何实现的<br></blockquote>","more":"<p>首先应该知道 表单验证的规则有哪些<br><img src=\"//github.com/onlyH/onlyh.github.io/2021/07/07/表单验证/表单验证.png\" alt=\"表单验证\"></p>"},{"title":"购物车项目","date":"2018-03-31T16:00:00.000Z","copyright":true,"_content":"#### 第一部分：购物功能\n```json\n//接口json数据\n{\n    \"status\": 1,\n    \"result\": {\n        \"totalMoney\": 88,\n        \"list\": [\n            {\n                \"productId\": \"12345654321\",\n                \"productName\": \"music\",\n                \"productPrice\": \"28\",\n                \"productQuentity\": 1,\n                \"productImage\": \"img/goods.png\",\n                \"parts\": [\n                    {\n                        \"partId\": \"100001\",\n                        \"partName\": \"see you again\"\n                    }\n                ]\n            },\n            {\n                \"productId\": \"12345654322\",\n                \"productName\": \"food\",\n                \"productPrice\": \"30\",\n                \"productQuentity\": 1,\n                \"productImage\": \"img/food.png\",\n                \"parts\": [\n                    {\n                        \"partId\": \"100002\",\n                        \"partName\": \"ice\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"message\":\"\"\n}\n```\n\n- 连接接口数据\n```javascript\nmounted:function() {\n    this.cartView();//实例化创建完以后，默认查询某一个方法\n}\nmethods:{\n    cartView() {\n        var that = this\n        axios.get('/user.json?ID=12345')\n        .then(function (response) {\n            that.productList = res.result.list\n        }) \n    }\n}\n```\n- 列表数据渲染\n```html\n <!-- 购物车页面 -->\n<ul>\n    <li v-for=\"(item,index) in productList\" :key=\"index\">\n        <!-- 选中状态 a -->\n        <a href=\"javascript:;\" :class=\"{'check':item.check}\" @click=\"selectorPeoduct\"></a>\n\n        <img :src=\"item.productImage\" alt=\"\">\n        <!-- titile -->\n        <p>{{item.productName}}</p>\n        <!-- 类别 -->\n        <dl>\n            <dt></dt>\n            <dd v-for=\"part in item.parts\" v-text=\"part.partsName\"></dd>\n        </dl>\n\n        <!-- 价格 -->\n        <div>{{item.productPrice | formatMoney}}</div>\n        <!-- 个数 + - -->\n        <a href=\"\" @click=\"changeNum(item,-1)\">+</a>\n        <!--item对象-->\n        <input type=\"text\" value=\"0\" v-model=\"item.productQuentity | money('元')\" disabled>\n        <a href=\"\" @click=\"changeNum(item,1)\">-</a>\n        <!-- 删除 -->\n        <button @click=\"delConfirm(item)\">delete</button>\n        <!-- 总金额 -->\n        <div>{{item.productPrice * item.productQuentity}}</div>\n    </li>\n</ul>\n<div>\n    <span :class=\"{'ckecked':checkAllFLag}\" @click=\"checkAll(true)\">全选</span>\n    <span @click=\"checkAll(false)\">取消全选</span>\n</div>\n<!-- 删除后的弹框提示 -->\n<div :class=\"{'show':delFlag}\">\n    <button @click=\"delFlag = false\">关闭</button>\n    <button @click=\"delProduct()\">确认删除</button>\n</div>\n<!-- 结账 -->\n<a href=\"index.html\"></a>\n```\n- 定义数据\n```javascript\ndata() {\n    return{\n        totalMoney:0,//总金额\n        productList:[],\n        checkAllFLag:false,\n        delFlag:false, //遮罩开关\n        current:''\n    }\n}\n```\n- Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化\n```javascript\n//局部\nfilters:{\n    formatMoney:function(value) {\n        return \"￥\" + value.toFixed(2)\n    }\n}\n//全局\nvue.filter('money',function(value,type)) {\n    return \"￥\" + value.toFixed(2) + type\n}\n```\n- 改变商品数量\n```javascript\nchangeMoney(product,way) {\n      if(way > 0) {\n          product.productQuentity++\n      }else{\n          product.productQuentity--;\n          if(product.productQuentity< 1) {\n              product.productQuentity = 1\n          }\n      }\n      this.totalPrice()\n}\n```\n- 如果接口返回的数据中，没有判断点中状态的数据，那么就动态添加一个选中状态的判断。(多用于循环)\n```javascript   \n// :class一定是一个object 或者 数组\nselectorPeoduct(item) {\n    //判断商品是否选中 ,如果一个对象中的变量不存在，set方法\n    //判断item中的checked是否存在\n    if(typeof item.checked == 'undefined') { //如果等于就是不存在\n        // 如果不存在，全局注册或者局部注册\n        Vue.set(item,'checked',true)\n        this.$set(item,'checked',true)\n    }else{\n        item.checked = !item.checked\n    }\n    this.totalPrice()\n}\n```\n- 全选，取消全选事件\n```javascript \ncheckAll(flag) { //参数用于判断当前状态是全选还是取消全选\n    this.checkAllFlag = flag\n    var that = this\n        this.productList.forEach(function(item,index) {\n        //如果第一次直接点击的全选，那么上面的事件就不会触发，checked属性就不存在。那么就要判断是否注册。\n        if(typeof item.checked == 'undefined') {\n            that.$set(item,'checked',this.checkAllFlag)\n        }else{\n            item .checked = this.checkAllFlag\n        }\n    })\n   this.totalPrice()\n}\n```\n- 计算总金额\n```javascript\ntotalPrice() {\n    var that = this;\n    this.totalMoney = 0;\n    this.productList.forEach(function(item,index) {\n        if(item.checked) {\n            that.totalMoney += item.productPrice * item.productQuentity\n        }\n    })\n}\n```\n- 删除操作（当前选中的是哪个要删除）\n```javascript  \ndelConfirm(item) {\n    this.delFlag = true;\n    this.current = item; //当前对象\n},\ndelProduct() {\n    var index = this.productList.indexOf(this.current) //获取索引\n    this.productList.splice(index,1)\n    this.delFlag = false\n\n}\n\n```\n\n\n\n#### 第二部分：地址选配功能\n```json\n//数据json\n{\n    \"status\": \"0\",\n    \"message\": \"\",\n    \"result\": [{\n        \"addressId\": \"100000\",\n        \"userName\": \"jeck\",\n        \"stressName\": \"北京市海淀区\",\n        \"tel\": \"1232112321\",\n        \"isDefault\": true\n    }, {\n        \"addressId\": \"100000\",\n        \"userName\": \"jeck\",\n        \"stressName\": \"北京市海淀区\",\n        \"tel\": \"1232112321\",\n        \"isDefault\": false\n    }, {\n        \"addressId\": \"100000\",\n        \"userName\": \"jeck\",\n        \"stressName\": \"北京市海淀区\",\n        \"tel\": \"1232112321\",\n        \"isDefault\": false\n    }]\n}\n```\n- 列表数据渲染\n```html\n<div>\n    <span>配送地址</span>\n    <ul>\n        <li v-for=\"(item,index) in filterLength\" \n        @click=\"currentIndex = index\" \n        :class=\"{'check':currentIndex == index}\">\n            <dl>\n                <dt>{{item.userName}}</dt>\n                <dd>{{item.stressName}}</dd>\n                <dd>{{item.tel}}</dd>\n            </dl>\n            <div v-if=\"!item.isDefault\"\n             @click=\"setDefault(item.addressId)\">设为默认</div>\n            <div v-if=\"item.isDefault\">默认地址</div>\n            <div @click=\"limitNum = addressList.length\">显示全部列表</div>\n        </li>\n    </ul>\n    <ul>\n        <li>\n            <!-- 高亮 -->\n            <div :class=\"{'check':sippingMethod ==1}\"\n             @click=\"sippingMethod = 1\">标准配送</div>\n            <div :class=\"{'check':sippingMethod ==2}\"\n             @click=\"sippingMethod = 2\">高级配送</div>\n        </li>\n    </ul>\n</div>\n```\n- 数据加载\n```javascript\nmounted:function() {\n    this.$nextTick(function() {\n        this.getAddressList()\n    })\n},\nmethods:{\n    getAddressList() {\n         var that = this\n        axios.get('/address.json')\n        .then(function (response) {\n            that.addressList = res.result.list\n        }) \n    }\n}\n```\n- 定义data\n```javascript\ndata() {\n    return{\n        addressList:[],\n        limitNum:3,\n        currentIndex:0,//定义卡片索引，做高亮\n        sippingMethod:1 //默认配送方式\n    }\n}\n```\n- 如果默认显示三张卡片\n```javascript\ncomputed:{\n    filterLength:function() {\n        return this.addressList.slice(0,this.limitNum)\n    }\n}\n```\n- 设为默认\n```javascript  \nsetDefault(addresssId) {\n    this.addressList.forEach(function(address,index) {\n        if(address.addressId == addressId) {\n            address.isDefault = true\n        }else{\n            address.isDefault = false\n        }\n    })\n}\n```","source":"_posts/购物车项目.md","raw":"---\ntitle: 购物车项目\ncategories: vue\ndate: 2018-04-01\ntags: [项目,项分析目]\ncopyright: true\n\n---\n#### 第一部分：购物功能\n```json\n//接口json数据\n{\n    \"status\": 1,\n    \"result\": {\n        \"totalMoney\": 88,\n        \"list\": [\n            {\n                \"productId\": \"12345654321\",\n                \"productName\": \"music\",\n                \"productPrice\": \"28\",\n                \"productQuentity\": 1,\n                \"productImage\": \"img/goods.png\",\n                \"parts\": [\n                    {\n                        \"partId\": \"100001\",\n                        \"partName\": \"see you again\"\n                    }\n                ]\n            },\n            {\n                \"productId\": \"12345654322\",\n                \"productName\": \"food\",\n                \"productPrice\": \"30\",\n                \"productQuentity\": 1,\n                \"productImage\": \"img/food.png\",\n                \"parts\": [\n                    {\n                        \"partId\": \"100002\",\n                        \"partName\": \"ice\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"message\":\"\"\n}\n```\n\n- 连接接口数据\n```javascript\nmounted:function() {\n    this.cartView();//实例化创建完以后，默认查询某一个方法\n}\nmethods:{\n    cartView() {\n        var that = this\n        axios.get('/user.json?ID=12345')\n        .then(function (response) {\n            that.productList = res.result.list\n        }) \n    }\n}\n```\n- 列表数据渲染\n```html\n <!-- 购物车页面 -->\n<ul>\n    <li v-for=\"(item,index) in productList\" :key=\"index\">\n        <!-- 选中状态 a -->\n        <a href=\"javascript:;\" :class=\"{'check':item.check}\" @click=\"selectorPeoduct\"></a>\n\n        <img :src=\"item.productImage\" alt=\"\">\n        <!-- titile -->\n        <p>{{item.productName}}</p>\n        <!-- 类别 -->\n        <dl>\n            <dt></dt>\n            <dd v-for=\"part in item.parts\" v-text=\"part.partsName\"></dd>\n        </dl>\n\n        <!-- 价格 -->\n        <div>{{item.productPrice | formatMoney}}</div>\n        <!-- 个数 + - -->\n        <a href=\"\" @click=\"changeNum(item,-1)\">+</a>\n        <!--item对象-->\n        <input type=\"text\" value=\"0\" v-model=\"item.productQuentity | money('元')\" disabled>\n        <a href=\"\" @click=\"changeNum(item,1)\">-</a>\n        <!-- 删除 -->\n        <button @click=\"delConfirm(item)\">delete</button>\n        <!-- 总金额 -->\n        <div>{{item.productPrice * item.productQuentity}}</div>\n    </li>\n</ul>\n<div>\n    <span :class=\"{'ckecked':checkAllFLag}\" @click=\"checkAll(true)\">全选</span>\n    <span @click=\"checkAll(false)\">取消全选</span>\n</div>\n<!-- 删除后的弹框提示 -->\n<div :class=\"{'show':delFlag}\">\n    <button @click=\"delFlag = false\">关闭</button>\n    <button @click=\"delProduct()\">确认删除</button>\n</div>\n<!-- 结账 -->\n<a href=\"index.html\"></a>\n```\n- 定义数据\n```javascript\ndata() {\n    return{\n        totalMoney:0,//总金额\n        productList:[],\n        checkAllFLag:false,\n        delFlag:false, //遮罩开关\n        current:''\n    }\n}\n```\n- Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化\n```javascript\n//局部\nfilters:{\n    formatMoney:function(value) {\n        return \"￥\" + value.toFixed(2)\n    }\n}\n//全局\nvue.filter('money',function(value,type)) {\n    return \"￥\" + value.toFixed(2) + type\n}\n```\n- 改变商品数量\n```javascript\nchangeMoney(product,way) {\n      if(way > 0) {\n          product.productQuentity++\n      }else{\n          product.productQuentity--;\n          if(product.productQuentity< 1) {\n              product.productQuentity = 1\n          }\n      }\n      this.totalPrice()\n}\n```\n- 如果接口返回的数据中，没有判断点中状态的数据，那么就动态添加一个选中状态的判断。(多用于循环)\n```javascript   \n// :class一定是一个object 或者 数组\nselectorPeoduct(item) {\n    //判断商品是否选中 ,如果一个对象中的变量不存在，set方法\n    //判断item中的checked是否存在\n    if(typeof item.checked == 'undefined') { //如果等于就是不存在\n        // 如果不存在，全局注册或者局部注册\n        Vue.set(item,'checked',true)\n        this.$set(item,'checked',true)\n    }else{\n        item.checked = !item.checked\n    }\n    this.totalPrice()\n}\n```\n- 全选，取消全选事件\n```javascript \ncheckAll(flag) { //参数用于判断当前状态是全选还是取消全选\n    this.checkAllFlag = flag\n    var that = this\n        this.productList.forEach(function(item,index) {\n        //如果第一次直接点击的全选，那么上面的事件就不会触发，checked属性就不存在。那么就要判断是否注册。\n        if(typeof item.checked == 'undefined') {\n            that.$set(item,'checked',this.checkAllFlag)\n        }else{\n            item .checked = this.checkAllFlag\n        }\n    })\n   this.totalPrice()\n}\n```\n- 计算总金额\n```javascript\ntotalPrice() {\n    var that = this;\n    this.totalMoney = 0;\n    this.productList.forEach(function(item,index) {\n        if(item.checked) {\n            that.totalMoney += item.productPrice * item.productQuentity\n        }\n    })\n}\n```\n- 删除操作（当前选中的是哪个要删除）\n```javascript  \ndelConfirm(item) {\n    this.delFlag = true;\n    this.current = item; //当前对象\n},\ndelProduct() {\n    var index = this.productList.indexOf(this.current) //获取索引\n    this.productList.splice(index,1)\n    this.delFlag = false\n\n}\n\n```\n\n\n\n#### 第二部分：地址选配功能\n```json\n//数据json\n{\n    \"status\": \"0\",\n    \"message\": \"\",\n    \"result\": [{\n        \"addressId\": \"100000\",\n        \"userName\": \"jeck\",\n        \"stressName\": \"北京市海淀区\",\n        \"tel\": \"1232112321\",\n        \"isDefault\": true\n    }, {\n        \"addressId\": \"100000\",\n        \"userName\": \"jeck\",\n        \"stressName\": \"北京市海淀区\",\n        \"tel\": \"1232112321\",\n        \"isDefault\": false\n    }, {\n        \"addressId\": \"100000\",\n        \"userName\": \"jeck\",\n        \"stressName\": \"北京市海淀区\",\n        \"tel\": \"1232112321\",\n        \"isDefault\": false\n    }]\n}\n```\n- 列表数据渲染\n```html\n<div>\n    <span>配送地址</span>\n    <ul>\n        <li v-for=\"(item,index) in filterLength\" \n        @click=\"currentIndex = index\" \n        :class=\"{'check':currentIndex == index}\">\n            <dl>\n                <dt>{{item.userName}}</dt>\n                <dd>{{item.stressName}}</dd>\n                <dd>{{item.tel}}</dd>\n            </dl>\n            <div v-if=\"!item.isDefault\"\n             @click=\"setDefault(item.addressId)\">设为默认</div>\n            <div v-if=\"item.isDefault\">默认地址</div>\n            <div @click=\"limitNum = addressList.length\">显示全部列表</div>\n        </li>\n    </ul>\n    <ul>\n        <li>\n            <!-- 高亮 -->\n            <div :class=\"{'check':sippingMethod ==1}\"\n             @click=\"sippingMethod = 1\">标准配送</div>\n            <div :class=\"{'check':sippingMethod ==2}\"\n             @click=\"sippingMethod = 2\">高级配送</div>\n        </li>\n    </ul>\n</div>\n```\n- 数据加载\n```javascript\nmounted:function() {\n    this.$nextTick(function() {\n        this.getAddressList()\n    })\n},\nmethods:{\n    getAddressList() {\n         var that = this\n        axios.get('/address.json')\n        .then(function (response) {\n            that.addressList = res.result.list\n        }) \n    }\n}\n```\n- 定义data\n```javascript\ndata() {\n    return{\n        addressList:[],\n        limitNum:3,\n        currentIndex:0,//定义卡片索引，做高亮\n        sippingMethod:1 //默认配送方式\n    }\n}\n```\n- 如果默认显示三张卡片\n```javascript\ncomputed:{\n    filterLength:function() {\n        return this.addressList.slice(0,this.limitNum)\n    }\n}\n```\n- 设为默认\n```javascript  \nsetDefault(addresssId) {\n    this.addressList.forEach(function(address,index) {\n        if(address.addressId == addressId) {\n            address.isDefault = true\n        }else{\n            address.isDefault = false\n        }\n    })\n}\n```","slug":"购物车项目","published":1,"updated":"2021-07-01T07:30:54.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuo5006fzgsyfhrw8op1","content":"<h4 id=\"第一部分：购物功能\"><a href=\"#第一部分：购物功能\" class=\"headerlink\" title=\"第一部分：购物功能\"></a>第一部分：购物功能</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//接口json数据</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"status\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"result\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"totalMoney\"</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"list\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"productId\"</span>: <span class=\"string\">\"12345654321\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productName\"</span>: <span class=\"string\">\"music\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productPrice\"</span>: <span class=\"string\">\"28\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productQuentity\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productImage\"</span>: <span class=\"string\">\"img/goods.png\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"parts\"</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"partId\"</span>: <span class=\"string\">\"100001\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"partName\"</span>: <span class=\"string\">\"see you again\"</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"productId\"</span>: <span class=\"string\">\"12345654322\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productName\"</span>: <span class=\"string\">\"food\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productPrice\"</span>: <span class=\"string\">\"30\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productQuentity\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productImage\"</span>: <span class=\"string\">\"img/food.png\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"parts\"</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"partId\"</span>: <span class=\"string\">\"100002\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"partName\"</span>: <span class=\"string\">\"ice\"</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"message\"</span>:<span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>连接接口数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cartView();<span class=\"comment\">//实例化创建完以后，默认查询某一个方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    cartView() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">        axios.get(<span class=\"string\">'/user.json?ID=12345'</span>)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">            that.productList = res.result.list</span><br><span class=\"line\">        &#125;) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列表数据渲染</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 购物车页面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,index) in productList\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 选中状态 a --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'check':item.check&#125;\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"selectorPeoduct\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"item.productImage\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- titile --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;item.productName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 类别 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dd</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"part in item.parts\"</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"part.partsName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 价格 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;item.productPrice | formatMoney&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 个数 + - --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"changeNum(item,-1)\"</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--item对象--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"item.productQuentity | money('元')\"</span> <span class=\"attr\">disabled</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"changeNum(item,1)\"</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 删除 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"delConfirm(item)\"</span>&gt;</span>delete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 总金额 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;item.productPrice * item.productQuentity&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'ckecked':checkAllFLag&#125;\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"checkAll(true)\"</span>&gt;</span>全选<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"checkAll(false)\"</span>&gt;</span>取消全选<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 删除后的弹框提示 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'show':delFlag&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"delFlag = false\"</span>&gt;</span>关闭<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"delProduct()\"</span>&gt;</span>确认删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 结账 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"index.html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        totalMoney:<span class=\"number\">0</span>,<span class=\"comment\">//总金额</span></span><br><span class=\"line\">        productList:[],</span><br><span class=\"line\">        checkAllFLag:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        delFlag:<span class=\"literal\">false</span>, <span class=\"comment\">//遮罩开关</span></span><br><span class=\"line\">        current:<span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//局部</span></span><br><span class=\"line\">filters:&#123;</span><br><span class=\"line\">    formatMoney:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"￥\"</span> + value.toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//全局</span></span><br><span class=\"line\">vue.filter(<span class=\"string\">'money'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,type</span>)) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"￥\"</span> + value.toFixed(<span class=\"number\">2</span>) + type</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改变商品数量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeMoney(product,way) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(way &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          product.productQuentity++</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          product.productQuentity--;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(product.productQuentity&lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">              product.productQuentity = <span class=\"number\">1</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.totalPrice()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果接口返回的数据中，没有判断点中状态的数据，那么就动态添加一个选中状态的判断。(多用于循环)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// :class一定是一个object 或者 数组</span></span><br><span class=\"line\">selectorPeoduct(item) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断商品是否选中 ,如果一个对象中的变量不存在，set方法</span></span><br><span class=\"line\">    <span class=\"comment\">//判断item中的checked是否存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> item.checked == <span class=\"string\">'undefined'</span>) &#123; <span class=\"comment\">//如果等于就是不存在</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果不存在，全局注册或者局部注册</span></span><br><span class=\"line\">        Vue.set(item,<span class=\"string\">'checked'</span>,<span class=\"literal\">true</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$set(item,<span class=\"string\">'checked'</span>,<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        item.checked = !item.checked</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.totalPrice()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>全选，取消全选事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checkAll(flag) &#123; <span class=\"comment\">//参数用于判断当前状态是全选还是取消全选</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkAllFlag = flag</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.productList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果第一次直接点击的全选，那么上面的事件就不会触发，checked属性就不存在。那么就要判断是否注册。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> item.checked == <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">            that.$set(item,<span class=\"string\">'checked'</span>,<span class=\"keyword\">this</span>.checkAllFlag)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            item .checked = <span class=\"keyword\">this</span>.checkAllFlag</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.totalPrice()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>计算总金额</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">totalPrice() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.totalMoney = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.productList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(item.checked) &#123;</span><br><span class=\"line\">            that.totalMoney += item.productPrice * item.productQuentity</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除操作（当前选中的是哪个要删除）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delConfirm(item) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delFlag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.current = item; <span class=\"comment\">//当前对象</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">delProduct() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.productList.indexOf(<span class=\"keyword\">this</span>.current) <span class=\"comment\">//获取索引</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.productList.splice(index,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delFlag = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"第二部分：地址选配功能\"><a href=\"#第二部分：地址选配功能\" class=\"headerlink\" title=\"第二部分：地址选配功能\"></a>第二部分：地址选配功能</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数据json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"status\"</span>: <span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"message\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"result\"</span>: [&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"addressId\"</span>: <span class=\"string\">\"100000\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"userName\"</span>: <span class=\"string\">\"jeck\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"stressName\"</span>: <span class=\"string\">\"北京市海淀区\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tel\"</span>: <span class=\"string\">\"1232112321\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"isDefault\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"addressId\"</span>: <span class=\"string\">\"100000\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"userName\"</span>: <span class=\"string\">\"jeck\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"stressName\"</span>: <span class=\"string\">\"北京市海淀区\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tel\"</span>: <span class=\"string\">\"1232112321\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"isDefault\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"addressId\"</span>: <span class=\"string\">\"100000\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"userName\"</span>: <span class=\"string\">\"jeck\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"stressName\"</span>: <span class=\"string\">\"北京市海淀区\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tel\"</span>: <span class=\"string\">\"1232112321\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"isDefault\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>列表数据渲染</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>配送地址<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,index) in filterLength\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        @<span class=\"attr\">click</span>=<span class=\"string\">\"currentIndex = index\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'check':currentIndex == index&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>&#123;&#123;item.userName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>&#123;&#123;item.stressName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>&#123;&#123;item.tel&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!item.isDefault\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             @<span class=\"attr\">click</span>=<span class=\"string\">\"setDefault(item.addressId)\"</span>&gt;</span>设为默认<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"item.isDefault\"</span>&gt;</span>默认地址<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"limitNum = addressList.length\"</span>&gt;</span>显示全部列表<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 高亮 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'check':sippingMethod ==1&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             @<span class=\"attr\">click</span>=<span class=\"string\">\"sippingMethod = 1\"</span>&gt;</span>标准配送<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'check':sippingMethod ==2&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             @<span class=\"attr\">click</span>=<span class=\"string\">\"sippingMethod = 2\"</span>&gt;</span>高级配送<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据加载</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getAddressList()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    getAddressList() &#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">        axios.get(<span class=\"string\">'/address.json'</span>)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">            that.addressList = res.result.list</span><br><span class=\"line\">        &#125;) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义data</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        addressList:[],</span><br><span class=\"line\">        limitNum:<span class=\"number\">3</span>,</span><br><span class=\"line\">        currentIndex:<span class=\"number\">0</span>,<span class=\"comment\">//定义卡片索引，做高亮</span></span><br><span class=\"line\">        sippingMethod:<span class=\"number\">1</span> <span class=\"comment\">//默认配送方式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果默认显示三张卡片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed:&#123;</span><br><span class=\"line\">    filterLength:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.addressList.slice(<span class=\"number\">0</span>,<span class=\"keyword\">this</span>.limitNum)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设为默认</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setDefault(addresssId) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addressList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">address,index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(address.addressId == addressId) &#123;</span><br><span class=\"line\">            address.isDefault = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            address.isDefault = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<h4 id=\"第一部分：购物功能\"><a href=\"#第一部分：购物功能\" class=\"headerlink\" title=\"第一部分：购物功能\"></a>第一部分：购物功能</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//接口json数据</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"status\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"result\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"totalMoney\"</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"list\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"productId\"</span>: <span class=\"string\">\"12345654321\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productName\"</span>: <span class=\"string\">\"music\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productPrice\"</span>: <span class=\"string\">\"28\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productQuentity\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productImage\"</span>: <span class=\"string\">\"img/goods.png\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"parts\"</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"partId\"</span>: <span class=\"string\">\"100001\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"partName\"</span>: <span class=\"string\">\"see you again\"</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"productId\"</span>: <span class=\"string\">\"12345654322\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productName\"</span>: <span class=\"string\">\"food\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productPrice\"</span>: <span class=\"string\">\"30\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productQuentity\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"productImage\"</span>: <span class=\"string\">\"img/food.png\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"parts\"</span>: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"partId\"</span>: <span class=\"string\">\"100002\"</span>,</span><br><span class=\"line\">                        <span class=\"attr\">\"partName\"</span>: <span class=\"string\">\"ice\"</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"message\"</span>:<span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>连接接口数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cartView();<span class=\"comment\">//实例化创建完以后，默认查询某一个方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    cartView() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">        axios.get(<span class=\"string\">'/user.json?ID=12345'</span>)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">            that.productList = res.result.list</span><br><span class=\"line\">        &#125;) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列表数据渲染</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 购物车页面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,index) in productList\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 选中状态 a --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'check':item.check&#125;\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"selectorPeoduct\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"item.productImage\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- titile --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;item.productName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 类别 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dd</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"part in item.parts\"</span> <span class=\"attr\">v-text</span>=<span class=\"string\">\"part.partsName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 价格 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;item.productPrice | formatMoney&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 个数 + - --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"changeNum(item,-1)\"</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--item对象--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"item.productQuentity | money('元')\"</span> <span class=\"attr\">disabled</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"changeNum(item,1)\"</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 删除 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"delConfirm(item)\"</span>&gt;</span>delete<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 总金额 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;item.productPrice * item.productQuentity&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'ckecked':checkAllFLag&#125;\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"checkAll(true)\"</span>&gt;</span>全选<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"checkAll(false)\"</span>&gt;</span>取消全选<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 删除后的弹框提示 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'show':delFlag&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"delFlag = false\"</span>&gt;</span>关闭<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"delProduct()\"</span>&gt;</span>确认删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 结账 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"index.html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        totalMoney:<span class=\"number\">0</span>,<span class=\"comment\">//总金额</span></span><br><span class=\"line\">        productList:[],</span><br><span class=\"line\">        checkAllFLag:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        delFlag:<span class=\"literal\">false</span>, <span class=\"comment\">//遮罩开关</span></span><br><span class=\"line\">        current:<span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//局部</span></span><br><span class=\"line\">filters:&#123;</span><br><span class=\"line\">    formatMoney:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"￥\"</span> + value.toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//全局</span></span><br><span class=\"line\">vue.filter(<span class=\"string\">'money'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,type</span>)) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"￥\"</span> + value.toFixed(<span class=\"number\">2</span>) + type</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改变商品数量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeMoney(product,way) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(way &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          product.productQuentity++</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          product.productQuentity--;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(product.productQuentity&lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">              product.productQuentity = <span class=\"number\">1</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.totalPrice()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果接口返回的数据中，没有判断点中状态的数据，那么就动态添加一个选中状态的判断。(多用于循环)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// :class一定是一个object 或者 数组</span></span><br><span class=\"line\">selectorPeoduct(item) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断商品是否选中 ,如果一个对象中的变量不存在，set方法</span></span><br><span class=\"line\">    <span class=\"comment\">//判断item中的checked是否存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> item.checked == <span class=\"string\">'undefined'</span>) &#123; <span class=\"comment\">//如果等于就是不存在</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果不存在，全局注册或者局部注册</span></span><br><span class=\"line\">        Vue.set(item,<span class=\"string\">'checked'</span>,<span class=\"literal\">true</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$set(item,<span class=\"string\">'checked'</span>,<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        item.checked = !item.checked</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.totalPrice()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>全选，取消全选事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checkAll(flag) &#123; <span class=\"comment\">//参数用于判断当前状态是全选还是取消全选</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkAllFlag = flag</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.productList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果第一次直接点击的全选，那么上面的事件就不会触发，checked属性就不存在。那么就要判断是否注册。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> item.checked == <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">            that.$set(item,<span class=\"string\">'checked'</span>,<span class=\"keyword\">this</span>.checkAllFlag)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            item .checked = <span class=\"keyword\">this</span>.checkAllFlag</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.totalPrice()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>计算总金额</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">totalPrice() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.totalMoney = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.productList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(item.checked) &#123;</span><br><span class=\"line\">            that.totalMoney += item.productPrice * item.productQuentity</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除操作（当前选中的是哪个要删除）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delConfirm(item) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delFlag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.current = item; <span class=\"comment\">//当前对象</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">delProduct() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.productList.indexOf(<span class=\"keyword\">this</span>.current) <span class=\"comment\">//获取索引</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.productList.splice(index,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delFlag = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"第二部分：地址选配功能\"><a href=\"#第二部分：地址选配功能\" class=\"headerlink\" title=\"第二部分：地址选配功能\"></a>第二部分：地址选配功能</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数据json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"status\"</span>: <span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"message\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"result\"</span>: [&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"addressId\"</span>: <span class=\"string\">\"100000\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"userName\"</span>: <span class=\"string\">\"jeck\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"stressName\"</span>: <span class=\"string\">\"北京市海淀区\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tel\"</span>: <span class=\"string\">\"1232112321\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"isDefault\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"addressId\"</span>: <span class=\"string\">\"100000\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"userName\"</span>: <span class=\"string\">\"jeck\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"stressName\"</span>: <span class=\"string\">\"北京市海淀区\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tel\"</span>: <span class=\"string\">\"1232112321\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"isDefault\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"addressId\"</span>: <span class=\"string\">\"100000\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"userName\"</span>: <span class=\"string\">\"jeck\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"stressName\"</span>: <span class=\"string\">\"北京市海淀区\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tel\"</span>: <span class=\"string\">\"1232112321\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"isDefault\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>列表数据渲染</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>配送地址<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,index) in filterLength\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        @<span class=\"attr\">click</span>=<span class=\"string\">\"currentIndex = index\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'check':currentIndex == index&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>&#123;&#123;item.userName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>&#123;&#123;item.stressName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>&#123;&#123;item.tel&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!item.isDefault\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             @<span class=\"attr\">click</span>=<span class=\"string\">\"setDefault(item.addressId)\"</span>&gt;</span>设为默认<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"item.isDefault\"</span>&gt;</span>默认地址<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"limitNum = addressList.length\"</span>&gt;</span>显示全部列表<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 高亮 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'check':sippingMethod ==1&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             @<span class=\"attr\">click</span>=<span class=\"string\">\"sippingMethod = 1\"</span>&gt;</span>标准配送<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;'check':sippingMethod ==2&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             @<span class=\"attr\">click</span>=<span class=\"string\">\"sippingMethod = 2\"</span>&gt;</span>高级配送<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据加载</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getAddressList()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    getAddressList() &#123;</span><br><span class=\"line\">         <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></span><br><span class=\"line\">        axios.get(<span class=\"string\">'/address.json'</span>)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">            that.addressList = res.result.list</span><br><span class=\"line\">        &#125;) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义data</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        addressList:[],</span><br><span class=\"line\">        limitNum:<span class=\"number\">3</span>,</span><br><span class=\"line\">        currentIndex:<span class=\"number\">0</span>,<span class=\"comment\">//定义卡片索引，做高亮</span></span><br><span class=\"line\">        sippingMethod:<span class=\"number\">1</span> <span class=\"comment\">//默认配送方式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果默认显示三张卡片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed:&#123;</span><br><span class=\"line\">    filterLength:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.addressList.slice(<span class=\"number\">0</span>,<span class=\"keyword\">this</span>.limitNum)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设为默认</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setDefault(addresssId) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addressList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">address,index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(address.addressId == addressId) &#123;</span><br><span class=\"line\">            address.isDefault = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            address.isDefault = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"逻辑运算符","date":"2018-03-27T16:00:00.000Z","_content":"\n```javascript\nconsole.log(10 && 0) //0\nconsole.log('' || 'abc') //abc\nconsole.log(window.abc) //true\n\n\n//判断一个变量会被当做true还是false\nvar a = 100;\nconsole.log(!!a)\n\n\nvar a = {}\nif(a.b == null) {\n    //a.b === null ,a.b === undefined\n}\n//参考于bootstrap源码\n```","source":"_posts/逻辑运算符.md","raw":"---\ntitle: 逻辑运算符\ndate: 2018-3-28\ncategories: js\ntags: [编程,学习]\n---\n\n```javascript\nconsole.log(10 && 0) //0\nconsole.log('' || 'abc') //abc\nconsole.log(window.abc) //true\n\n\n//判断一个变量会被当做true还是false\nvar a = 100;\nconsole.log(!!a)\n\n\nvar a = {}\nif(a.b == null) {\n    //a.b === null ,a.b === undefined\n}\n//参考于bootstrap源码\n```","slug":"逻辑运算符","published":1,"updated":"2021-07-01T07:30:54.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuo6006izgsyliuvhf0t","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">10</span> &amp;&amp; <span class=\"number\">0</span>) <span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">''</span> || <span class=\"string\">'abc'</span>) <span class=\"comment\">//abc</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.abc) <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断一个变量会被当做true还是false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(!!a)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a.b == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//a.b === null ,a.b === undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//参考于bootstrap源码</span></span><br></pre></td></tr></table></figure>","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">10</span> &amp;&amp; <span class=\"number\">0</span>) <span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">''</span> || <span class=\"string\">'abc'</span>) <span class=\"comment\">//abc</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.abc) <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断一个变量会被当做true还是false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(!!a)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a.b == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//a.b === null ,a.b === undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//参考于bootstrap源码</span></span><br></pre></td></tr></table></figure>"},{"title":"关于遍历一组对象","date":"2018-02-27T16:00:00.000Z","_content":"今日，要去遍历一组后台传来的数据，类似于\n```javascript\n\ncourses: [\n0: {\n    classId: \"5b9b5a10a5084200d4905f98\", \n    lessonId: \"5b9b5840a5084200d4905f8e\", \n    courseName: \"sadfsafsadf\"\n    }\n\n1: {\n    classId: \"5b9b5a10a5084200d4905f98\", \n    lessonId: \"5b9b584da5084200d4905f93\", \n    courseName: \"sadfsafsadf\"\n    }\n```\n这样的数据。\n按照往常在vue里面动态展现数据的想法，我定义了一个空数组`courseList = []`，然后把后台的数据添加到这个空数组，如果是在vue中，一个 `v-for=\"item in courseList\"`就可以把数据展现了，但是我现在不是要在vue中展现，而是要js里面展现。\n采用定义空数组，然后把后台数据赋值给空数组，再去遍历空数组，获取需要的数据。。。orz，好放繁琐的一个过程。。\n现在，有一个新的做法，那就是\n1. 不在定义一个空数组，而是定义一个空对象，`courseList = {}`\n2. 出初始化这个对象，并把后台数据循环给这个对象的数组\n3. 接收传来的每一个对象\n```javascript\n//代码如下\nthis.data.courseList = {}\ndata.courses.forEach(course =>{ //data.courses是后台数据\n    this.data.courseList[course.courseId] = course //course为每一组对象{},{},{}...\n    //this.data.courseList将当前对象循环n次\n    //[course.courseId]数组，取每次循环中对应的courseId对应的数据\n})\n//这时候的 this.data.courseList[courseId]就等于\n\n\ncourseList:Object\n5b9b5a10a5084200d4905f98:Object\nclassId:\"5b9b5a10a5084200d4905f98\"\ncourseName:\"sadfsafsadf\"\nlessonId:\"5b9b584da5084200d4905f93\"\n5b9b5a2fa5084200d4905f9a:Object\n\n```","source":"_posts/遍历对象.md","raw":"---\ntitle: 关于遍历一组对象\ndate: 2018-2-28\ncategories: vue\ntags: [编程,学习]\n---\n今日，要去遍历一组后台传来的数据，类似于\n```javascript\n\ncourses: [\n0: {\n    classId: \"5b9b5a10a5084200d4905f98\", \n    lessonId: \"5b9b5840a5084200d4905f8e\", \n    courseName: \"sadfsafsadf\"\n    }\n\n1: {\n    classId: \"5b9b5a10a5084200d4905f98\", \n    lessonId: \"5b9b584da5084200d4905f93\", \n    courseName: \"sadfsafsadf\"\n    }\n```\n这样的数据。\n按照往常在vue里面动态展现数据的想法，我定义了一个空数组`courseList = []`，然后把后台的数据添加到这个空数组，如果是在vue中，一个 `v-for=\"item in courseList\"`就可以把数据展现了，但是我现在不是要在vue中展现，而是要js里面展现。\n采用定义空数组，然后把后台数据赋值给空数组，再去遍历空数组，获取需要的数据。。。orz，好放繁琐的一个过程。。\n现在，有一个新的做法，那就是\n1. 不在定义一个空数组，而是定义一个空对象，`courseList = {}`\n2. 出初始化这个对象，并把后台数据循环给这个对象的数组\n3. 接收传来的每一个对象\n```javascript\n//代码如下\nthis.data.courseList = {}\ndata.courses.forEach(course =>{ //data.courses是后台数据\n    this.data.courseList[course.courseId] = course //course为每一组对象{},{},{}...\n    //this.data.courseList将当前对象循环n次\n    //[course.courseId]数组，取每次循环中对应的courseId对应的数据\n})\n//这时候的 this.data.courseList[courseId]就等于\n\n\ncourseList:Object\n5b9b5a10a5084200d4905f98:Object\nclassId:\"5b9b5a10a5084200d4905f98\"\ncourseName:\"sadfsafsadf\"\nlessonId:\"5b9b584da5084200d4905f93\"\n5b9b5a2fa5084200d4905f9a:Object\n\n```","slug":"遍历对象","published":1,"updated":"2021-07-01T07:30:54.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuo8006mzgsyn5xqoiv6","content":"<p>今日，要去遍历一组后台传来的数据，类似于<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">courses: [</span><br><span class=\"line\"><span class=\"number\">0</span>: &#123;</span><br><span class=\"line\">    classId: <span class=\"string\">\"5b9b5a10a5084200d4905f98\"</span>, </span><br><span class=\"line\">    lessonId: <span class=\"string\">\"5b9b5840a5084200d4905f8e\"</span>, </span><br><span class=\"line\">    courseName: <span class=\"string\">\"sadfsafsadf\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>: &#123;</span><br><span class=\"line\">    classId: <span class=\"string\">\"5b9b5a10a5084200d4905f98\"</span>, </span><br><span class=\"line\">    lessonId: <span class=\"string\">\"5b9b584da5084200d4905f93\"</span>, </span><br><span class=\"line\">    courseName: <span class=\"string\">\"sadfsafsadf\"</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样的数据。<br>按照往常在vue里面动态展现数据的想法，我定义了一个空数组<code>courseList = []</code>，然后把后台的数据添加到这个空数组，如果是在vue中，一个 <code>v-for=&quot;item in courseList&quot;</code>就可以把数据展现了，但是我现在不是要在vue中展现，而是要js里面展现。<br>采用定义空数组，然后把后台数据赋值给空数组，再去遍历空数组，获取需要的数据。。。orz，好放繁琐的一个过程。。<br>现在，有一个新的做法，那就是</p>\n<ol>\n<li>不在定义一个空数组，而是定义一个空对象，<code>courseList = {}</code></li>\n<li>出初始化这个对象，并把后台数据循环给这个对象的数组</li>\n<li>接收传来的每一个对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码如下</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.data.courseList = &#123;&#125;</span><br><span class=\"line\">data.courses.forEach(<span class=\"function\"><span class=\"params\">course</span> =&gt;</span>&#123; <span class=\"comment\">//data.courses是后台数据</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data.courseList[course.courseId] = course <span class=\"comment\">//course为每一组对象&#123;&#125;,&#123;&#125;,&#123;&#125;...</span></span><br><span class=\"line\">    <span class=\"comment\">//this.data.courseList将当前对象循环n次</span></span><br><span class=\"line\">    <span class=\"comment\">//[course.courseId]数组，取每次循环中对应的courseId对应的数据</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//这时候的 this.data.courseList[courseId]就等于</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">courseList:<span class=\"built_in\">Object</span></span><br><span class=\"line\"><span class=\"number\">5</span>b9b5a10a5084200d4905f98:<span class=\"built_in\">Object</span></span><br><span class=\"line\">classId:<span class=\"string\">\"5b9b5a10a5084200d4905f98\"</span></span><br><span class=\"line\">courseName:<span class=\"string\">\"sadfsafsadf\"</span></span><br><span class=\"line\">lessonId:<span class=\"string\">\"5b9b584da5084200d4905f93\"</span></span><br><span class=\"line\"><span class=\"number\">5</span>b9b5a2fa5084200d4905f9a:<span class=\"built_in\">Object</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<p>今日，要去遍历一组后台传来的数据，类似于<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">courses: [</span><br><span class=\"line\"><span class=\"number\">0</span>: &#123;</span><br><span class=\"line\">    classId: <span class=\"string\">\"5b9b5a10a5084200d4905f98\"</span>, </span><br><span class=\"line\">    lessonId: <span class=\"string\">\"5b9b5840a5084200d4905f8e\"</span>, </span><br><span class=\"line\">    courseName: <span class=\"string\">\"sadfsafsadf\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>: &#123;</span><br><span class=\"line\">    classId: <span class=\"string\">\"5b9b5a10a5084200d4905f98\"</span>, </span><br><span class=\"line\">    lessonId: <span class=\"string\">\"5b9b584da5084200d4905f93\"</span>, </span><br><span class=\"line\">    courseName: <span class=\"string\">\"sadfsafsadf\"</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样的数据。<br>按照往常在vue里面动态展现数据的想法，我定义了一个空数组<code>courseList = []</code>，然后把后台的数据添加到这个空数组，如果是在vue中，一个 <code>v-for=&quot;item in courseList&quot;</code>就可以把数据展现了，但是我现在不是要在vue中展现，而是要js里面展现。<br>采用定义空数组，然后把后台数据赋值给空数组，再去遍历空数组，获取需要的数据。。。orz，好放繁琐的一个过程。。<br>现在，有一个新的做法，那就是</p>\n<ol>\n<li>不在定义一个空数组，而是定义一个空对象，<code>courseList = {}</code></li>\n<li>出初始化这个对象，并把后台数据循环给这个对象的数组</li>\n<li>接收传来的每一个对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码如下</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.data.courseList = &#123;&#125;</span><br><span class=\"line\">data.courses.forEach(<span class=\"function\"><span class=\"params\">course</span> =&gt;</span>&#123; <span class=\"comment\">//data.courses是后台数据</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data.courseList[course.courseId] = course <span class=\"comment\">//course为每一组对象&#123;&#125;,&#123;&#125;,&#123;&#125;...</span></span><br><span class=\"line\">    <span class=\"comment\">//this.data.courseList将当前对象循环n次</span></span><br><span class=\"line\">    <span class=\"comment\">//[course.courseId]数组，取每次循环中对应的courseId对应的数据</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//这时候的 this.data.courseList[courseId]就等于</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">courseList:<span class=\"built_in\">Object</span></span><br><span class=\"line\"><span class=\"number\">5</span>b9b5a10a5084200d4905f98:<span class=\"built_in\">Object</span></span><br><span class=\"line\">classId:<span class=\"string\">\"5b9b5a10a5084200d4905f98\"</span></span><br><span class=\"line\">courseName:<span class=\"string\">\"sadfsafsadf\"</span></span><br><span class=\"line\">lessonId:<span class=\"string\">\"5b9b584da5084200d4905f93\"</span></span><br><span class=\"line\"><span class=\"number\">5</span>b9b5a2fa5084200d4905f9a:<span class=\"built_in\">Object</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"闭包","date":"2017-12-01T16:00:00.000Z","_content":"- 当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。\n```javascript\nfunction foo() {\n    var a = 2;\n    function bar() {\n        console.log(a)  //2\n    }\n    bar()\n}\nfoo()\n\n\nfunction foo() {\n    var a = 2;\n    function bar() {\n        console.log(a)\n    }\n    return bar;\n}\nvar baz = foo();\nbaz();//2  闭包\n\n//bar()的词法作用域能够与访问foo()的内部作用域，将bar()函数本身当做一个值类型进行传递（将bar所引用的函数对象本身当做返回值）在foo()执行后，其返回值(bar()函数)赋值给变量baz并调用baz()，实际上只是通过不同的标识符引用调用了内部的函数bar(),bar() 显然可以被正常执行。但是在这个例子中，它在自己定义的词法作用域以外的地方 执行。\n//在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，因为我们知道引擎有垃 圾回收器用来释放不再使用的内存空间。由于看上去 foo() 的内容不会再被使用，所以很 自然地会考虑对其进行回收。\n```\n- 闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此 没有被回收。谁在使用这个内部作用域?原来是 bar() 本身在使用。bar()拥有涵盖 foo() 内部作用域的闭包,使得该作用域能够一直存活，以供 bar() 在之后任何时间进行引用。\n###### bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。\n- 这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的\n词法作用域。\n###### 无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到 闭包。\n```javascript   \nfunction foo() {\n    var a = 2;\n    function baz() {\n        console.log(a) //2\n    }\n    bar(baz)\n}\nfunction bar(fn) {\n    fn()\n}\n//把内部函数 baz 传递给 bar，当调用这个内部函数时(现在叫作 fn)，它涵盖的 foo()内部作用域的闭包就可以观察到了，因为它能够访问 a。\n\n\n\nvar fn;\nfunction foo() {\n    var a = 2;\n    function baz() {\n        console.log(a)\n    }\n    fn = baz;//将 baz 分配给全局变量\n}\nfunction bar() {\n    fn() //这就是闭包!\n}\nfoo()\nbar() //2\n//无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用 域的引用，无论在何处执行这个函数都会使用闭包。\n```\n##### 经典\n```javascript\nfunction wait(message) {\n    setTimeout(function timer() {\n        console.log(message)\n    },1000)\n} \nwait('hello , closure ')  \n```\n将一个内部函数(名为 timer)传递给 setTimeout(..)。timer 具有涵盖 wait(..) 作用域\n的闭包，因此还保有对变量 message 的引用。\nwait(..) 执行 1000 毫秒后，它的内部作用域并不会消失，timer 函数依然保有 wait(..)作用域的闭包。\n深入到引擎的内部原理中，内置的工具函数 setTimeout(..) 持有对一个参数的引用，这个 参数也许叫作 fn 或者 func，或者其他类似的名字。引擎会调用这个函数，在例子中就是 内部的 timer 函数，而词法作用域在这个过程中保持完整。\n`这就是闭包`\n\n```javascript\nfunction setupBot(name,selector) {\n    $(selector).click(function activator() {\n        console.log(name)\n    })\n}\n setupBot( \"Closure Bot 1\", \"#bot_1\" );\n     setupBot( \"Closure Bot 2\", \"#bot_2\" );\n```\n###### 如果将函数(访问它们各自的词法作用域)当作第一 级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步(或者同步)任务中，只要使 用了回调函数，实际上就是在使用闭包!通常认为 IIFE 是典型的闭包例子.\n```javascript\nvar a = 2;\n(function IIEF() {\n    console.log(a)\n})()\n//这段代码可以正常工作，但严格来讲它并不是闭包。因为函数(示例代码中 的 IIFE)并不是在它本身的词法作用域以外执行的。它在定义时所在的作用域中执行(而外部作用域，也就是全局作用域也持有a)。a 是通过普通的词法作用域查找而非闭包被发现的。\n```\n##### 循环和闭包--for循环\n```javascript  \nfor(var i = 1 ;i<=5; i++) {\n    setTimeout(function timer() {\n        console.log(i)\n    },1000)\n} //6,6,6,6,6\n//这个循环的终止条件是 i 不再 <=5。条件首次成立时 i 的值是 6。因此，输出显示的是循环结束时 i 的最终值。\n//延迟函数的回调会在循环结束时才执行。事实上， 当定时器运行时即使每个迭代中执行的是setTimeout(.., 0)，所有的回调函数依然是在循环结束后才会被执行，因此会每次输出一个 6 出来。\n```\n- \n缺陷是我们试图假设循环中的每个迭代在运行时都会给自己“捕获”一个 i 的副本。但是 根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的， 但是它们都被封闭在一个共享的全局作用域中，因此实际上只有一个 i。\n- 这样说的话，当然所有函数共享一个 i 的引用。循环结构让我们误以为背后还有更复杂的 机制在起作用，但实际上没有。如果将延迟函数的回调重复定义五次，完全不使用循环， 那它同这段代码是完全等价的。\n- 缺陷是什么?我们需要更多的闭包作用域，特别是在循环的过程中每个迭代都需要一个闭包作用域。\n\n\n###### IIFE 会通过声明并立即执行一个函数来创建作用域。\n- IIEF如果作用域是空的，那么将它进行封闭是没有效果的，需要有一点实质内容才可以。\n```javascript  \nfor(var i = 1 ; i<=5; i++) {\n    (function (i) {\n        setTimeout(function timer() {\n            console.log(i)\n        },i*1000)\n    })(i)\n} \n//在迭代内使用 IIFE 会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。\n```\n\n##### let劫持块作用域--并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）\n```javascript   \nfor(let i = 1; i<= 5; i++) {\n    setTimeout(function timer() {\n        console.log(i)\n    },i*1000)\n}\n```\n\n\n##### 模块\n```javascript\nfunction foo() {\n    var something = 'cool'\n    var other = [1,2,3]\n    function doSomething() {\n        console.log(something)\n    }\n    function doOther() {\n        console.log(other.join('!'))\n    }\n}\n//这里并没有明显的闭包，只有两个私有数据变量 something 和 other，以及 doSomething() 和 doOther() 两个内部函数，它们的词法作用域(而这 就是闭包)也就是 foo() 的内部作用域。\n\nfunction coolModule() {\n    var something = 'study'\n    var other = [1,2,3]\n    function doSomething() {\n        console.log(something)\n    }\n    function doOther() {\n        console.log(other.join('!'))\n    }\n    return {\n        doSomething:doSomething,\n        doOther : doOther\n    }\n}\nvar person = coolModule()\nperson.doSomething()\nperson.doOther()\n//这个模式在 JavaScript 中被称为模块。最常见的实现模块模式的方法通常被称为模块暴露， 这里展示的是其变体。\n/*\n分析：\n1.coolModule()是一个函数，必须要通过调用他来创建一个模块实例，不执行外部函数，内部作用域和闭包都无法被创建\n2.coolModule()返回的是一个对象字面量语法{key:value,...}来表示的对象。这 个返回的对象中含有对内部函数而不是内部数据变量的引用。我们保持内部数据变量是隐 藏且私有的状态。可以将这个对象类型的返回值看作本质上是模块的公共 API。\n3.这个对象类型的返回值最终被赋值给外部的变量 foo，然后就可以通过它来访问 API 中的 属性方法，比如 foo.doSomething()。\n4.doSomething() 和 doAnother() 函数具有涵盖模块实例内部作用域的闭包(通过调用 CoolModule() 实现)。当通过返回一个含有属性引用的对象的方式来将函数传递到词法作 用域外部时，我们已经创造了可以观察和实践闭包的条件。\n*/\n```\n> 从模块中返回一个实际的对象并不是必须的，也可以直接返回一个内部函 数。jQuery 就是一个很好的例子。jQuery 和 $ 标识符就是 jQuery 模块的公 共 API，但它们本身都是函数(由于函数也是对象，它们本身也可以拥有属性)。\n\n\n###### 模块模式需要具备两个必要条件\n1. 必须有外部的封闭函数，该函数必须至少被调用一次(每次调用都会创建一个新的模块 实例)\n2. 封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。\n- 一个具有函数属性的对象本身并不是真正的模块。从方便观察的角度看，一个从函数调用 所返回的，只有数据属性而没有闭包函数的对象并不是真正的模块\n\n上一个示例代码中有一个叫作 CoolModule() 的独立的模块创建器，可以被调用任意多次， 每次调用都会创建一个新的模块实例。当只需要一个实例时，可以对这个模式进行简单的 改进来实现`单例模式`:\n```javascript\nvar foo = (function coolModuel() {\n    var something = 'study'\n    var other = [1,2,3]\n    function doSomething() {\n        console.log(something)\n    }\n    function doOther() {\n        console.log(other.join('!'))\n    }\n    return {\n        doSomething:doSomething,\n        doOther:doOther\n    }\n})()\nfoo.doSomething()\nfoo.doOther()\n//我们将模块函数转换成了 IIFE立即调用这个函数并将返回值直接赋值给 单例的模块实例标识符 foo。\n```\n模块也是普通的函数，因此可以接受参数:\n```javascript\nfunction coolModule(id) {\n    function identify() {\n        console.log(id)\n    }return{\n        identify:identify\n    }\n}\nvar person1 = coolModule('teacher')\nvar person2 = coolModule('doctor')\nperson1.identify() //teacher\nperson2.identify() //doctor\n```\n- 模块模式另一个简单但强大的变化用法是，命名将要作为公共 API 返回的对象:\n```javascript\nvar foo = (function coolModule(id) {\n    function change() {\n        // 修改公共 API\n        publicAPI.identify = identify2\n    }\n    function identify1() {\n        console.log(id)\n    }\n    function identify2() {\n        console.log(id.toUpperCase())\n    }\n    var publicAPI = {\n        change:change,\n        identify:identify1\n    }\n    return publicAPI\n  \n})('foo person')\n    foo.identify()//foo person\n    foo.change()\n    foo.identify()//FOO PERSON\n//通过在模块实例的内部保留对公共 API 对象的内部引用，可以从内部对模块实例进行修 改，包括添加或删除方法和属性，以及修改它们的值。\n```\n\n##### 现代的模块机制\n- 大多数模块依赖加载器 / 管理器本质上都是将这种模块定义封装进一个友好的 API。\n```javascript\nvar myModules = (function Manager() {\n    var modules = {}\n    function define(name,deps,impl) {\n        for(var i = 0; i<deps.length;i++) {\n            deps[i] = modules[deps[i]]\n        }\n        modules[name] = impl.apply(impl,deps)\n    }\n    function get(name) {\n        return modules[name]\n    }\n    return {\n        define:define,\n        get:get\n    }\n})()\n//这段代码的核心是 modules[name] = impl.apply(impl, deps)。为了模块的定义引入了包装函数(可以传入任何依赖)，并且将返回值，也就是模块的 API，储存在一个根据名字来管 理的模块列表中。\n```\n下面展示了如何使用它来定义模块:\n```javascript\nmyModules.define('bar',[],function() {\n    function hello(who) {\n        return 'let'+who\n    }\n    return {\n        hello:hello\n    }\n})\nmyModules.define('foo',['bar'],function(bar) {\n    var hungry = 'hippo';\n    function awesome() {\n        console.log(bar.hello(hungry).toUpperCase())\n    }\n    return{\n        awesome:awesome\n    }\n})\nvar bar = myModules.get('bar')\nvar foo = myModules.get('foo')\nconsole.log(bar.hello('hippo'))//Let hippo\n//\"foo\" 和 \"bar\" 模块都是通过一个返回公共 API 的函数来定义的。\"foo\" 甚至接受 \"bar\" 的 示例作为依赖参数，并能相应地使用它。\n```\n- 模块管理器:为函数定义引入包装函数，并保证它的返回值和模块的 API 保持一致\n- 模块就是模块，即使在它们外层加上一个友好的包装工具也不会发生任何变化。\n> 基于函数的模块并不是一个能被稳定识别的模式(编译器无法识别)，它们 的 API 语义只有在运行时才会被考虑进来。因此可以在运行时修改一个模块 的 API(参考前面关于公共 API 的讨论)。\n> 相比之下，ES6 模块 API 更加稳定(API 不会在运行时改变)。由于编辑器知 道这一点，因此可以在(的确也这样做了)编译期检查对导入模块的 API 成 员的引用是否真实存在。如果 API 引用并不存在，编译器会在运行时抛出一 个或多个“早期”错误，而不会像往常一样在运行期采用动态的解决方案.\n- ES6 的模块没有“行内”格式，必须被定义在独立的文件中(一个文件一个模块)。浏览 器或引擎有一个默认的“模块加载器”(可以被重载)可以在导入模块时异步地加载模块文件。\n\n```javascript\n//bar.js\nfunction hello(who) {\n    return 'Let me ' + who\n}\nexport hello\n\n//foo.js\n// 仅从 \"bar\" 模块导入 hello()\nimport hello from 'bar'\nvar hungry = 'hippo'\nfunction awesome() {\n    console.log(hello(hungry).toUpperCase())\n}\nexport awesome\n//baz.js\n// 导入完整的 \"foo\" 和 \"bar\" 模块\nmodule foo from 'foo'\nmodule bar from 'bar'\nconsole.log(bar.hello('rhino'))\n// Let me  rhino\n     foo.awesome();\n// LET ME : HIPPO\n//需要用前面两个代码片段中的内容分别创建文件 foo.js 和 bar.js。然后如第三 个代码片段中展示的那样，bar.js 中的程序会加载或导入这两个模块并使用 它们。\n\n\n```\n###### import 可以将一个模块中的一个或多个 API 导入到当前作用域中，并分别绑定在一个变量 上(在我们的例子里是 hello)。module 会将整个模块的 API 导入并绑定到一个变量上(在 我们的例子里是 foo 和 bar)。export 会将当前模块的一个标识符(变量、函数)导出为公 共 API。这些操作可以在模块定义中根据需要使用任意多次。\n###### 模块文件中的内容会被当作好像包含在作用域闭包中一样来处理\n\n##### 模块\n1. 为创建内部作用域而调用了一个包装函数。\n2. 包装函数的返回 值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。\n\n> JavaScript 中的作用域就是词法 作用域(事实上大部分语言都是基于词法作用域的)\n> 词法作用域是一套关于引擎如何寻找变量以及会在何处找到变量的规则。词法作用域最重要的特征是它的定义过程发生在代码的书写阶段(假设你没有使用 eval() 或 with)。\n\n```javascript\nfunction foo() {\n    console.log(a) //2\n}\nfunction bar() {\n    var a = 3\n    foo()\n}\nvar a = 2;\nbar()\n//词法作用域让 foo() 中的 a 通过 RHS 引用到了全局作用域中的 a，因此会输出 2。\n/*\n动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调 用。换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。\n事实上 JavaScript 并不具有动态作用域。它只有词法作用域，简单明了。 但是 this 机制某种程度上很像动态作用域。\n\n*/\n```\n\n\n###### 主要区别:\n1. 词法作用域是在写代码或者说定义时确定的，而动态作用域是在运行时确定 的。(this 也是!)词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。\n2. this 关注函数如何调用，这就表明了 this 机制和动态作用域之间的关系多么紧密\n\n\n###### 块作用域，而 with 和 catch 分句就是块作用域的两个小例子\n```javascript\n{\n    let a = 2;\n    console.log(a) //2\n}\nconsole.log(a) //ReferenceError\n\n//参考如下\ntry{\n    throw 2;\n}catch(a) {\n    console.log(a)\n}\nconsole.log(a) // ReferenceError\n//catch 分句具有块作用域，因此它可以在 ES6 之前的环境中作为块作用域的替代方案。\n```\n-  Traceur 的项目:\n```javascript\n{\n    try{\n        throw undefined\n    }catch(a) {\n        a = 2;\n        console.log(a)\n    }\n}\nconsole.log(a)\n```\n\n##### 隐式和显式作用域\n- let 作用域或 let 声明(\n```javascript\nlet (a = 2) {\n    console.log(2)\n}\n     console.log( a ); // ReferenceError\n```\n> 同隐式地劫持一个已经存在的作用域不同，let 声明会创建一个显示的作用域并与其进行 绑定。显式作用域不仅更加突出，在代码重构时也表现得更加健壮。在语法上，通过强制 性地将所有变量声明提升到块的顶部来产生更简洁的代码。这样更容易判断变量是否属于 某个作用域。\n+ let 声 明有意将变量声明放在块的顶部\n\n##### 箭头函数\n```javascript\nvar foo = a =>{\n    console.log(a)\n}\nfoo(2) //2\n\n\nvar obj = {\n    id:'awesome',\n    cool:function coolFn() {\n        console.log(this.id)\n    }\n}\nvar id = 'no cool'\nobj.cool() //cool\nsetTimeout(obj.cool,100)//no cool\n\n//cool() 函数丢失了同 this 之间的绑定,解决：var self = this ---词法作用域,self 只是一个可以通过 词法作用域和闭包进行引用的标识符，不关心 this 绑定的过程中发生了什么。\nvar obj = {\n    count:0,\n    cool:function () {\n        var self = this;\n        if(self.count < 1) {\n            setTimeout(function () {\n                self.count++;\n            console.log('awesome')\n            },100)\n        }\n    }\n}\nobj.cool()//awesome\n\n\n\n\nvar obj = {\n    count:0,\n    cool:function() {\n        if(this.count <1) {\n            setTimeout(()=>{\n                this.count++;\n                console.log('yes')\n            })\n        }\n    }\n}\nobj.cool() //yes\n\n\nvar obj = {\n    count:0,\n    cool:function() {\n        if(this.count <1) {\n            setTimeout(function() {\n                this.count++;//this是安全的，因为bind()\n                console.log('more awsome')\n            }.bind(this),100)\n        }\n    }\n}\nobj.cool()\n```\n- 箭头函数的this是用当前的词法作用域覆盖了 this 本来的值。\n\n\n\n\n> 《你不知道的javascript上卷》","source":"_posts/闭包.md","raw":"---\ntitle: 闭包\ndate: 2017-12-02\ncategories: js\ntags: [编程,学习]\n---\n- 当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。\n```javascript\nfunction foo() {\n    var a = 2;\n    function bar() {\n        console.log(a)  //2\n    }\n    bar()\n}\nfoo()\n\n\nfunction foo() {\n    var a = 2;\n    function bar() {\n        console.log(a)\n    }\n    return bar;\n}\nvar baz = foo();\nbaz();//2  闭包\n\n//bar()的词法作用域能够与访问foo()的内部作用域，将bar()函数本身当做一个值类型进行传递（将bar所引用的函数对象本身当做返回值）在foo()执行后，其返回值(bar()函数)赋值给变量baz并调用baz()，实际上只是通过不同的标识符引用调用了内部的函数bar(),bar() 显然可以被正常执行。但是在这个例子中，它在自己定义的词法作用域以外的地方 执行。\n//在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，因为我们知道引擎有垃 圾回收器用来释放不再使用的内存空间。由于看上去 foo() 的内容不会再被使用，所以很 自然地会考虑对其进行回收。\n```\n- 闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此 没有被回收。谁在使用这个内部作用域?原来是 bar() 本身在使用。bar()拥有涵盖 foo() 内部作用域的闭包,使得该作用域能够一直存活，以供 bar() 在之后任何时间进行引用。\n###### bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。\n- 这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的\n词法作用域。\n###### 无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到 闭包。\n```javascript   \nfunction foo() {\n    var a = 2;\n    function baz() {\n        console.log(a) //2\n    }\n    bar(baz)\n}\nfunction bar(fn) {\n    fn()\n}\n//把内部函数 baz 传递给 bar，当调用这个内部函数时(现在叫作 fn)，它涵盖的 foo()内部作用域的闭包就可以观察到了，因为它能够访问 a。\n\n\n\nvar fn;\nfunction foo() {\n    var a = 2;\n    function baz() {\n        console.log(a)\n    }\n    fn = baz;//将 baz 分配给全局变量\n}\nfunction bar() {\n    fn() //这就是闭包!\n}\nfoo()\nbar() //2\n//无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用 域的引用，无论在何处执行这个函数都会使用闭包。\n```\n##### 经典\n```javascript\nfunction wait(message) {\n    setTimeout(function timer() {\n        console.log(message)\n    },1000)\n} \nwait('hello , closure ')  \n```\n将一个内部函数(名为 timer)传递给 setTimeout(..)。timer 具有涵盖 wait(..) 作用域\n的闭包，因此还保有对变量 message 的引用。\nwait(..) 执行 1000 毫秒后，它的内部作用域并不会消失，timer 函数依然保有 wait(..)作用域的闭包。\n深入到引擎的内部原理中，内置的工具函数 setTimeout(..) 持有对一个参数的引用，这个 参数也许叫作 fn 或者 func，或者其他类似的名字。引擎会调用这个函数，在例子中就是 内部的 timer 函数，而词法作用域在这个过程中保持完整。\n`这就是闭包`\n\n```javascript\nfunction setupBot(name,selector) {\n    $(selector).click(function activator() {\n        console.log(name)\n    })\n}\n setupBot( \"Closure Bot 1\", \"#bot_1\" );\n     setupBot( \"Closure Bot 2\", \"#bot_2\" );\n```\n###### 如果将函数(访问它们各自的词法作用域)当作第一 级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步(或者同步)任务中，只要使 用了回调函数，实际上就是在使用闭包!通常认为 IIFE 是典型的闭包例子.\n```javascript\nvar a = 2;\n(function IIEF() {\n    console.log(a)\n})()\n//这段代码可以正常工作，但严格来讲它并不是闭包。因为函数(示例代码中 的 IIFE)并不是在它本身的词法作用域以外执行的。它在定义时所在的作用域中执行(而外部作用域，也就是全局作用域也持有a)。a 是通过普通的词法作用域查找而非闭包被发现的。\n```\n##### 循环和闭包--for循环\n```javascript  \nfor(var i = 1 ;i<=5; i++) {\n    setTimeout(function timer() {\n        console.log(i)\n    },1000)\n} //6,6,6,6,6\n//这个循环的终止条件是 i 不再 <=5。条件首次成立时 i 的值是 6。因此，输出显示的是循环结束时 i 的最终值。\n//延迟函数的回调会在循环结束时才执行。事实上， 当定时器运行时即使每个迭代中执行的是setTimeout(.., 0)，所有的回调函数依然是在循环结束后才会被执行，因此会每次输出一个 6 出来。\n```\n- \n缺陷是我们试图假设循环中的每个迭代在运行时都会给自己“捕获”一个 i 的副本。但是 根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的， 但是它们都被封闭在一个共享的全局作用域中，因此实际上只有一个 i。\n- 这样说的话，当然所有函数共享一个 i 的引用。循环结构让我们误以为背后还有更复杂的 机制在起作用，但实际上没有。如果将延迟函数的回调重复定义五次，完全不使用循环， 那它同这段代码是完全等价的。\n- 缺陷是什么?我们需要更多的闭包作用域，特别是在循环的过程中每个迭代都需要一个闭包作用域。\n\n\n###### IIFE 会通过声明并立即执行一个函数来创建作用域。\n- IIEF如果作用域是空的，那么将它进行封闭是没有效果的，需要有一点实质内容才可以。\n```javascript  \nfor(var i = 1 ; i<=5; i++) {\n    (function (i) {\n        setTimeout(function timer() {\n            console.log(i)\n        },i*1000)\n    })(i)\n} \n//在迭代内使用 IIFE 会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。\n```\n\n##### let劫持块作用域--并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）\n```javascript   \nfor(let i = 1; i<= 5; i++) {\n    setTimeout(function timer() {\n        console.log(i)\n    },i*1000)\n}\n```\n\n\n##### 模块\n```javascript\nfunction foo() {\n    var something = 'cool'\n    var other = [1,2,3]\n    function doSomething() {\n        console.log(something)\n    }\n    function doOther() {\n        console.log(other.join('!'))\n    }\n}\n//这里并没有明显的闭包，只有两个私有数据变量 something 和 other，以及 doSomething() 和 doOther() 两个内部函数，它们的词法作用域(而这 就是闭包)也就是 foo() 的内部作用域。\n\nfunction coolModule() {\n    var something = 'study'\n    var other = [1,2,3]\n    function doSomething() {\n        console.log(something)\n    }\n    function doOther() {\n        console.log(other.join('!'))\n    }\n    return {\n        doSomething:doSomething,\n        doOther : doOther\n    }\n}\nvar person = coolModule()\nperson.doSomething()\nperson.doOther()\n//这个模式在 JavaScript 中被称为模块。最常见的实现模块模式的方法通常被称为模块暴露， 这里展示的是其变体。\n/*\n分析：\n1.coolModule()是一个函数，必须要通过调用他来创建一个模块实例，不执行外部函数，内部作用域和闭包都无法被创建\n2.coolModule()返回的是一个对象字面量语法{key:value,...}来表示的对象。这 个返回的对象中含有对内部函数而不是内部数据变量的引用。我们保持内部数据变量是隐 藏且私有的状态。可以将这个对象类型的返回值看作本质上是模块的公共 API。\n3.这个对象类型的返回值最终被赋值给外部的变量 foo，然后就可以通过它来访问 API 中的 属性方法，比如 foo.doSomething()。\n4.doSomething() 和 doAnother() 函数具有涵盖模块实例内部作用域的闭包(通过调用 CoolModule() 实现)。当通过返回一个含有属性引用的对象的方式来将函数传递到词法作 用域外部时，我们已经创造了可以观察和实践闭包的条件。\n*/\n```\n> 从模块中返回一个实际的对象并不是必须的，也可以直接返回一个内部函 数。jQuery 就是一个很好的例子。jQuery 和 $ 标识符就是 jQuery 模块的公 共 API，但它们本身都是函数(由于函数也是对象，它们本身也可以拥有属性)。\n\n\n###### 模块模式需要具备两个必要条件\n1. 必须有外部的封闭函数，该函数必须至少被调用一次(每次调用都会创建一个新的模块 实例)\n2. 封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。\n- 一个具有函数属性的对象本身并不是真正的模块。从方便观察的角度看，一个从函数调用 所返回的，只有数据属性而没有闭包函数的对象并不是真正的模块\n\n上一个示例代码中有一个叫作 CoolModule() 的独立的模块创建器，可以被调用任意多次， 每次调用都会创建一个新的模块实例。当只需要一个实例时，可以对这个模式进行简单的 改进来实现`单例模式`:\n```javascript\nvar foo = (function coolModuel() {\n    var something = 'study'\n    var other = [1,2,3]\n    function doSomething() {\n        console.log(something)\n    }\n    function doOther() {\n        console.log(other.join('!'))\n    }\n    return {\n        doSomething:doSomething,\n        doOther:doOther\n    }\n})()\nfoo.doSomething()\nfoo.doOther()\n//我们将模块函数转换成了 IIFE立即调用这个函数并将返回值直接赋值给 单例的模块实例标识符 foo。\n```\n模块也是普通的函数，因此可以接受参数:\n```javascript\nfunction coolModule(id) {\n    function identify() {\n        console.log(id)\n    }return{\n        identify:identify\n    }\n}\nvar person1 = coolModule('teacher')\nvar person2 = coolModule('doctor')\nperson1.identify() //teacher\nperson2.identify() //doctor\n```\n- 模块模式另一个简单但强大的变化用法是，命名将要作为公共 API 返回的对象:\n```javascript\nvar foo = (function coolModule(id) {\n    function change() {\n        // 修改公共 API\n        publicAPI.identify = identify2\n    }\n    function identify1() {\n        console.log(id)\n    }\n    function identify2() {\n        console.log(id.toUpperCase())\n    }\n    var publicAPI = {\n        change:change,\n        identify:identify1\n    }\n    return publicAPI\n  \n})('foo person')\n    foo.identify()//foo person\n    foo.change()\n    foo.identify()//FOO PERSON\n//通过在模块实例的内部保留对公共 API 对象的内部引用，可以从内部对模块实例进行修 改，包括添加或删除方法和属性，以及修改它们的值。\n```\n\n##### 现代的模块机制\n- 大多数模块依赖加载器 / 管理器本质上都是将这种模块定义封装进一个友好的 API。\n```javascript\nvar myModules = (function Manager() {\n    var modules = {}\n    function define(name,deps,impl) {\n        for(var i = 0; i<deps.length;i++) {\n            deps[i] = modules[deps[i]]\n        }\n        modules[name] = impl.apply(impl,deps)\n    }\n    function get(name) {\n        return modules[name]\n    }\n    return {\n        define:define,\n        get:get\n    }\n})()\n//这段代码的核心是 modules[name] = impl.apply(impl, deps)。为了模块的定义引入了包装函数(可以传入任何依赖)，并且将返回值，也就是模块的 API，储存在一个根据名字来管 理的模块列表中。\n```\n下面展示了如何使用它来定义模块:\n```javascript\nmyModules.define('bar',[],function() {\n    function hello(who) {\n        return 'let'+who\n    }\n    return {\n        hello:hello\n    }\n})\nmyModules.define('foo',['bar'],function(bar) {\n    var hungry = 'hippo';\n    function awesome() {\n        console.log(bar.hello(hungry).toUpperCase())\n    }\n    return{\n        awesome:awesome\n    }\n})\nvar bar = myModules.get('bar')\nvar foo = myModules.get('foo')\nconsole.log(bar.hello('hippo'))//Let hippo\n//\"foo\" 和 \"bar\" 模块都是通过一个返回公共 API 的函数来定义的。\"foo\" 甚至接受 \"bar\" 的 示例作为依赖参数，并能相应地使用它。\n```\n- 模块管理器:为函数定义引入包装函数，并保证它的返回值和模块的 API 保持一致\n- 模块就是模块，即使在它们外层加上一个友好的包装工具也不会发生任何变化。\n> 基于函数的模块并不是一个能被稳定识别的模式(编译器无法识别)，它们 的 API 语义只有在运行时才会被考虑进来。因此可以在运行时修改一个模块 的 API(参考前面关于公共 API 的讨论)。\n> 相比之下，ES6 模块 API 更加稳定(API 不会在运行时改变)。由于编辑器知 道这一点，因此可以在(的确也这样做了)编译期检查对导入模块的 API 成 员的引用是否真实存在。如果 API 引用并不存在，编译器会在运行时抛出一 个或多个“早期”错误，而不会像往常一样在运行期采用动态的解决方案.\n- ES6 的模块没有“行内”格式，必须被定义在独立的文件中(一个文件一个模块)。浏览 器或引擎有一个默认的“模块加载器”(可以被重载)可以在导入模块时异步地加载模块文件。\n\n```javascript\n//bar.js\nfunction hello(who) {\n    return 'Let me ' + who\n}\nexport hello\n\n//foo.js\n// 仅从 \"bar\" 模块导入 hello()\nimport hello from 'bar'\nvar hungry = 'hippo'\nfunction awesome() {\n    console.log(hello(hungry).toUpperCase())\n}\nexport awesome\n//baz.js\n// 导入完整的 \"foo\" 和 \"bar\" 模块\nmodule foo from 'foo'\nmodule bar from 'bar'\nconsole.log(bar.hello('rhino'))\n// Let me  rhino\n     foo.awesome();\n// LET ME : HIPPO\n//需要用前面两个代码片段中的内容分别创建文件 foo.js 和 bar.js。然后如第三 个代码片段中展示的那样，bar.js 中的程序会加载或导入这两个模块并使用 它们。\n\n\n```\n###### import 可以将一个模块中的一个或多个 API 导入到当前作用域中，并分别绑定在一个变量 上(在我们的例子里是 hello)。module 会将整个模块的 API 导入并绑定到一个变量上(在 我们的例子里是 foo 和 bar)。export 会将当前模块的一个标识符(变量、函数)导出为公 共 API。这些操作可以在模块定义中根据需要使用任意多次。\n###### 模块文件中的内容会被当作好像包含在作用域闭包中一样来处理\n\n##### 模块\n1. 为创建内部作用域而调用了一个包装函数。\n2. 包装函数的返回 值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。\n\n> JavaScript 中的作用域就是词法 作用域(事实上大部分语言都是基于词法作用域的)\n> 词法作用域是一套关于引擎如何寻找变量以及会在何处找到变量的规则。词法作用域最重要的特征是它的定义过程发生在代码的书写阶段(假设你没有使用 eval() 或 with)。\n\n```javascript\nfunction foo() {\n    console.log(a) //2\n}\nfunction bar() {\n    var a = 3\n    foo()\n}\nvar a = 2;\nbar()\n//词法作用域让 foo() 中的 a 通过 RHS 引用到了全局作用域中的 a，因此会输出 2。\n/*\n动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调 用。换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。\n事实上 JavaScript 并不具有动态作用域。它只有词法作用域，简单明了。 但是 this 机制某种程度上很像动态作用域。\n\n*/\n```\n\n\n###### 主要区别:\n1. 词法作用域是在写代码或者说定义时确定的，而动态作用域是在运行时确定 的。(this 也是!)词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。\n2. this 关注函数如何调用，这就表明了 this 机制和动态作用域之间的关系多么紧密\n\n\n###### 块作用域，而 with 和 catch 分句就是块作用域的两个小例子\n```javascript\n{\n    let a = 2;\n    console.log(a) //2\n}\nconsole.log(a) //ReferenceError\n\n//参考如下\ntry{\n    throw 2;\n}catch(a) {\n    console.log(a)\n}\nconsole.log(a) // ReferenceError\n//catch 分句具有块作用域，因此它可以在 ES6 之前的环境中作为块作用域的替代方案。\n```\n-  Traceur 的项目:\n```javascript\n{\n    try{\n        throw undefined\n    }catch(a) {\n        a = 2;\n        console.log(a)\n    }\n}\nconsole.log(a)\n```\n\n##### 隐式和显式作用域\n- let 作用域或 let 声明(\n```javascript\nlet (a = 2) {\n    console.log(2)\n}\n     console.log( a ); // ReferenceError\n```\n> 同隐式地劫持一个已经存在的作用域不同，let 声明会创建一个显示的作用域并与其进行 绑定。显式作用域不仅更加突出，在代码重构时也表现得更加健壮。在语法上，通过强制 性地将所有变量声明提升到块的顶部来产生更简洁的代码。这样更容易判断变量是否属于 某个作用域。\n+ let 声 明有意将变量声明放在块的顶部\n\n##### 箭头函数\n```javascript\nvar foo = a =>{\n    console.log(a)\n}\nfoo(2) //2\n\n\nvar obj = {\n    id:'awesome',\n    cool:function coolFn() {\n        console.log(this.id)\n    }\n}\nvar id = 'no cool'\nobj.cool() //cool\nsetTimeout(obj.cool,100)//no cool\n\n//cool() 函数丢失了同 this 之间的绑定,解决：var self = this ---词法作用域,self 只是一个可以通过 词法作用域和闭包进行引用的标识符，不关心 this 绑定的过程中发生了什么。\nvar obj = {\n    count:0,\n    cool:function () {\n        var self = this;\n        if(self.count < 1) {\n            setTimeout(function () {\n                self.count++;\n            console.log('awesome')\n            },100)\n        }\n    }\n}\nobj.cool()//awesome\n\n\n\n\nvar obj = {\n    count:0,\n    cool:function() {\n        if(this.count <1) {\n            setTimeout(()=>{\n                this.count++;\n                console.log('yes')\n            })\n        }\n    }\n}\nobj.cool() //yes\n\n\nvar obj = {\n    count:0,\n    cool:function() {\n        if(this.count <1) {\n            setTimeout(function() {\n                this.count++;//this是安全的，因为bind()\n                console.log('more awsome')\n            }.bind(this),100)\n        }\n    }\n}\nobj.cool()\n```\n- 箭头函数的this是用当前的词法作用域覆盖了 this 本来的值。\n\n\n\n\n> 《你不知道的javascript上卷》","slug":"闭包","published":1,"updated":"2021-07-01T07:30:54.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqt3wuo9006ozgsyeguzgnxk","content":"<ul>\n<li><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">//2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bar()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = foo();</span><br><span class=\"line\">baz();<span class=\"comment\">//2  闭包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//bar()的词法作用域能够与访问foo()的内部作用域，将bar()函数本身当做一个值类型进行传递（将bar所引用的函数对象本身当做返回值）在foo()执行后，其返回值(bar()函数)赋值给变量baz并调用baz()，实际上只是通过不同的标识符引用调用了内部的函数bar(),bar() 显然可以被正常执行。但是在这个例子中，它在自己定义的词法作用域以外的地方 执行。</span></span><br><span class=\"line\"><span class=\"comment\">//在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，因为我们知道引擎有垃 圾回收器用来释放不再使用的内存空间。由于看上去 foo() 的内容不会再被使用，所以很 自然地会考虑对其进行回收。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此 没有被回收。谁在使用这个内部作用域?原来是 bar() 本身在使用。bar()拥有涵盖 foo() 内部作用域的闭包,使得该作用域能够一直存活，以供 bar() 在之后任何时间进行引用。</p>\n<h6 id=\"bar-依然持有对该作用域的引用，而这个引用就叫作闭包。\"><a href=\"#bar-依然持有对该作用域的引用，而这个引用就叫作闭包。\" class=\"headerlink\" title=\"bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。\"></a>bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。</h6></li>\n<li>这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的<br>词法作用域。<h6 id=\"无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到-闭包。\"><a href=\"#无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到-闭包。\" class=\"headerlink\" title=\"无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到 闭包。\"></a>无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到 闭包。</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bar(baz)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//把内部函数 baz 传递给 bar，当调用这个内部函数时(现在叫作 fn)，它涵盖的 foo()内部作用域的闭包就可以观察到了，因为它能够访问 a。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn = baz;<span class=\"comment\">//将 baz 分配给全局变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    fn() <span class=\"comment\">//这就是闭包!</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\">bar() <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用 域的引用，无论在何处执行这个函数都会使用闭包。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"经典\"><a href=\"#经典\" class=\"headerlink\" title=\"经典\"></a>经典</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wait</span>(<span class=\"params\">message</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(message)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">wait(<span class=\"string\">'hello , closure '</span>)</span><br></pre></td></tr></table></figure>\n<p>将一个内部函数(名为 timer)传递给 setTimeout(..)。timer 具有涵盖 wait(..) 作用域<br>的闭包，因此还保有对变量 message 的引用。<br>wait(..) 执行 1000 毫秒后，它的内部作用域并不会消失，timer 函数依然保有 wait(..)作用域的闭包。<br>深入到引擎的内部原理中，内置的工具函数 setTimeout(..) 持有对一个参数的引用，这个 参数也许叫作 fn 或者 func，或者其他类似的名字。引擎会调用这个函数，在例子中就是 内部的 timer 函数，而词法作用域在这个过程中保持完整。<br><code>这就是闭包</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setupBot</span>(<span class=\"params\">name,selector</span>) </span>&#123;</span><br><span class=\"line\">    $(selector).click(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> setupBot( <span class=\"string\">\"Closure Bot 1\"</span>, <span class=\"string\">\"#bot_1\"</span> );</span><br><span class=\"line\">     setupBot( <span class=\"string\">\"Closure Bot 2\"</span>, <span class=\"string\">\"#bot_2\"</span> );</span><br></pre></td></tr></table></figure>\n<h6 id=\"如果将函数-访问它们各自的词法作用域-当作第一-级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、-Ajax-请求、跨窗口通信、Web-Workers-或者任何其他的异步-或者同步-任务中，只要使-用了回调函数，实际上就是在使用闭包-通常认为-IIFE-是典型的闭包例子\"><a href=\"#如果将函数-访问它们各自的词法作用域-当作第一-级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、-Ajax-请求、跨窗口通信、Web-Workers-或者任何其他的异步-或者同步-任务中，只要使-用了回调函数，实际上就是在使用闭包-通常认为-IIFE-是典型的闭包例子\" class=\"headerlink\" title=\"如果将函数(访问它们各自的词法作用域)当作第一 级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步(或者同步)任务中，只要使 用了回调函数，实际上就是在使用闭包!通常认为 IIFE 是典型的闭包例子.\"></a>如果将函数(访问它们各自的词法作用域)当作第一 级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步(或者同步)任务中，只要使 用了回调函数，实际上就是在使用闭包!通常认为 IIFE 是典型的闭包例子.</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIEF</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"><span class=\"comment\">//这段代码可以正常工作，但严格来讲它并不是闭包。因为函数(示例代码中 的 IIFE)并不是在它本身的词法作用域以外执行的。它在定义时所在的作用域中执行(而外部作用域，也就是全局作用域也持有a)。a 是通过普通的词法作用域查找而非闭包被发现的。</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"循环和闭包–for循环\"><a href=\"#循环和闭包–for循环\" class=\"headerlink\" title=\"循环和闭包–for循环\"></a>循环和闭包–for循环</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span> ;i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125; <span class=\"comment\">//6,6,6,6,6</span></span><br><span class=\"line\"><span class=\"comment\">//这个循环的终止条件是 i 不再 &lt;=5。条件首次成立时 i 的值是 6。因此，输出显示的是循环结束时 i 的最终值。</span></span><br><span class=\"line\"><span class=\"comment\">//延迟函数的回调会在循环结束时才执行。事实上， 当定时器运行时即使每个迭代中执行的是setTimeout(.., 0)，所有的回调函数依然是在循环结束后才会被执行，因此会每次输出一个 6 出来。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺陷是我们试图假设循环中的每个迭代在运行时都会给自己“捕获”一个 i 的副本。但是 根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的， 但是它们都被封闭在一个共享的全局作用域中，因此实际上只有一个 i。</li>\n<li>这样说的话，当然所有函数共享一个 i 的引用。循环结构让我们误以为背后还有更复杂的 机制在起作用，但实际上没有。如果将延迟函数的回调重复定义五次，完全不使用循环， 那它同这段代码是完全等价的。</li>\n<li>缺陷是什么?我们需要更多的闭包作用域，特别是在循环的过程中每个迭代都需要一个闭包作用域。</li>\n</ul>\n<h6 id=\"IIFE-会通过声明并立即执行一个函数来创建作用域。\"><a href=\"#IIFE-会通过声明并立即执行一个函数来创建作用域。\" class=\"headerlink\" title=\"IIFE 会通过声明并立即执行一个函数来创建作用域。\"></a>IIFE 会通过声明并立即执行一个函数来创建作用域。</h6><ul>\n<li>IIEF如果作用域是空的，那么将它进行封闭是没有效果的，需要有一点实质内容才可以。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span> ; i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">        &#125;,i*<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//在迭代内使用 IIFE 会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"let劫持块作用域–并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）\"><a href=\"#let劫持块作用域–并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）\" class=\"headerlink\" title=\"let劫持块作用域–并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）\"></a>let劫持块作用域–并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i&lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;,i*<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> something = <span class=\"string\">'cool'</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> other = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(something)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOther</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(other.join(<span class=\"string\">'!'</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这里并没有明显的闭包，只有两个私有数据变量 something 和 other，以及 doSomething() 和 doOther() 两个内部函数，它们的词法作用域(而这 就是闭包)也就是 foo() 的内部作用域。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">coolModule</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> something = <span class=\"string\">'study'</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> other = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(something)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOther</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(other.join(<span class=\"string\">'!'</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        doSomething:doSomething,</span><br><span class=\"line\">        doOther : doOther</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = coolModule()</span><br><span class=\"line\">person.doSomething()</span><br><span class=\"line\">person.doOther()</span><br><span class=\"line\"><span class=\"comment\">//这个模式在 JavaScript 中被称为模块。最常见的实现模块模式的方法通常被称为模块暴露， 这里展示的是其变体。</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">分析：</span></span><br><span class=\"line\"><span class=\"comment\">1.coolModule()是一个函数，必须要通过调用他来创建一个模块实例，不执行外部函数，内部作用域和闭包都无法被创建</span></span><br><span class=\"line\"><span class=\"comment\">2.coolModule()返回的是一个对象字面量语法&#123;key:value,...&#125;来表示的对象。这 个返回的对象中含有对内部函数而不是内部数据变量的引用。我们保持内部数据变量是隐 藏且私有的状态。可以将这个对象类型的返回值看作本质上是模块的公共 API。</span></span><br><span class=\"line\"><span class=\"comment\">3.这个对象类型的返回值最终被赋值给外部的变量 foo，然后就可以通过它来访问 API 中的 属性方法，比如 foo.doSomething()。</span></span><br><span class=\"line\"><span class=\"comment\">4.doSomething() 和 doAnother() 函数具有涵盖模块实例内部作用域的闭包(通过调用 CoolModule() 实现)。当通过返回一个含有属性引用的对象的方式来将函数传递到词法作 用域外部时，我们已经创造了可以观察和实践闭包的条件。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从模块中返回一个实际的对象并不是必须的，也可以直接返回一个内部函 数。jQuery 就是一个很好的例子。jQuery 和 $ 标识符就是 jQuery 模块的公 共 API，但它们本身都是函数(由于函数也是对象，它们本身也可以拥有属性)。</p>\n</blockquote>\n<h6 id=\"模块模式需要具备两个必要条件\"><a href=\"#模块模式需要具备两个必要条件\" class=\"headerlink\" title=\"模块模式需要具备两个必要条件\"></a>模块模式需要具备两个必要条件</h6><ol>\n<li>必须有外部的封闭函数，该函数必须至少被调用一次(每次调用都会创建一个新的模块 实例)</li>\n<li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</li>\n</ol>\n<ul>\n<li>一个具有函数属性的对象本身并不是真正的模块。从方便观察的角度看，一个从函数调用 所返回的，只有数据属性而没有闭包函数的对象并不是真正的模块</li>\n</ul>\n<p>上一个示例代码中有一个叫作 CoolModule() 的独立的模块创建器，可以被调用任意多次， 每次调用都会创建一个新的模块实例。当只需要一个实例时，可以对这个模式进行简单的 改进来实现<code>单例模式</code>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">coolModuel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> something = <span class=\"string\">'study'</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> other = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(something)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOther</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(other.join(<span class=\"string\">'!'</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        doSomething:doSomething,</span><br><span class=\"line\">        doOther:doOther</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">foo.doSomething()</span><br><span class=\"line\">foo.doOther()</span><br><span class=\"line\"><span class=\"comment\">//我们将模块函数转换成了 IIFE立即调用这个函数并将返回值直接赋值给 单例的模块实例标识符 foo。</span></span><br></pre></td></tr></table></figure></p>\n<p>模块也是普通的函数，因此可以接受参数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">coolModule</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identify</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(id)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        identify:identify</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = coolModule(<span class=\"string\">'teacher'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = coolModule(<span class=\"string\">'doctor'</span>)</span><br><span class=\"line\">person1.identify() <span class=\"comment\">//teacher</span></span><br><span class=\"line\">person2.identify() <span class=\"comment\">//doctor</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>模块模式另一个简单但强大的变化用法是，命名将要作为公共 API 返回的对象:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">coolModule</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 修改公共 API</span></span><br><span class=\"line\">        publicAPI.identify = identify2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identify1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identify2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(id.toUpperCase())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> publicAPI = &#123;</span><br><span class=\"line\">        change:change,</span><br><span class=\"line\">        identify:identify1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> publicAPI</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)(<span class=\"string\">'foo person'</span>)</span><br><span class=\"line\">    foo.identify()<span class=\"comment\">//foo person</span></span><br><span class=\"line\">    foo.change()</span><br><span class=\"line\">    foo.identify()<span class=\"comment\">//FOO PERSON</span></span><br><span class=\"line\"><span class=\"comment\">//通过在模块实例的内部保留对公共 API 对象的内部引用，可以从内部对模块实例进行修 改，包括添加或删除方法和属性，以及修改它们的值。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"现代的模块机制\"><a href=\"#现代的模块机制\" class=\"headerlink\" title=\"现代的模块机制\"></a>现代的模块机制</h5><ul>\n<li>大多数模块依赖加载器 / 管理器本质上都是将这种模块定义封装进一个友好的 API。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myModules = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Manager</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> modules = &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">define</span>(<span class=\"params\">name,deps,impl</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt;deps.length;i++) &#123;</span><br><span class=\"line\">            deps[i] = modules[deps[i]]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        modules[name] = impl.apply(impl,deps)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modules[name]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        define:define,</span><br><span class=\"line\">        get:get</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"><span class=\"comment\">//这段代码的核心是 modules[name] = impl.apply(impl, deps)。为了模块的定义引入了包装函数(可以传入任何依赖)，并且将返回值，也就是模块的 API，储存在一个根据名字来管 理的模块列表中。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>下面展示了如何使用它来定义模块:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myModules.define(<span class=\"string\">'bar'</span>,[],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">who</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'let'</span>+who</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        hello:hello</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">myModules.define(<span class=\"string\">'foo'</span>,[<span class=\"string\">'bar'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bar</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hungry = <span class=\"string\">'hippo'</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">awesome</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(bar.hello(hungry).toUpperCase())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        awesome:awesome</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = myModules.get(<span class=\"string\">'bar'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = myModules.get(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar.hello(<span class=\"string\">'hippo'</span>))<span class=\"comment\">//Let hippo</span></span><br><span class=\"line\"><span class=\"comment\">//\"foo\" 和 \"bar\" 模块都是通过一个返回公共 API 的函数来定义的。\"foo\" 甚至接受 \"bar\" 的 示例作为依赖参数，并能相应地使用它。</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>模块管理器:为函数定义引入包装函数，并保证它的返回值和模块的 API 保持一致</li>\n<li>模块就是模块，即使在它们外层加上一个友好的包装工具也不会发生任何变化。<blockquote>\n<p>基于函数的模块并不是一个能被稳定识别的模式(编译器无法识别)，它们 的 API 语义只有在运行时才会被考虑进来。因此可以在运行时修改一个模块 的 API(参考前面关于公共 API 的讨论)。<br>相比之下，ES6 模块 API 更加稳定(API 不会在运行时改变)。由于编辑器知 道这一点，因此可以在(的确也这样做了)编译期检查对导入模块的 API 成 员的引用是否真实存在。如果 API 引用并不存在，编译器会在运行时抛出一 个或多个“早期”错误，而不会像往常一样在运行期采用动态的解决方案.</p>\n</blockquote>\n</li>\n<li>ES6 的模块没有“行内”格式，必须被定义在独立的文件中(一个文件一个模块)。浏览 器或引擎有一个默认的“模块加载器”(可以被重载)可以在导入模块时异步地加载模块文件。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bar.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">who</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Let me '</span> + who</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> hello</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//foo.js</span></span><br><span class=\"line\"><span class=\"comment\">// 仅从 \"bar\" 模块导入 hello()</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> hello <span class=\"keyword\">from</span> <span class=\"string\">'bar'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hungry = <span class=\"string\">'hippo'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">awesome</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(hello(hungry).toUpperCase())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> awesome</span><br><span class=\"line\"><span class=\"comment\">//baz.js</span></span><br><span class=\"line\"><span class=\"comment\">// 导入完整的 \"foo\" 和 \"bar\" 模块</span></span><br><span class=\"line\"><span class=\"built_in\">module</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'foo'</span></span><br><span class=\"line\"><span class=\"built_in\">module</span> bar <span class=\"keyword\">from</span> <span class=\"string\">'bar'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar.hello(<span class=\"string\">'rhino'</span>))</span><br><span class=\"line\"><span class=\"comment\">// Let me  rhino</span></span><br><span class=\"line\">     foo.awesome();</span><br><span class=\"line\"><span class=\"comment\">// LET ME : HIPPO</span></span><br><span class=\"line\"><span class=\"comment\">//需要用前面两个代码片段中的内容分别创建文件 foo.js 和 bar.js。然后如第三 个代码片段中展示的那样，bar.js 中的程序会加载或导入这两个模块并使用 它们。</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"import-可以将一个模块中的一个或多个-API-导入到当前作用域中，并分别绑定在一个变量-上-在我们的例子里是-hello-。module-会将整个模块的-API-导入并绑定到一个变量上-在-我们的例子里是-foo-和-bar-。export-会将当前模块的一个标识符-变量、函数-导出为公-共-API。这些操作可以在模块定义中根据需要使用任意多次。\"><a href=\"#import-可以将一个模块中的一个或多个-API-导入到当前作用域中，并分别绑定在一个变量-上-在我们的例子里是-hello-。module-会将整个模块的-API-导入并绑定到一个变量上-在-我们的例子里是-foo-和-bar-。export-会将当前模块的一个标识符-变量、函数-导出为公-共-API。这些操作可以在模块定义中根据需要使用任意多次。\" class=\"headerlink\" title=\"import 可以将一个模块中的一个或多个 API 导入到当前作用域中，并分别绑定在一个变量 上(在我们的例子里是 hello)。module 会将整个模块的 API 导入并绑定到一个变量上(在 我们的例子里是 foo 和 bar)。export 会将当前模块的一个标识符(变量、函数)导出为公 共 API。这些操作可以在模块定义中根据需要使用任意多次。\"></a>import 可以将一个模块中的一个或多个 API 导入到当前作用域中，并分别绑定在一个变量 上(在我们的例子里是 hello)。module 会将整个模块的 API 导入并绑定到一个变量上(在 我们的例子里是 foo 和 bar)。export 会将当前模块的一个标识符(变量、函数)导出为公 共 API。这些操作可以在模块定义中根据需要使用任意多次。</h6><h6 id=\"模块文件中的内容会被当作好像包含在作用域闭包中一样来处理\"><a href=\"#模块文件中的内容会被当作好像包含在作用域闭包中一样来处理\" class=\"headerlink\" title=\"模块文件中的内容会被当作好像包含在作用域闭包中一样来处理\"></a>模块文件中的内容会被当作好像包含在作用域闭包中一样来处理</h6><h5 id=\"模块-1\"><a href=\"#模块-1\" class=\"headerlink\" title=\"模块\"></a>模块</h5><ol>\n<li>为创建内部作用域而调用了一个包装函数。</li>\n<li>包装函数的返回 值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。</li>\n</ol>\n<blockquote>\n<p>JavaScript 中的作用域就是词法 作用域(事实上大部分语言都是基于词法作用域的)<br>词法作用域是一套关于引擎如何寻找变量以及会在何处找到变量的规则。词法作用域最重要的特征是它的定义过程发生在代码的书写阶段(假设你没有使用 eval() 或 with)。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">3</span></span><br><span class=\"line\">    foo()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">bar()</span><br><span class=\"line\"><span class=\"comment\">//词法作用域让 foo() 中的 a 通过 RHS 引用到了全局作用域中的 a，因此会输出 2。</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调 用。换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。</span></span><br><span class=\"line\"><span class=\"comment\">事实上 JavaScript 并不具有动态作用域。它只有词法作用域，简单明了。 但是 this 机制某种程度上很像动态作用域。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"主要区别\"><a href=\"#主要区别\" class=\"headerlink\" title=\"主要区别:\"></a>主要区别:</h6><ol>\n<li>词法作用域是在写代码或者说定义时确定的，而动态作用域是在运行时确定 的。(this 也是!)词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。</li>\n<li>this 关注函数如何调用，这就表明了 this 机制和动态作用域之间的关系多么紧密</li>\n</ol>\n<h6 id=\"块作用域，而-with-和-catch-分句就是块作用域的两个小例子\"><a href=\"#块作用域，而-with-和-catch-分句就是块作用域的两个小例子\" class=\"headerlink\" title=\"块作用域，而 with 和 catch 分句就是块作用域的两个小例子\"></a>块作用域，而 with 和 catch 分句就是块作用域的两个小例子</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//参考如下</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(a) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"><span class=\"comment\">//catch 分句具有块作用域，因此它可以在 ES6 之前的环境中作为块作用域的替代方案。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Traceur 的项目:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"literal\">undefined</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(a) &#123;</span><br><span class=\"line\">        a = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"隐式和显式作用域\"><a href=\"#隐式和显式作用域\" class=\"headerlink\" title=\"隐式和显式作用域\"></a>隐式和显式作用域</h5><ul>\n<li>let 作用域或 let 声明(<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> (a = <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>同隐式地劫持一个已经存在的作用域不同，let 声明会创建一个显示的作用域并与其进行 绑定。显式作用域不仅更加突出，在代码重构时也表现得更加健壮。在语法上，通过强制 性地将所有变量声明提升到块的顶部来产生更简洁的代码。这样更容易判断变量是否属于 某个作用域。</p>\n<ul>\n<li>let 声 明有意将变量声明放在块的顶部</li>\n</ul>\n</blockquote>\n<h5 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(<span class=\"number\">2</span>) <span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    id:<span class=\"string\">'awesome'</span>,</span><br><span class=\"line\">    cool:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">coolFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"string\">'no cool'</span></span><br><span class=\"line\">obj.cool() <span class=\"comment\">//cool</span></span><br><span class=\"line\">setTimeout(obj.cool,<span class=\"number\">100</span>)<span class=\"comment\">//no cool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cool() 函数丢失了同 this 之间的绑定,解决：var self = this ---词法作用域,self 只是一个可以通过 词法作用域和闭包进行引用的标识符，不关心 this 绑定的过程中发生了什么。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    count:<span class=\"number\">0</span>,</span><br><span class=\"line\">    cool:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.count &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                self.count++;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'awesome'</span>)</span><br><span class=\"line\">            &#125;,<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.cool()<span class=\"comment\">//awesome</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    count:<span class=\"number\">0</span>,</span><br><span class=\"line\">    cool:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.count &lt;<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.count++;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'yes'</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.cool() <span class=\"comment\">//yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    count:<span class=\"number\">0</span>,</span><br><span class=\"line\">    cool:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.count &lt;<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.count++;<span class=\"comment\">//this是安全的，因为bind()</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'more awsome'</span>)</span><br><span class=\"line\">            &#125;.bind(<span class=\"keyword\">this</span>),<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.cool()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>箭头函数的this是用当前的词法作用域覆盖了 this 本来的值。</li>\n</ul>\n<blockquote>\n<p>《你不知道的javascript上卷》</p>\n</blockquote>\n","site":{"data":{"styles":"body {\n  background: url(\"/images/background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: 50% 50%;\n}\n.post {\n  margin-top: 60px;\n  margin-bottom: 60px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 5px rgba(202,203,203,0.5);\n  -moz-box-shadow: 0 0 5px rgba(202,203,204,0.5);\n}\ncode {\n  color: #ff7600;\n  background: #fbf7f8;\n  margin: 2px;\n}\n"}},"excerpt":"","more":"<ul>\n<li><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">//2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bar()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = foo();</span><br><span class=\"line\">baz();<span class=\"comment\">//2  闭包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//bar()的词法作用域能够与访问foo()的内部作用域，将bar()函数本身当做一个值类型进行传递（将bar所引用的函数对象本身当做返回值）在foo()执行后，其返回值(bar()函数)赋值给变量baz并调用baz()，实际上只是通过不同的标识符引用调用了内部的函数bar(),bar() 显然可以被正常执行。但是在这个例子中，它在自己定义的词法作用域以外的地方 执行。</span></span><br><span class=\"line\"><span class=\"comment\">//在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，因为我们知道引擎有垃 圾回收器用来释放不再使用的内存空间。由于看上去 foo() 的内容不会再被使用，所以很 自然地会考虑对其进行回收。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此 没有被回收。谁在使用这个内部作用域?原来是 bar() 本身在使用。bar()拥有涵盖 foo() 内部作用域的闭包,使得该作用域能够一直存活，以供 bar() 在之后任何时间进行引用。</p>\n<h6 id=\"bar-依然持有对该作用域的引用，而这个引用就叫作闭包。\"><a href=\"#bar-依然持有对该作用域的引用，而这个引用就叫作闭包。\" class=\"headerlink\" title=\"bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。\"></a>bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。</h6></li>\n<li>这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的<br>词法作用域。<h6 id=\"无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到-闭包。\"><a href=\"#无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到-闭包。\" class=\"headerlink\" title=\"无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到 闭包。\"></a>无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到 闭包。</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bar(baz)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//把内部函数 baz 传递给 bar，当调用这个内部函数时(现在叫作 fn)，它涵盖的 foo()内部作用域的闭包就可以观察到了，因为它能够访问 a。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn = baz;<span class=\"comment\">//将 baz 分配给全局变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    fn() <span class=\"comment\">//这就是闭包!</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\">bar() <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用 域的引用，无论在何处执行这个函数都会使用闭包。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"经典\"><a href=\"#经典\" class=\"headerlink\" title=\"经典\"></a>经典</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wait</span>(<span class=\"params\">message</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(message)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">wait(<span class=\"string\">'hello , closure '</span>)</span><br></pre></td></tr></table></figure>\n<p>将一个内部函数(名为 timer)传递给 setTimeout(..)。timer 具有涵盖 wait(..) 作用域<br>的闭包，因此还保有对变量 message 的引用。<br>wait(..) 执行 1000 毫秒后，它的内部作用域并不会消失，timer 函数依然保有 wait(..)作用域的闭包。<br>深入到引擎的内部原理中，内置的工具函数 setTimeout(..) 持有对一个参数的引用，这个 参数也许叫作 fn 或者 func，或者其他类似的名字。引擎会调用这个函数，在例子中就是 内部的 timer 函数，而词法作用域在这个过程中保持完整。<br><code>这就是闭包</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setupBot</span>(<span class=\"params\">name,selector</span>) </span>&#123;</span><br><span class=\"line\">    $(selector).click(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> setupBot( <span class=\"string\">\"Closure Bot 1\"</span>, <span class=\"string\">\"#bot_1\"</span> );</span><br><span class=\"line\">     setupBot( <span class=\"string\">\"Closure Bot 2\"</span>, <span class=\"string\">\"#bot_2\"</span> );</span><br></pre></td></tr></table></figure>\n<h6 id=\"如果将函数-访问它们各自的词法作用域-当作第一-级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、-Ajax-请求、跨窗口通信、Web-Workers-或者任何其他的异步-或者同步-任务中，只要使-用了回调函数，实际上就是在使用闭包-通常认为-IIFE-是典型的闭包例子\"><a href=\"#如果将函数-访问它们各自的词法作用域-当作第一-级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、-Ajax-请求、跨窗口通信、Web-Workers-或者任何其他的异步-或者同步-任务中，只要使-用了回调函数，实际上就是在使用闭包-通常认为-IIFE-是典型的闭包例子\" class=\"headerlink\" title=\"如果将函数(访问它们各自的词法作用域)当作第一 级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步(或者同步)任务中，只要使 用了回调函数，实际上就是在使用闭包!通常认为 IIFE 是典型的闭包例子.\"></a>如果将函数(访问它们各自的词法作用域)当作第一 级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步(或者同步)任务中，只要使 用了回调函数，实际上就是在使用闭包!通常认为 IIFE 是典型的闭包例子.</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIEF</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"><span class=\"comment\">//这段代码可以正常工作，但严格来讲它并不是闭包。因为函数(示例代码中 的 IIFE)并不是在它本身的词法作用域以外执行的。它在定义时所在的作用域中执行(而外部作用域，也就是全局作用域也持有a)。a 是通过普通的词法作用域查找而非闭包被发现的。</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"循环和闭包–for循环\"><a href=\"#循环和闭包–for循环\" class=\"headerlink\" title=\"循环和闭包–for循环\"></a>循环和闭包–for循环</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span> ;i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125; <span class=\"comment\">//6,6,6,6,6</span></span><br><span class=\"line\"><span class=\"comment\">//这个循环的终止条件是 i 不再 &lt;=5。条件首次成立时 i 的值是 6。因此，输出显示的是循环结束时 i 的最终值。</span></span><br><span class=\"line\"><span class=\"comment\">//延迟函数的回调会在循环结束时才执行。事实上， 当定时器运行时即使每个迭代中执行的是setTimeout(.., 0)，所有的回调函数依然是在循环结束后才会被执行，因此会每次输出一个 6 出来。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺陷是我们试图假设循环中的每个迭代在运行时都会给自己“捕获”一个 i 的副本。但是 根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的， 但是它们都被封闭在一个共享的全局作用域中，因此实际上只有一个 i。</li>\n<li>这样说的话，当然所有函数共享一个 i 的引用。循环结构让我们误以为背后还有更复杂的 机制在起作用，但实际上没有。如果将延迟函数的回调重复定义五次，完全不使用循环， 那它同这段代码是完全等价的。</li>\n<li>缺陷是什么?我们需要更多的闭包作用域，特别是在循环的过程中每个迭代都需要一个闭包作用域。</li>\n</ul>\n<h6 id=\"IIFE-会通过声明并立即执行一个函数来创建作用域。\"><a href=\"#IIFE-会通过声明并立即执行一个函数来创建作用域。\" class=\"headerlink\" title=\"IIFE 会通过声明并立即执行一个函数来创建作用域。\"></a>IIFE 会通过声明并立即执行一个函数来创建作用域。</h6><ul>\n<li>IIEF如果作用域是空的，那么将它进行封闭是没有效果的，需要有一点实质内容才可以。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span> ; i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">        &#125;,i*<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//在迭代内使用 IIFE 会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"let劫持块作用域–并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）\"><a href=\"#let劫持块作用域–并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）\" class=\"headerlink\" title=\"let劫持块作用域–并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）\"></a>let劫持块作用域–并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i&lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;,i*<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> something = <span class=\"string\">'cool'</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> other = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(something)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOther</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(other.join(<span class=\"string\">'!'</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这里并没有明显的闭包，只有两个私有数据变量 something 和 other，以及 doSomething() 和 doOther() 两个内部函数，它们的词法作用域(而这 就是闭包)也就是 foo() 的内部作用域。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">coolModule</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> something = <span class=\"string\">'study'</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> other = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(something)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOther</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(other.join(<span class=\"string\">'!'</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        doSomething:doSomething,</span><br><span class=\"line\">        doOther : doOther</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = coolModule()</span><br><span class=\"line\">person.doSomething()</span><br><span class=\"line\">person.doOther()</span><br><span class=\"line\"><span class=\"comment\">//这个模式在 JavaScript 中被称为模块。最常见的实现模块模式的方法通常被称为模块暴露， 这里展示的是其变体。</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">分析：</span></span><br><span class=\"line\"><span class=\"comment\">1.coolModule()是一个函数，必须要通过调用他来创建一个模块实例，不执行外部函数，内部作用域和闭包都无法被创建</span></span><br><span class=\"line\"><span class=\"comment\">2.coolModule()返回的是一个对象字面量语法&#123;key:value,...&#125;来表示的对象。这 个返回的对象中含有对内部函数而不是内部数据变量的引用。我们保持内部数据变量是隐 藏且私有的状态。可以将这个对象类型的返回值看作本质上是模块的公共 API。</span></span><br><span class=\"line\"><span class=\"comment\">3.这个对象类型的返回值最终被赋值给外部的变量 foo，然后就可以通过它来访问 API 中的 属性方法，比如 foo.doSomething()。</span></span><br><span class=\"line\"><span class=\"comment\">4.doSomething() 和 doAnother() 函数具有涵盖模块实例内部作用域的闭包(通过调用 CoolModule() 实现)。当通过返回一个含有属性引用的对象的方式来将函数传递到词法作 用域外部时，我们已经创造了可以观察和实践闭包的条件。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从模块中返回一个实际的对象并不是必须的，也可以直接返回一个内部函 数。jQuery 就是一个很好的例子。jQuery 和 $ 标识符就是 jQuery 模块的公 共 API，但它们本身都是函数(由于函数也是对象，它们本身也可以拥有属性)。</p>\n</blockquote>\n<h6 id=\"模块模式需要具备两个必要条件\"><a href=\"#模块模式需要具备两个必要条件\" class=\"headerlink\" title=\"模块模式需要具备两个必要条件\"></a>模块模式需要具备两个必要条件</h6><ol>\n<li>必须有外部的封闭函数，该函数必须至少被调用一次(每次调用都会创建一个新的模块 实例)</li>\n<li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</li>\n</ol>\n<ul>\n<li>一个具有函数属性的对象本身并不是真正的模块。从方便观察的角度看，一个从函数调用 所返回的，只有数据属性而没有闭包函数的对象并不是真正的模块</li>\n</ul>\n<p>上一个示例代码中有一个叫作 CoolModule() 的独立的模块创建器，可以被调用任意多次， 每次调用都会创建一个新的模块实例。当只需要一个实例时，可以对这个模式进行简单的 改进来实现<code>单例模式</code>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">coolModuel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> something = <span class=\"string\">'study'</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> other = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(something)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doOther</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(other.join(<span class=\"string\">'!'</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        doSomething:doSomething,</span><br><span class=\"line\">        doOther:doOther</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">foo.doSomething()</span><br><span class=\"line\">foo.doOther()</span><br><span class=\"line\"><span class=\"comment\">//我们将模块函数转换成了 IIFE立即调用这个函数并将返回值直接赋值给 单例的模块实例标识符 foo。</span></span><br></pre></td></tr></table></figure></p>\n<p>模块也是普通的函数，因此可以接受参数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">coolModule</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identify</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(id)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        identify:identify</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = coolModule(<span class=\"string\">'teacher'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = coolModule(<span class=\"string\">'doctor'</span>)</span><br><span class=\"line\">person1.identify() <span class=\"comment\">//teacher</span></span><br><span class=\"line\">person2.identify() <span class=\"comment\">//doctor</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>模块模式另一个简单但强大的变化用法是，命名将要作为公共 API 返回的对象:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">coolModule</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 修改公共 API</span></span><br><span class=\"line\">        publicAPI.identify = identify2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identify1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identify2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(id.toUpperCase())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> publicAPI = &#123;</span><br><span class=\"line\">        change:change,</span><br><span class=\"line\">        identify:identify1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> publicAPI</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)(<span class=\"string\">'foo person'</span>)</span><br><span class=\"line\">    foo.identify()<span class=\"comment\">//foo person</span></span><br><span class=\"line\">    foo.change()</span><br><span class=\"line\">    foo.identify()<span class=\"comment\">//FOO PERSON</span></span><br><span class=\"line\"><span class=\"comment\">//通过在模块实例的内部保留对公共 API 对象的内部引用，可以从内部对模块实例进行修 改，包括添加或删除方法和属性，以及修改它们的值。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"现代的模块机制\"><a href=\"#现代的模块机制\" class=\"headerlink\" title=\"现代的模块机制\"></a>现代的模块机制</h5><ul>\n<li>大多数模块依赖加载器 / 管理器本质上都是将这种模块定义封装进一个友好的 API。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myModules = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Manager</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> modules = &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">define</span>(<span class=\"params\">name,deps,impl</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt;deps.length;i++) &#123;</span><br><span class=\"line\">            deps[i] = modules[deps[i]]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        modules[name] = impl.apply(impl,deps)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modules[name]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        define:define,</span><br><span class=\"line\">        get:get</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"><span class=\"comment\">//这段代码的核心是 modules[name] = impl.apply(impl, deps)。为了模块的定义引入了包装函数(可以传入任何依赖)，并且将返回值，也就是模块的 API，储存在一个根据名字来管 理的模块列表中。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>下面展示了如何使用它来定义模块:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myModules.define(<span class=\"string\">'bar'</span>,[],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">who</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'let'</span>+who</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        hello:hello</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">myModules.define(<span class=\"string\">'foo'</span>,[<span class=\"string\">'bar'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bar</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hungry = <span class=\"string\">'hippo'</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">awesome</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(bar.hello(hungry).toUpperCase())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        awesome:awesome</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = myModules.get(<span class=\"string\">'bar'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = myModules.get(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar.hello(<span class=\"string\">'hippo'</span>))<span class=\"comment\">//Let hippo</span></span><br><span class=\"line\"><span class=\"comment\">//\"foo\" 和 \"bar\" 模块都是通过一个返回公共 API 的函数来定义的。\"foo\" 甚至接受 \"bar\" 的 示例作为依赖参数，并能相应地使用它。</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>模块管理器:为函数定义引入包装函数，并保证它的返回值和模块的 API 保持一致</li>\n<li>模块就是模块，即使在它们外层加上一个友好的包装工具也不会发生任何变化。<blockquote>\n<p>基于函数的模块并不是一个能被稳定识别的模式(编译器无法识别)，它们 的 API 语义只有在运行时才会被考虑进来。因此可以在运行时修改一个模块 的 API(参考前面关于公共 API 的讨论)。<br>相比之下，ES6 模块 API 更加稳定(API 不会在运行时改变)。由于编辑器知 道这一点，因此可以在(的确也这样做了)编译期检查对导入模块的 API 成 员的引用是否真实存在。如果 API 引用并不存在，编译器会在运行时抛出一 个或多个“早期”错误，而不会像往常一样在运行期采用动态的解决方案.</p>\n</blockquote>\n</li>\n<li>ES6 的模块没有“行内”格式，必须被定义在独立的文件中(一个文件一个模块)。浏览 器或引擎有一个默认的“模块加载器”(可以被重载)可以在导入模块时异步地加载模块文件。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bar.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">who</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Let me '</span> + who</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> hello</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//foo.js</span></span><br><span class=\"line\"><span class=\"comment\">// 仅从 \"bar\" 模块导入 hello()</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> hello <span class=\"keyword\">from</span> <span class=\"string\">'bar'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hungry = <span class=\"string\">'hippo'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">awesome</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(hello(hungry).toUpperCase())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> awesome</span><br><span class=\"line\"><span class=\"comment\">//baz.js</span></span><br><span class=\"line\"><span class=\"comment\">// 导入完整的 \"foo\" 和 \"bar\" 模块</span></span><br><span class=\"line\"><span class=\"built_in\">module</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'foo'</span></span><br><span class=\"line\"><span class=\"built_in\">module</span> bar <span class=\"keyword\">from</span> <span class=\"string\">'bar'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar.hello(<span class=\"string\">'rhino'</span>))</span><br><span class=\"line\"><span class=\"comment\">// Let me  rhino</span></span><br><span class=\"line\">     foo.awesome();</span><br><span class=\"line\"><span class=\"comment\">// LET ME : HIPPO</span></span><br><span class=\"line\"><span class=\"comment\">//需要用前面两个代码片段中的内容分别创建文件 foo.js 和 bar.js。然后如第三 个代码片段中展示的那样，bar.js 中的程序会加载或导入这两个模块并使用 它们。</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"import-可以将一个模块中的一个或多个-API-导入到当前作用域中，并分别绑定在一个变量-上-在我们的例子里是-hello-。module-会将整个模块的-API-导入并绑定到一个变量上-在-我们的例子里是-foo-和-bar-。export-会将当前模块的一个标识符-变量、函数-导出为公-共-API。这些操作可以在模块定义中根据需要使用任意多次。\"><a href=\"#import-可以将一个模块中的一个或多个-API-导入到当前作用域中，并分别绑定在一个变量-上-在我们的例子里是-hello-。module-会将整个模块的-API-导入并绑定到一个变量上-在-我们的例子里是-foo-和-bar-。export-会将当前模块的一个标识符-变量、函数-导出为公-共-API。这些操作可以在模块定义中根据需要使用任意多次。\" class=\"headerlink\" title=\"import 可以将一个模块中的一个或多个 API 导入到当前作用域中，并分别绑定在一个变量 上(在我们的例子里是 hello)。module 会将整个模块的 API 导入并绑定到一个变量上(在 我们的例子里是 foo 和 bar)。export 会将当前模块的一个标识符(变量、函数)导出为公 共 API。这些操作可以在模块定义中根据需要使用任意多次。\"></a>import 可以将一个模块中的一个或多个 API 导入到当前作用域中，并分别绑定在一个变量 上(在我们的例子里是 hello)。module 会将整个模块的 API 导入并绑定到一个变量上(在 我们的例子里是 foo 和 bar)。export 会将当前模块的一个标识符(变量、函数)导出为公 共 API。这些操作可以在模块定义中根据需要使用任意多次。</h6><h6 id=\"模块文件中的内容会被当作好像包含在作用域闭包中一样来处理\"><a href=\"#模块文件中的内容会被当作好像包含在作用域闭包中一样来处理\" class=\"headerlink\" title=\"模块文件中的内容会被当作好像包含在作用域闭包中一样来处理\"></a>模块文件中的内容会被当作好像包含在作用域闭包中一样来处理</h6><h5 id=\"模块-1\"><a href=\"#模块-1\" class=\"headerlink\" title=\"模块\"></a>模块</h5><ol>\n<li>为创建内部作用域而调用了一个包装函数。</li>\n<li>包装函数的返回 值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。</li>\n</ol>\n<blockquote>\n<p>JavaScript 中的作用域就是词法 作用域(事实上大部分语言都是基于词法作用域的)<br>词法作用域是一套关于引擎如何寻找变量以及会在何处找到变量的规则。词法作用域最重要的特征是它的定义过程发生在代码的书写阶段(假设你没有使用 eval() 或 with)。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">3</span></span><br><span class=\"line\">    foo()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">bar()</span><br><span class=\"line\"><span class=\"comment\">//词法作用域让 foo() 中的 a 通过 RHS 引用到了全局作用域中的 a，因此会输出 2。</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调 用。换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。</span></span><br><span class=\"line\"><span class=\"comment\">事实上 JavaScript 并不具有动态作用域。它只有词法作用域，简单明了。 但是 this 机制某种程度上很像动态作用域。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"主要区别\"><a href=\"#主要区别\" class=\"headerlink\" title=\"主要区别:\"></a>主要区别:</h6><ol>\n<li>词法作用域是在写代码或者说定义时确定的，而动态作用域是在运行时确定 的。(this 也是!)词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。</li>\n<li>this 关注函数如何调用，这就表明了 this 机制和动态作用域之间的关系多么紧密</li>\n</ol>\n<h6 id=\"块作用域，而-with-和-catch-分句就是块作用域的两个小例子\"><a href=\"#块作用域，而-with-和-catch-分句就是块作用域的两个小例子\" class=\"headerlink\" title=\"块作用域，而 with 和 catch 分句就是块作用域的两个小例子\"></a>块作用域，而 with 和 catch 分句就是块作用域的两个小例子</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//参考如下</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(a) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"><span class=\"comment\">//catch 分句具有块作用域，因此它可以在 ES6 之前的环境中作为块作用域的替代方案。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Traceur 的项目:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"literal\">undefined</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(a) &#123;</span><br><span class=\"line\">        a = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"隐式和显式作用域\"><a href=\"#隐式和显式作用域\" class=\"headerlink\" title=\"隐式和显式作用域\"></a>隐式和显式作用域</h5><ul>\n<li>let 作用域或 let 声明(<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> (a = <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>同隐式地劫持一个已经存在的作用域不同，let 声明会创建一个显示的作用域并与其进行 绑定。显式作用域不仅更加突出，在代码重构时也表现得更加健壮。在语法上，通过强制 性地将所有变量声明提升到块的顶部来产生更简洁的代码。这样更容易判断变量是否属于 某个作用域。</p>\n<ul>\n<li>let 声 明有意将变量声明放在块的顶部</li>\n</ul>\n</blockquote>\n<h5 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"params\">a</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(<span class=\"number\">2</span>) <span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    id:<span class=\"string\">'awesome'</span>,</span><br><span class=\"line\">    cool:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">coolFn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"string\">'no cool'</span></span><br><span class=\"line\">obj.cool() <span class=\"comment\">//cool</span></span><br><span class=\"line\">setTimeout(obj.cool,<span class=\"number\">100</span>)<span class=\"comment\">//no cool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cool() 函数丢失了同 this 之间的绑定,解决：var self = this ---词法作用域,self 只是一个可以通过 词法作用域和闭包进行引用的标识符，不关心 this 绑定的过程中发生了什么。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    count:<span class=\"number\">0</span>,</span><br><span class=\"line\">    cool:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.count &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                self.count++;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'awesome'</span>)</span><br><span class=\"line\">            &#125;,<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.cool()<span class=\"comment\">//awesome</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    count:<span class=\"number\">0</span>,</span><br><span class=\"line\">    cool:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.count &lt;<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.count++;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'yes'</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.cool() <span class=\"comment\">//yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    count:<span class=\"number\">0</span>,</span><br><span class=\"line\">    cool:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.count &lt;<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.count++;<span class=\"comment\">//this是安全的，因为bind()</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'more awsome'</span>)</span><br><span class=\"line\">            &#125;.bind(<span class=\"keyword\">this</span>),<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.cool()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>箭头函数的this是用当前的词法作用域覆盖了 this 本来的值。</li>\n</ul>\n<blockquote>\n<p>《你不知道的javascript上卷》</p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/vue3-新特性/生命周期.png","slug":"生命周期.png","post":"ckqt3wuf90033zgsynwhw1c1h","modified":0,"renderable":0},{"_id":"source/_posts/表单验证/表单验证.png","slug":"表单验证.png","post":"ckqt3wuo3006dzgsy4tpestd3","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckqt3wudc0001zgsyowc7ichc","category_id":"ckqt3wudj0003zgsy92hx8ty2","_id":"ckqt3wudv000dzgsyjvmgyi3s"},{"post_id":"ckqt3wudg0002zgsym6c6s6t1","category_id":"ckqt3wudq0008zgsyf1yq43pq","_id":"ckqt3wudz000izgsyprd3sadz"},{"post_id":"ckqt3wudx000gzgsyhb66gzrj","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wue2000pzgsycixi85kw"},{"post_id":"ckqt3wudl0005zgsy7thzkxfq","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wue5000uzgsyuj3mvfjw"},{"post_id":"ckqt3wudy000hzgsy3blgjnmr","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wue6000xzgsyk6ixjn40"},{"post_id":"ckqt3wue0000mzgsyyinjqy7k","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wue80011zgsyldw8hzr4"},{"post_id":"ckqt3wudn0006zgsy6nnuq2cg","category_id":"ckqt3wudz000kzgsyy2hqgsyd","_id":"ckqt3wuea0015zgsyfr3fyk0g"},{"post_id":"ckqt3wue5000wzgsyyizku5qu","category_id":"ckqt3wudj0003zgsy92hx8ty2","_id":"ckqt3wuec0019zgsy2ku1k9ph"},{"post_id":"ckqt3wudo0007zgsyf14l666x","category_id":"ckqt3wue3000szgsy5n5dtgv4","_id":"ckqt3wuee001dzgsyqr2kch7w"},{"post_id":"ckqt3wue90014zgsy4hi18e15","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wueg001hzgsyi6woyneb"},{"post_id":"ckqt3wuds000bzgsy84bgkazr","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wuei001lzgsy6vkxhf3c"},{"post_id":"ckqt3wueb0018zgsyc8u9fauj","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wuek001pzgsy1fa9jurz"},{"post_id":"ckqt3wudu000czgsy1tx0ppuh","category_id":"ckqt3wue3000szgsy5n5dtgv4","_id":"ckqt3wuem001tzgsy4f5okcr1"},{"post_id":"ckqt3wuef001gzgsymh52r2os","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wueo001xzgsym6dufcli"},{"post_id":"ckqt3wueh001kzgsyir3k5dt1","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wueq0021zgsyjc1zlo91"},{"post_id":"ckqt3wue1000ozgsy4ky0zlu7","category_id":"ckqt3wueg001izgsyt1g7wk39","_id":"ckqt3wues0025zgsyskrv51g6"},{"post_id":"ckqt3wuej001ozgsyrkr3z90g","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wueu0028zgsyk2abgecx"},{"post_id":"ckqt3wuel001szgsy2azw2xxh","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wuev002czgsyojycyuyi"},{"post_id":"ckqt3wue70010zgsymq3q5hjo","category_id":"ckqt3wuek001qzgsycoqcfzjz","_id":"ckqt3wuex002gzgsysbpdbz5z"},{"post_id":"ckqt3wuen001wzgsyvuacnyan","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wuez002jzgsybphioir7"},{"post_id":"ckqt3wuep0020zgsyp9jxoer6","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wuf1002nzgsyb4v416ei"},{"post_id":"ckqt3wued001czgsykltttsu7","category_id":"ckqt3wueo001yzgsymxly9h0q","_id":"ckqt3wuf2002qzgsymhus1i0z"},{"post_id":"ckqt3wuet0027zgsyge1f6401","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wuf4002uzgsyaunevgxw"},{"post_id":"ckqt3wuev002bzgsyn6tkiry6","category_id":"ckqt3wudz000kzgsyy2hqgsyd","_id":"ckqt3wuf6002xzgsy51i7bv15"},{"post_id":"ckqt3wuer0024zgsyalnhzv4q","category_id":"ckqt3wueu0029zgsyytqs07f4","_id":"ckqt3wuf80031zgsyb32bzrfb"},{"post_id":"ckqt3wuey002izgsy8sib4vaq","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wufa0034zgsyk6wsg9pn"},{"post_id":"ckqt3wuf0002mzgsynrn5q6it","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wufc0038zgsy7wvf2qfx"},{"post_id":"ckqt3wuf1002pzgsy16pa1h2d","category_id":"ckqt3wudz000kzgsyy2hqgsyd","_id":"ckqt3wuff003czgsydqks5w0a"},{"post_id":"ckqt3wuf4002tzgsym1yfh398","category_id":"ckqt3wudz000kzgsyy2hqgsyd","_id":"ckqt3wufg003fzgsyyyx959x1"},{"post_id":"ckqt3wuf5002wzgsymbtlbha5","category_id":"ckqt3wudz000kzgsyy2hqgsyd","_id":"ckqt3wufi003izgsyv3uaqqgp"},{"post_id":"ckqt3wufb0037zgsy3z5ptrvs","category_id":"ckqt3wudz000kzgsyy2hqgsyd","_id":"ckqt3wufj003kzgsysvt59m1g"},{"post_id":"ckqt3wuf90033zgsynwhw1c1h","category_id":"ckqt3wufc0039zgsyv0gtyma7","_id":"ckqt3wufj003mzgsyvzwffqhs"},{"post_id":"ckqt3wufd003bzgsy4ad30r7o","category_id":"ckqt3wufi003hzgsyz81eklpr","_id":"ckqt3wufl003qzgsynr1pw3o2"},{"post_id":"ckqt3wuff003ezgsy2sden9at","category_id":"ckqt3wufi003hzgsyz81eklpr","_id":"ckqt3wufl003tzgsyey351cb1"},{"post_id":"ckqt3wumz004rzgsyowhqr76c","category_id":"ckqt3wudz000kzgsyy2hqgsyd","_id":"ckqt3wuna0050zgsy96bt2iz5"},{"post_id":"ckqt3wun2004tzgsy3dehgzs7","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wunc0053zgsy7wudf9su"},{"post_id":"ckqt3wun9004zzgsytbl1vdmn","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wung0058zgsywbvfnqh8"},{"post_id":"ckqt3wunb0052zgsy6tkiuuej","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wunh005bzgsyel1wktjz"},{"post_id":"ckqt3wund0055zgsy0ut5hb62","category_id":"ckqt3wudz000kzgsyy2hqgsyd","_id":"ckqt3wunk005ezgsyzs9pxdsd"},{"post_id":"ckqt3wune0057zgsy5mo2035x","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wunl005hzgsyi4e3gon2"},{"post_id":"ckqt3wung005azgsymoufv5dt","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wunn005kzgsy47kcl3y7"},{"post_id":"ckqt3wuni005dzgsyv2wcjo9p","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wunp005nzgsy0p15r5jp"},{"post_id":"ckqt3wunk005gzgsyw8g5mgyx","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wunq005qzgsyxj6vdhfw"},{"post_id":"ckqt3wuno005mzgsyqw1ltika","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wunt005wzgsyri5rnafh"},{"post_id":"ckqt3wunp005pzgsypx6nqjl2","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wunv005zzgsy4qd7v6ld"},{"post_id":"ckqt3wunr005szgsymadzxqck","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wunx0062zgsy9y6ltm49"},{"post_id":"ckqt3wunt005vzgsyyhbbp8ip","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wunz0065zgsyyjgj0yve"},{"post_id":"ckqt3wunu005yzgsy56iwi7er","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wuo10068zgsyo81zb4x8"},{"post_id":"ckqt3wunw0061zgsy2hz5gh50","category_id":"ckqt3wudz000kzgsyy2hqgsyd","_id":"ckqt3wuo3006bzgsyn5dr85xw"},{"post_id":"ckqt3wuo00067zgsy5sdj03mk","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wuo5006gzgsyo00ahdaj"},{"post_id":"ckqt3wuo2006azgsy18451js3","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wuo7006jzgsyt2ft54pm"},{"post_id":"ckqt3wuo5006fzgsyfhrw8op1","category_id":"ckqt3wudz000kzgsyy2hqgsyd","_id":"ckqt3wuoa006pzgsyy9ljsjkk"},{"post_id":"ckqt3wuo6006izgsyliuvhf0t","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wuob006rzgsyz6hy3hwp"},{"post_id":"ckqt3wuo8006mzgsyn5xqoiv6","category_id":"ckqt3wudz000kzgsyy2hqgsyd","_id":"ckqt3wuoc006uzgsybfhft60x"},{"post_id":"ckqt3wuo9006ozgsyeguzgnxk","category_id":"ckqt3wudw000fzgsy9avcbdoy","_id":"ckqt3wuod006wzgsyn2birwaz"}],"PostTag":[{"post_id":"ckqt3wudc0001zgsyowc7ichc","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuds000azgsykpmrzkry"},{"post_id":"ckqt3wudx000gzgsyhb66gzrj","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wue0000lzgsy6y9f8us7"},{"post_id":"ckqt3wudx000gzgsyhb66gzrj","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wue1000nzgsyrrcxkeou"},{"post_id":"ckqt3wudg0002zgsym6c6s6t1","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wue3000rzgsyq9xq3x5c"},{"post_id":"ckqt3wudg0002zgsym6c6s6t1","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wue5000vzgsy04r4wjsk"},{"post_id":"ckqt3wudy000hzgsy3blgjnmr","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wue7000zzgsyip3td01u"},{"post_id":"ckqt3wudy000hzgsy3blgjnmr","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wue90013zgsyqk9moabs"},{"post_id":"ckqt3wue0000mzgsyyinjqy7k","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuea0017zgsy5bwj2fiu"},{"post_id":"ckqt3wue0000mzgsyyinjqy7k","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wued001bzgsytu643iyw"},{"post_id":"ckqt3wue1000ozgsy4ky0zlu7","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuef001fzgsyzofcn96t"},{"post_id":"ckqt3wue1000ozgsy4ky0zlu7","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wueh001jzgsykmx9akoc"},{"post_id":"ckqt3wudl0005zgsy7thzkxfq","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuej001nzgsy4zd190cl"},{"post_id":"ckqt3wudl0005zgsy7thzkxfq","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuel001rzgsyhevjqppp"},{"post_id":"ckqt3wudn0006zgsy6nnuq2cg","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuen001vzgsykt96b0hb"},{"post_id":"ckqt3wudn0006zgsy6nnuq2cg","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wuep001zzgsyrr9tnl38"},{"post_id":"ckqt3wue90014zgsy4hi18e15","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wueq0022zgsy4f82v4e0"},{"post_id":"ckqt3wue90014zgsy4hi18e15","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wuet0026zgsyrs5rpgtn"},{"post_id":"ckqt3wueb0018zgsyc8u9fauj","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wueu002azgsyiuqjcb5j"},{"post_id":"ckqt3wueb0018zgsyc8u9fauj","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuew002ezgsyctyal2nr"},{"post_id":"ckqt3wudo0007zgsyf14l666x","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuey002hzgsyy5ohjr89"},{"post_id":"ckqt3wudo0007zgsyf14l666x","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuf0002lzgsyc20k7owh"},{"post_id":"ckqt3wued001czgsykltttsu7","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuf1002ozgsypavww1br"},{"post_id":"ckqt3wued001czgsykltttsu7","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuf3002szgsyvaqxrd48"},{"post_id":"ckqt3wuef001gzgsymh52r2os","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuf5002vzgsy4v5yzr7f"},{"post_id":"ckqt3wuef001gzgsymh52r2os","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wuf7002zzgsysngx2igt"},{"post_id":"ckqt3wuds000bzgsy84bgkazr","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuf90032zgsyvxyzl16h"},{"post_id":"ckqt3wuds000bzgsy84bgkazr","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wufb0036zgsyjmbvuqz5"},{"post_id":"ckqt3wuej001ozgsyrkr3z90g","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufd003azgsyp88lh47p"},{"post_id":"ckqt3wuej001ozgsyrkr3z90g","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wuff003dzgsyq61bsdby"},{"post_id":"ckqt3wudu000czgsy1tx0ppuh","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufh003gzgsyk92wfg50"},{"post_id":"ckqt3wudu000czgsy1tx0ppuh","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wufi003jzgsyk1tfrivq"},{"post_id":"ckqt3wuel001szgsy2azw2xxh","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufj003lzgsyn7vwfqdr"},{"post_id":"ckqt3wuel001szgsy2azw2xxh","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wufk003ozgsynhhbiv2x"},{"post_id":"ckqt3wuen001wzgsyvuacnyan","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufk003pzgsyifnczafn"},{"post_id":"ckqt3wuen001wzgsyvuacnyan","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wufl003rzgsycxc9dzpk"},{"post_id":"ckqt3wue4000tzgsy5staxs04","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufl003szgsywsqoaxis"},{"post_id":"ckqt3wue4000tzgsy5staxs04","tag_id":"ckqt3wuem001uzgsy3z4c10li","_id":"ckqt3wufm003uzgsy950i713a"},{"post_id":"ckqt3wuep0020zgsyp9jxoer6","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufm003vzgsyobeczoy2"},{"post_id":"ckqt3wuep0020zgsyp9jxoer6","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wufm003wzgsyid1r8n1k"},{"post_id":"ckqt3wuer0024zgsyalnhzv4q","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufm003xzgsy6qz7jqq3"},{"post_id":"ckqt3wuer0024zgsyalnhzv4q","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wufm003yzgsyl2odv76b"},{"post_id":"ckqt3wuet0027zgsyge1f6401","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufn003zzgsy0im4dpu6"},{"post_id":"ckqt3wuet0027zgsyge1f6401","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wufn0040zgsymrr4ik9f"},{"post_id":"ckqt3wuev002bzgsyn6tkiry6","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufo0041zgsyymcgiil5"},{"post_id":"ckqt3wuev002bzgsyn6tkiry6","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wufp0042zgsygdhknyd3"},{"post_id":"ckqt3wue5000wzgsyyizku5qu","tag_id":"ckqt3wueq0023zgsykw5pmywj","_id":"ckqt3wufq0043zgsypc58uiy9"},{"post_id":"ckqt3wue5000wzgsyyizku5qu","tag_id":"ckqt3wuew002dzgsyokhrvo27","_id":"ckqt3wufq0044zgsyriowtw8n"},{"post_id":"ckqt3wuey002izgsy8sib4vaq","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufr0045zgsyla0cl5y2"},{"post_id":"ckqt3wuey002izgsy8sib4vaq","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wufr0046zgsyx985g3r7"},{"post_id":"ckqt3wue70010zgsymq3q5hjo","tag_id":"ckqt3wueq0023zgsykw5pmywj","_id":"ckqt3wufr0047zgsymiycqbxu"},{"post_id":"ckqt3wue70010zgsymq3q5hjo","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wufs0048zgsynmh48b7b"},{"post_id":"ckqt3wuf4002tzgsym1yfh398","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufs0049zgsy6ms3eohz"},{"post_id":"ckqt3wuf4002tzgsym1yfh398","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wufs004azgsy2na45jt2"},{"post_id":"ckqt3wueh001kzgsyir3k5dt1","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuft004bzgsyu5btbypn"},{"post_id":"ckqt3wueh001kzgsyir3k5dt1","tag_id":"ckqt3wuf3002rzgsyjk2vzt4f","_id":"ckqt3wuft004czgsy33ojy6iu"},{"post_id":"ckqt3wuf5002wzgsymbtlbha5","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuft004dzgsycxjuk88k"},{"post_id":"ckqt3wuf5002wzgsymbtlbha5","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wufu004ezgsy6c6k3wwt"},{"post_id":"ckqt3wuf0002mzgsynrn5q6it","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufu004fzgsye6xwqe53"},{"post_id":"ckqt3wuf0002mzgsynrn5q6it","tag_id":"ckqt3wuf3002rzgsyjk2vzt4f","_id":"ckqt3wufu004gzgsygw0hocat"},{"post_id":"ckqt3wuf90033zgsynwhw1c1h","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufv004hzgsycrdkdeie"},{"post_id":"ckqt3wuf90033zgsynwhw1c1h","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wufv004izgsyu2sjl4em"},{"post_id":"ckqt3wufb0037zgsy3z5ptrvs","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufv004jzgsyebk5019z"},{"post_id":"ckqt3wufb0037zgsy3z5ptrvs","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wufw004kzgsyca72ehqg"},{"post_id":"ckqt3wuf1002pzgsy16pa1h2d","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufw004lzgsyrfweo3a4"},{"post_id":"ckqt3wuf1002pzgsy16pa1h2d","tag_id":"ckqt3wuf3002rzgsyjk2vzt4f","_id":"ckqt3wufw004mzgsy85lle6ky"},{"post_id":"ckqt3wufd003bzgsy4ad30r7o","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufx004nzgsymo2p70pm"},{"post_id":"ckqt3wufd003bzgsy4ad30r7o","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wufx004ozgsykwlhw8kb"},{"post_id":"ckqt3wuff003ezgsy2sden9at","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wufx004pzgsy55gjizl1"},{"post_id":"ckqt3wuff003ezgsy2sden9at","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wufy004qzgsyhgqyji7r"},{"post_id":"ckqt3wumz004rzgsyowhqr76c","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wun6004vzgsy2zqqddej"},{"post_id":"ckqt3wumz004rzgsyowhqr76c","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wun9004yzgsynifqvq24"},{"post_id":"ckqt3wun2004tzgsy3dehgzs7","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wunb0051zgsy0esgqfrf"},{"post_id":"ckqt3wun2004tzgsy3dehgzs7","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wunc0054zgsybypdkgcv"},{"post_id":"ckqt3wun9004zzgsytbl1vdmn","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wune0056zgsyvdcjpbky"},{"post_id":"ckqt3wun9004zzgsytbl1vdmn","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wung0059zgsyd7ozt8cm"},{"post_id":"ckqt3wunb0052zgsy6tkiuuej","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuni005czgsyr24ne9gb"},{"post_id":"ckqt3wunb0052zgsy6tkiuuej","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wunk005fzgsyelxyuizi"},{"post_id":"ckqt3wund0055zgsy0ut5hb62","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wunm005izgsyua0ezz1w"},{"post_id":"ckqt3wund0055zgsy0ut5hb62","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuno005lzgsys9z8bxjb"},{"post_id":"ckqt3wune0057zgsy5mo2035x","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wunp005ozgsy7pd5v10q"},{"post_id":"ckqt3wune0057zgsy5mo2035x","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wunr005rzgsy8tie016h"},{"post_id":"ckqt3wung005azgsymoufv5dt","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuns005uzgsywk7uoorf"},{"post_id":"ckqt3wung005azgsymoufv5dt","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wunu005xzgsyoouh08ky"},{"post_id":"ckqt3wuni005dzgsyv2wcjo9p","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wunw0060zgsyz78la3bt"},{"post_id":"ckqt3wuni005dzgsyv2wcjo9p","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wuny0063zgsyyhhuiuny"},{"post_id":"ckqt3wunk005gzgsyw8g5mgyx","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wunz0066zgsydvro9n4g"},{"post_id":"ckqt3wunk005gzgsyw8g5mgyx","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wuo10069zgsy7jp6g8i2"},{"post_id":"ckqt3wuno005mzgsyqw1ltika","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuo3006czgsy5apisrm6"},{"post_id":"ckqt3wuno005mzgsyqw1ltika","tag_id":"ckqt3wue6000yzgsylvpbmi4i","_id":"ckqt3wuo4006ezgsypig11kll"},{"post_id":"ckqt3wunr005szgsymadzxqck","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuo6006hzgsyoqlydnde"},{"post_id":"ckqt3wunr005szgsymadzxqck","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuo8006lzgsyl94gmap5"},{"post_id":"ckqt3wunt005vzgsyyhbbp8ip","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuo9006nzgsyuswyvvjm"},{"post_id":"ckqt3wunt005vzgsyyhbbp8ip","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuob006qzgsyc01qbe2h"},{"post_id":"ckqt3wunu005yzgsy56iwi7er","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuoc006tzgsy68rftnei"},{"post_id":"ckqt3wunu005yzgsy56iwi7er","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuoc006vzgsyyf61yxrv"},{"post_id":"ckqt3wunp005pzgsypx6nqjl2","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuod006xzgsytg72ren5"},{"post_id":"ckqt3wunp005pzgsypx6nqjl2","tag_id":"ckqt3wuns005tzgsymy57ka9p","_id":"ckqt3wuod006yzgsyeflm1x0l"},{"post_id":"ckqt3wunw0061zgsy2hz5gh50","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuoe006zzgsyy62vlp1f"},{"post_id":"ckqt3wunw0061zgsy2hz5gh50","tag_id":"ckqt3wuf3002rzgsyjk2vzt4f","_id":"ckqt3wuoe0070zgsy9o438fsk"},{"post_id":"ckqt3wuny0064zgsypdera9tm","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuoe0071zgsycvyb2tha"},{"post_id":"ckqt3wuny0064zgsypdera9tm","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuof0072zgsyzdbfn2g4"},{"post_id":"ckqt3wuo00067zgsy5sdj03mk","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuof0073zgsyevhbfark"},{"post_id":"ckqt3wuo00067zgsy5sdj03mk","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuof0074zgsy9jqkjm74"},{"post_id":"ckqt3wuo2006azgsy18451js3","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuog0075zgsyakmj4wl8"},{"post_id":"ckqt3wuo2006azgsy18451js3","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuog0076zgsyg7uantw8"},{"post_id":"ckqt3wuo3006dzgsy4tpestd3","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuog0077zgsy62sk9mbx"},{"post_id":"ckqt3wuo3006dzgsy4tpestd3","tag_id":"ckqt3wuns005tzgsymy57ka9p","_id":"ckqt3wuog0078zgsyb0b5lnpt"},{"post_id":"ckqt3wuo6006izgsyliuvhf0t","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuoh0079zgsybab4bgb6"},{"post_id":"ckqt3wuo6006izgsyliuvhf0t","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuoh007azgsyynjkcoa8"},{"post_id":"ckqt3wuo8006mzgsyn5xqoiv6","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuoh007bzgsyw62x7l44"},{"post_id":"ckqt3wuo8006mzgsyn5xqoiv6","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuoi007czgsyfztgxjfo"},{"post_id":"ckqt3wuo9006ozgsyeguzgnxk","tag_id":"ckqt3wudl0004zgsywr04ft2r","_id":"ckqt3wuoi007dzgsyb3uy5bl4"},{"post_id":"ckqt3wuo9006ozgsyeguzgnxk","tag_id":"ckqt3wudw000ezgsy6seq8713","_id":"ckqt3wuoi007ezgsyydkd19fa"},{"post_id":"ckqt3wuo5006fzgsyfhrw8op1","tag_id":"ckqt3wuo7006kzgsyu4jl9gq7","_id":"ckqt3wuoj007fzgsyp6yh0o23"},{"post_id":"ckqt3wuo5006fzgsyfhrw8op1","tag_id":"ckqt3wuob006szgsy8krsjzex","_id":"ckqt3wuoj007gzgsyrj9fkezt"}],"Tag":[{"name":"编程","_id":"ckqt3wudl0004zgsywr04ft2r"},{"name":"学习","_id":"ckqt3wudw000ezgsy6seq8713"},{"name":"感悟","_id":"ckqt3wue6000yzgsylvpbmi4i"},{"name":"技巧","_id":"ckqt3wuem001uzgsy3z4c10li"},{"name":"语言","_id":"ckqt3wueq0023zgsykw5pmywj"},{"name":"理解","_id":"ckqt3wuew002dzgsyokhrvo27"},{"name":"功能","_id":"ckqt3wuf3002rzgsyjk2vzt4f"},{"name":"封装","_id":"ckqt3wuns005tzgsymy57ka9p"},{"name":"项目","_id":"ckqt3wuo7006kzgsyu4jl9gq7"},{"name":"项分析目","_id":"ckqt3wuob006szgsy8krsjzex"}]}}