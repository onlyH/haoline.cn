<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML-autocomplete</title>
    <url>/2017/05/01/autocomplete/</url>
    <content><![CDATA[<p>项目中，手撸搜索框，从后台拿数据就行展示，选择操作等。<br>偶然发现，搜索后，浏览器会有缓存。就是我的搜索会展示在页面上。<br>于是。。查资料。。关于input的。。有这么一条属性<code>autocomplete = off | no</code><br><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">定义和用法</span><br><span class="line">autocomplete 属性规定表单是否应该启用自动完成功能。</span><br><span class="line"></span><br><span class="line">自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。</span><br><span class="line"></span><br><span class="line">注释：autocomplete 属性适用于 &lt;<span class="keyword">form</span>&gt;，以及下面的 &lt;<span class="keyword">input</span>&gt; 类型：text, <span class="keyword">search</span>, url, telephone, email, password, datepickers, <span class="keyword">range</span> 以及 color。</span><br><span class="line"></span><br><span class="line">提示：在某些浏览器中，您可能需要手动启用自动完成功能。</span><br></pre></td></tr></table></figure></p>
<p>所以，我之所以有搜索记录存在，是因为浏览器会对同一个name标记的输入进行缓存，设置<code>off</code>瞬间解决掉问题。</p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>开发小技巧</title>
    <url>/2021/06/17/17/</url>
    <content><![CDATA[<h5 id="分页删除最后一条返回上一页"><a href="#分页删除最后一条返回上一页" class="headerlink" title="分页删除最后一条返回上一页"></a>分页删除最后一条返回上一页</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> totalPage =<span class="built_in">Math</span>.ceil((<span class="keyword">this</span>.page.total <span class="number">-1</span>)/res.pageSize);</span><br><span class="line"><span class="keyword">this</span>.page.currentPage = <span class="keyword">this</span>.page.currentPage &lt;<span class="number">1</span> ?<span class="number">1</span> :<span class="keyword">this</span>.page.currentPage &gt; totalPage ?totalPage :<span class="keyword">this</span>.page.currentPage</span><br></pre></td></tr></table></figure>
<h5 id="Git报错处理"><a href="#Git报错处理" class="headerlink" title="Git报错处理"></a>Git报错处理</h5><p><code>OpenSSL SSL_read: Connection was reset, errno 10054</code></p>
<p>这是服务器的SSL证书没有经过第三方机构的签署，所以报错。</p>
<p>解决办法：</p>
<p><code>git config --global http.sslVerify &quot;false&quot;</code></p>
<p><a href="https://github.com/onlyH/summary" target="_blank" rel="noopener">github链接</a></p>
]]></content>
  </entry>
  <entry>
    <title>ES6系列-Iterator与for of</title>
    <url>/2021/03/15/Iterator-forOf/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">什么是Iterator接口</span></span><br><span class="line"><span class="comment">Iterator的基本用法</span></span><br><span class="line"><span class="comment">for...of </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line">    <span class="keyword">let</span> map = arr[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line">    <span class="built_in">console</span>.log(map.next())</span><br><span class="line">    <span class="built_in">console</span>.log(map.next())</span><br><span class="line">    <span class="built_in">console</span>.log(map.next())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;value: "hello", done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: "world", done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for..of循环Iterator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        start:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        end:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">        [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">            <span class="keyword">let</span> that = <span class="keyword">this</span></span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">            <span class="keyword">let</span> arr = that.start.concat(that.end)</span><br><span class="line">            <span class="keyword">let</span> len = arr.length</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                next() &#123;</span><br><span class="line">                 <span class="keyword">if</span>(index &lt;len) &#123;</span><br><span class="line">                     <span class="keyword">return</span> &#123;</span><br><span class="line">                         value:arr[index++],</span><br><span class="line">                         done:<span class="literal">false</span></span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                     <span class="keyword">return</span> &#123;</span><br><span class="line">                         value:arr[index++],</span><br><span class="line">                         done:<span class="literal">true</span></span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> obj) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(key)</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="comment">// 4</span></span><br><span class="line">    <span class="comment">// 5</span></span><br><span class="line">    <span class="comment">// 6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">'hello'</span>,<span class="string">'world'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// hello</span></span><br><span class="line">   <span class="comment">// world</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>axios配置</title>
    <url>/2018/02/28/axios1/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用</span></span><br><span class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">//给vue原型挂载一个属性</span></span><br><span class="line">Vue.prototype.$axios = Axios</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">created() &#123;</span><br><span class="line">    <span class="comment">//get</span></span><br><span class="line">    <span class="keyword">this</span>.$axios.get(<span class="string">'http://192.168.1.1'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">this</span>.data.message</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br><span class="line"> <span class="comment">//post</span></span><br><span class="line"> <span class="keyword">this</span>.$axios.post(<span class="string">'http://192.168.1.1'</span>,&#123;<span class="attr">content</span>:<span class="string">'hello world'</span>&#125;,</span><br><span class="line"> &#123; <span class="attr">headers</span>:&#123;<span class="string">'content-type'</span>:<span class="string">'appliction/x-www-form-urlencoded'</span>&#125;&#125;)</span><br><span class="line"> .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.data = res.data.message</span><br><span class="line"> &#125;)</span><br><span class="line"> .catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6系列-decorator</title>
    <url>/2021/03/15/decorator/</url>
    <content><![CDATA[<ul>
<li>decorator：修饰器是一个函数，修改行为，修改类的行为。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> readonly = <span class="function">(<span class="params">target, name, descriptor</span>) =&gt;</span> &#123;</span><br><span class="line">        descriptor.writable = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> descriptor</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        @readonly</span><br><span class="line">        time() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'2012-12-12'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> test = <span class="keyword">new</span> Test()</span><br><span class="line">    test.time = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'reset time'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(test.time())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> typename = <span class="function">(<span class="params">target, name, descriptor</span>) =&gt;</span> &#123;</span><br><span class="line">        target.myname = <span class="string">'hello'</span></span><br><span class="line">    &#125;</span><br><span class="line">    @typename</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'类的修饰'</span>, Test.myname)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> log = <span class="function">(<span class="params">type</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, name, descriptor</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> src_method = descriptor.value;</span><br><span class="line">            descriptor.value = <span class="function">(<span class="params">...arg</span>)=&gt;</span>&#123;</span><br><span class="line">                src_method.apply(target.arg);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`log <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">AD</span></span>&#123;</span><br><span class="line">        @log(<span class="string">'show'</span>)</span><br><span class="line">        show() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'ad is show'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        @log(<span class="string">'click'</span>)</span><br><span class="line">        click() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'ad is click'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> ad = <span class="keyword">new</span> AD()</span><br><span class="line">    ad.show()</span><br><span class="line">    ad.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    ad is show</span></span><br><span class="line"><span class="comment">    log show</span></span><br><span class="line"><span class="comment">    ad is click</span></span><br><span class="line"><span class="comment">    log click</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>css修改select样式</title>
    <url>/2021/03/15/css%E4%BF%AE%E6%94%B9select%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<p>select是有默认样式的，select的一些默认样式我们很难修改，比如图标的替换。<br>参考了一些别人的例子，整理下，如果要切换图片。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-tag">select</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="comment">/*将默认的select选择框样式清除*/</span></span><br><span class="line">  <span class="attribute">appearance</span>: none;</span><br><span class="line">  <span class="attribute">-moz-appearance</span>: none;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">  <span class="comment">/*在选择框的最右侧中间显示小箭头图片*/</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"http://ourjs.github.io/static/2015/arrow.png"</span>) no-repeat scroll right center transparent <span class="meta">!important</span>;</span><br><span class="line">  <span class="comment">/*为下拉小箭头留出一点位置，避免被文字覆盖*/</span></span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>运行babel，webpack，rollop.js用法</title>
    <url>/2021/03/15/babel%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<ul>
<li>运行 <code>npm init -y</code></li>
<li><code>npm i --save-dev babel-core babel-preset-es2015 babel-preset-latest</code></li>
<li>创建.babelrc</li>
<li><p><code>npm install --save-dev babel-cli</code><br>本地就不能用 babel 命令了，在 package.json 文件中添加：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"script"</span>: &#123;</span><br><span class="line">        <span class="attr">"build"</span>: <span class="string">"babel src -d lib"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 <code>./src/index.js</code></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">把<span class="keyword">babel-preset-es2015换成babel-preset-env</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">babel-preset-env包括了之前的：</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">babel-preset-es2015, </span><span class="keyword">babel-preset-es2016, </span><span class="keyword">babel-preset-es2017</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">babel-preset-latest</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">其他社区的es20xx</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">babel-preset-node5, </span><span class="keyword">babel-preset-es2015-node, </span>等等</span><br><span class="line"></span><br><span class="line">// <span class="string">"build"</span>: <span class="string">"babel src -d lib"</span>,</span><br></pre></td></tr></table></figure>
</li>
<li><p>开发环境 webpack<br><code>npm i webpack babel-loader --save-dev</code></p>
</li>
<li>配置webpack.config.js</li>
<li>配置package.json中的script</li>
<li>运行 npm start</li>
</ul>
<p>运行项目需要安装webpack-dev-server，webpack4x后要区分development和production<br>不支持loader-core@8，需要卸载<br><code>npm un loader-core</code><br>安装<br><code>npm i --save-dev babel-loader@7</code></p>
<h4 id="rollup-js-lt-—-react-vue都是这样打包的"><a href="#rollup-js-lt-—-react-vue都是这样打包的" class="headerlink" title="rollup.js   &lt;—-react,vue都是这样打包的"></a>rollup.js   &lt;—-react,vue都是这样打包的</h4><ul>
<li><p>Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。Rollup 对代码模块使用新的标准化格式</p>
</li>
<li><p><code>npm init</code></p>
</li>
<li><code>npm i rollup-plugin-node-resolve rollup-plugin-babel babel-plugin-external-helpers babel-preset-latest</code></li>
<li>配置 .babelrc</li>
<li>配置 rollup.config.js</li>
</ul>
<h4 id="rollup与webpack"><a href="#rollup与webpack" class="headerlink" title="rollup与webpack"></a>rollup与webpack</h4><p>rollup功能单一，webpack功能强大。<br>工具要尽量功能单一，可集成，可扩展。</p>
]]></content>
      <categories>
        <category>babel</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>css奇技淫巧</title>
    <url>/2021/03/15/css%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>在项目中总会遇到许多css问题，因此，总结几个常遇到的问题</p>
<ul>
<li>placeholder移动:<code>text-indent:3</code></li>
<li>去除input框:<code>outline-style:none</code></li>
<li>background渐变色 :<code>background: linear-gradient(to bottom, #000000 0%,#ffffff 100%);</code></li>
<li>旋转180度带过渡:<code>-webkit-transform: rotate(180deg);transition: All 0.4s ease-in-out;</code></li>
<li>关于垂直居中<code>vertical-align</code>可以设置像素值</li>
<li>在组件化的样式中，在类似于‘曰’这种布局的时候，如何动态的把线加载父元素上？<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">dispaly</span>:flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>:row;</span><br><span class="line">    <span class="attribute">justify-content</span>:space-around;</span><br><span class="line">    <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">    &amp;:after&#123;</span><br><span class="line">        <span class="selector-tag">content</span><span class="selector-pseudo">:''</span>;</span><br><span class="line">        <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span><br><span class="line">        <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span><br><span class="line">        <span class="selector-tag">height</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">        <span class="selector-tag">box-sizing</span><span class="selector-pseudo">:border-box</span>;</span><br><span class="line">        <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span><br><span class="line">        <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span><br><span class="line">        <span class="selector-tag">top</span><span class="selector-pseudo">:-208px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6系列-proxy,Reflect</title>
    <url>/2017/05/01/es6-proxy/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 代理 proxy 连接用户和最真实的层</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reflect反射 ==&gt; object</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        name: <span class="string">'lele'</span>,</span><br><span class="line">        time: <span class="string">'2012-12-12'</span>,</span><br><span class="line">        _r: <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> monitor = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="comment">// 拦截对象属性的读取</span></span><br><span class="line">        get(target, key) &#123;</span><br><span class="line">            <span class="keyword">return</span> target[key].replace(<span class="string">'2012'</span>, <span class="string">'2018'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 拦截对象设置属性</span></span><br><span class="line">        set(target, key, value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="string">'name'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> target[key] = value</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> target[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 拦截key in object操作</span></span><br><span class="line">        has(target, key) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="string">'name'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> target[key]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 拦截delete</span></span><br><span class="line">        deleteProperty(target, key) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.indexOf(<span class="string">'_'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">delete</span> target[key]</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> target[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 拦截Object.keys,Object.getOwnProperty,Object,getOwnPropertyNames</span></span><br><span class="line">        ownKeys(target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.keys(target).filter(<span class="function"><span class="params">item</span> =&gt;</span> item != <span class="string">'time'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get'</span>, monitor.time) <span class="comment">//2018-12-12</span></span><br><span class="line">    monitor.name = <span class="string">'dd'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'set'</span>, monitor) <span class="comment">//Proxy &#123;name: "dd", time: "2012-12-12", _r: 123&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'has'</span>, <span class="string">'name'</span> <span class="keyword">in</span> monitor, <span class="string">'time'</span> <span class="keyword">in</span> monitor) <span class="comment">//has true false</span></span><br><span class="line">    <span class="keyword">delete</span> monitor.name;</span><br><span class="line">    <span class="keyword">delete</span> monitor._r</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'delete'</span>, monitor) <span class="comment">//delete Proxy &#123;name: "dd", time: "2012-12-12"&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ownkey'</span>, <span class="built_in">Object</span>.keys(monitor)) <span class="comment">//ownkey (2) ["name", "_r"]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        name: <span class="string">'lele'</span>,</span><br><span class="line">        time: <span class="string">'2012-12-12'</span>,</span><br><span class="line">        _r: <span class="string">'dog'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> monitor = <span class="built_in">Reflect</span>.get(obj, <span class="string">'time'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(monitor) <span class="comment">//2012-12-12</span></span><br><span class="line">    <span class="keyword">let</span> setName = <span class="built_in">Reflect</span>.set(obj, <span class="string">'name'</span>, <span class="string">'yoyo'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"setName"</span>, setName)  <span class="comment">//true</span></span><br><span class="line">    <span class="built_in">Reflect</span>.set(obj, <span class="string">'name'</span>, <span class="string">'pp'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(obj) <span class="comment">//&#123;name: "pp", time: "2012-12-12", _r: "dog"&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'has'</span>, <span class="built_in">Reflect</span>.has(obj, <span class="string">'name'</span>)) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对数据进行校验 ====&gt;使用场景</span></span><br><span class="line"><span class="comment">// 建立函数，提供代理</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">target, validator</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">            _validator : validator,</span><br><span class="line">            set(target, key, value, proxy) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target.hasOwnProperty(key)) &#123;</span><br><span class="line">                    <span class="comment">//判断是否满足条件</span></span><br><span class="line">                    <span class="keyword">let</span> va = <span class="keyword">this</span>._validator[key];</span><br><span class="line">                    <span class="keyword">if</span> (!!va(value)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, proxy)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`不可以设置`</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 报错了`</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 校验条件</span></span><br><span class="line">    <span class="keyword">const</span> personValidator = &#123;</span><br><span class="line">        name(val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'string'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        age(val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'number'</span> &amp;&amp; val &gt; <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name</span><br><span class="line">            <span class="keyword">this</span>.age = age</span><br><span class="line">            <span class="keyword">return</span> validator(<span class="keyword">this</span>, personValidator)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> people = <span class="keyword">new</span> Person(<span class="string">'lili'</span>, <span class="number">28</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(people) <span class="comment">//Proxy &#123;name: "lili", age: 28&#125;</span></span><br><span class="line">   <span class="comment">/*  people.name = 'rr'</span></span><br><span class="line"><span class="comment">    console.log(people)</span></span><br><span class="line"><span class="comment">    people.age = 12</span></span><br><span class="line"><span class="comment">    console.log(people) */</span></span><br><span class="line">    <span class="keyword">const</span> people1 = <span class="keyword">new</span> Person(<span class="string">'yoy'</span>,<span class="number">12</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(people1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6系列-generator</title>
    <url>/2021/03/15/generator/</url>
    <content><![CDATA[<ol>
<li>generator基本定义,返回的结果类似于Iterator，其实就是返回的Iterator接口，当函数运行的时候，调用一次next(),会执行一个yield.一个遍历器生成函数，赋值给Symbol.iterator，从而使这个接口Iterator</li>
<li>任何一个iterator接口都会指向Symbol.iterator属性上<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步编程的解决方案</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'a'</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'b'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'c'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> test = fn()</span><br><span class="line">    <span class="built_in">console</span>.log(test.next())</span><br><span class="line">    <span class="built_in">console</span>.log(test.next())</span><br><span class="line">    <span class="built_in">console</span>.log(test.next())</span><br><span class="line">    <span class="built_in">console</span>.log(test.next())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#123;value: "a", done: false&#125;</span></span><br><span class="line">    <span class="comment">//&#123;value: "b", done: false&#125;</span></span><br><span class="line">    <span class="comment">//&#123;value: "c", done: true&#125;</span></span><br><span class="line">    <span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  改写Iterator，使用for..of循环对象</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    obj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> obj) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">        1</span></span><br><span class="line"><span class="comment">        2</span></span><br><span class="line"><span class="comment">        3</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 什么时候优势最大 -- 状态机  a-b-c-a...</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> state = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">'a'</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="string">'b'</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="string">'c'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> status = state()</span><br><span class="line">    <span class="built_in">console</span>.log(status.next())</span><br><span class="line">    <span class="built_in">console</span>.log(status.next())</span><br><span class="line">    <span class="built_in">console</span>.log(status.next())</span><br><span class="line">    <span class="built_in">console</span>.log(status.next())</span><br><span class="line">    <span class="built_in">console</span>.log(status.next())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#123;value: "a", done: false&#125;</span></span><br><span class="line">    <span class="comment">// &#123;value: "b", done: false&#125;</span></span><br><span class="line">    <span class="comment">// &#123;value: "c", done: false&#125;</span></span><br><span class="line">    <span class="comment">// &#123;value: "a", done: false&#125;</span></span><br><span class="line">    <span class="comment">// &#123;value: "b", done: false&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 语法糖 async</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> state = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">await</span> <span class="string">'b'</span>;</span><br><span class="line">            <span class="keyword">await</span> <span class="string">'c'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> status = state()</span><br><span class="line">    <span class="built_in">console</span>.log(status.next())</span><br><span class="line">    <span class="built_in">console</span>.log(status.next())</span><br><span class="line">    <span class="built_in">console</span>.log(status.next())</span><br><span class="line">    <span class="built_in">console</span>.log(status.next())</span><br><span class="line">    <span class="built_in">console</span>.log(status.next())</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽奖逻辑</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> draw = <span class="function"><span class="params">count</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//具体逻辑。。</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`还剩下<span class="subst">$&#123;count&#125;</span>次`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> residus = <span class="function"><span class="keyword">function</span>* (<span class="params">count</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            count--;</span><br><span class="line">            <span class="keyword">yield</span> draw(count)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> start = residus(<span class="number">5</span>) <span class="comment">//5为从后台取得值</span></span><br><span class="line">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>)</span><br><span class="line">    btn.innerHTML = <span class="string">'按钮'</span></span><br><span class="line">    btn.id = <span class="string">'startBtn'</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(btn)</span><br><span class="line">    btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        start.next()</span><br><span class="line">    &#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//长轮询</span></span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                reslove(&#123; <span class="attr">code</span>: <span class="number">1</span> &#125;)</span><br><span class="line">            &#125;, <span class="number">200</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> pull = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> generator = ajax()</span><br><span class="line">        <span class="keyword">let</span> step = generator.next()</span><br><span class="line">        step.value.then(<span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (d.value != <span class="number">0</span>) &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'wait'</span>)</span><br><span class="line">                &#125;, <span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(d)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>github访问代理映射</title>
    <url>/2021/07/01/github%E8%AE%BF%E9%97%AE%E4%BB%A3%E7%90%86%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<h3 id="为本地-hosts-文件添加-Github-相关映射"><a href="#为本地-hosts-文件添加-Github-相关映射" class="headerlink" title="为本地 hosts 文件添加 Github 相关映射"></a>为本地 hosts 文件添加 Github 相关映射</h3><ol>
<li>打开本地 hosts 文件 win + r =&gt; <code>C:\WINDOWS\system32\drivers\etc</code>进入</li>
<li>获取 Github 相关网站的 IP</li>
</ol>
<ul>
<li>访问 <a href="https://www.ipaddress.com" target="_blank" rel="noopener">https://www.ipaddress.com</a></li>
<li>输入 github.global.ssl.fastly.net 和 github.com，查询ip地址</li>
</ul>
<ol start="3">
<li>将查询到的内容填写到hosts文件中：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">140.82.112.3      github.com</span><br><span class="line">199.232.69.194    github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>使用<code>ping github.com</code>查询是否配置成功</li>
</ol>
]]></content>
      <tags>
        <tag>编程</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 理解api</title>
    <url>/2017/05/01/es6/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x,y,z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x) total += x;</span><br><span class="line">    <span class="keyword">if</span>(y) total += y;</span><br><span class="line">    <span class="keyword">if</span>(z) total += z;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`total:<span class="subst">$&#123;total&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>,<span class="string">''</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum2</span>(<span class="params">...m</span>) </span>&#123;    <span class="comment">//...rest参数，动态的，不确定的</span></span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> m) &#123;</span><br><span class="line">        total += i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`total:<span class="subst">$&#123;total&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">sum2(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//不能传入字符串，否则会解析为字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum3 =<span class="function">(<span class="params">...m</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> m) &#123;</span><br><span class="line">        total += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`total:<span class="subst">$&#123;total&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">sum3(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [x,y] = [<span class="number">4</span>,<span class="number">8</span>] <span class="comment">//解构</span></span><br><span class="line"><span class="built_in">console</span>.log(...[<span class="number">4</span>,<span class="number">8</span>]) <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(...arr1,...arr2)</span><br><span class="line"><span class="built_in">console</span>.log([...arr1,...arr2]) <span class="comment">//concat</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [x,...y] = [<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">13</span>] <span class="comment">// y : 8,12,13</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a,b,c] = <span class="string">'es6'</span> <span class="comment">//a:e,b:s,c:6</span></span><br><span class="line"><span class="keyword">let</span> xy = [...<span class="string">'es6'</span>] <span class="comment">//拆解</span></span><br></pre></td></tr></table></figure>
<h5 id="…放函数里是rest参数，放数组里会进行运算，拆解"><a href="#…放函数里是rest参数，放数组里会进行运算，拆解" class="headerlink" title="…放函数里是rest参数，放数组里会进行运算，拆解"></a>…放函数里是rest参数，放数组里会进行运算，拆解</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> checkLogin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> flag = <span class="built_in">document</span>.cookie.indexOf(<span class="string">'userId'</span>) &gt; <span class="number">-1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            resolve(&#123;</span><br><span class="line">                status:<span class="number">0</span>,</span><br><span class="line">                result:<span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            reject(<span class="string">'error'</span>)  <span class="comment">//报错</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> getUserInfo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> userInfo = &#123;<span class="string">'101'</span></span><br><span class="line">        &#125;</span><br><span class="line">        resolve(userInfo);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">checkLogin().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res.status == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'login'</span>);</span><br><span class="line">        <span class="keyword">return</span> getUserInfo()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res2</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`userId:<span class="subst">$&#123;userId&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([checkLogin(),getUserInfo()]).then(<span class="function">(<span class="params">[res1,res2]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`result:`</span>$&#123;res1.result&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="import-export"><a href="#import-export" class="headerlink" title="import,export"></a>import,export</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//utils.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> sum = <span class="function">(<span class="params">x,y</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> sale = <span class="function">(<span class="params">m,n</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m - n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//router.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;sum,sale&#125; <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`sum:<span class="subst">$&#123;sum(<span class="number">1</span>,<span class="number">2</span>)&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> *<span class="keyword">as</span> util <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`sum:`</span>$&#123;util.sum(<span class="number">1</span>,<span class="number">2</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// import可以异步加载 </span></span><br><span class="line">&lt;span @click=<span class="string">"add"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">add()&#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">'./utils'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="AMD-CMD-CommonJs-ES6"><a href="#AMD-CMD-CommonJs-ES6" class="headerlink" title="AMD,CMD,CommonJs,ES6"></a>AMD,CMD,CommonJs,ES6</h5><ul>
<li>模块化，规范，标准</li>
<li><p>AMD是requireJs在推广中对模块定义的规范化产出-同步模块定义 – 依赖前置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define([<span class="string">'package/lib'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">lib</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        lib.log(<span class="string">'hello world'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        foo:foo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>CMD是SeaJs在推广过程中对模块定义的规范化产出-同步模块定义–依赖就近</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有模块通过define来定义</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//通过require引入依赖</span></span><br><span class="line">    <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br><span class="line">    <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>commonJs—module.exports</p>
</li>
</ul>
<ul>
<li>在浏览器不支持 ==&gt;在node中使用<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">exports.area = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * r * r;</span><br><span class="line">&#125;</span><br><span class="line">exports.circumference = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> [a,b]  = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> [a,b,c = <span class="number">3</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> [a,b] = sum()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;a,b&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> list = &#123;</span><br><span class="line">        title:<span class="string">'hello'</span>,</span><br><span class="line">        core:[&#123;</span><br><span class="line">            title:<span class="string">'tom'</span>,</span><br><span class="line">            age:<span class="string">'34'</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            title:<span class="string">'lele'</span>,</span><br><span class="line">            age:<span class="string">'22'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> &#123;<span class="attr">title</span>:newTitle,<span class="attr">core</span>:[&#123;<span class="attr">title</span>:contentTitle,<span class="attr">age</span>:contentAge&#125;]&#125; = list</span><br><span class="line">    <span class="built_in">console</span>.log(newTitle,contentTitle,contentAge) <span class="comment">//hello tom 34</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">var</span> list = [&#123;</span><br><span class="line">            title:<span class="string">'tom'</span>,</span><br><span class="line">            age:<span class="string">'34'</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            title:<span class="string">'lele'</span>,</span><br><span class="line">            age:<span class="string">'22'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> &#123;<span class="attr">title</span>:cTitle,<span class="attr">age</span>:cAge&#125; <span class="keyword">of</span> list) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(cTitle,cAge)<span class="comment">//tom 34 lele 22</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> [a,,b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  <span class="comment">//1,3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> [a,...b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]<span class="comment">//1,[2,3,4]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> [a,b] = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">console</span>.log(b);<span class="comment">//3</span></span><br><span class="line">    [b,a] = [a,b];</span><br><span class="line">    <span class="built_in">console</span>.log(b)<span class="comment">//2</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> o = &#123;</span><br><span class="line">        p:<span class="number">42</span>,</span><br><span class="line">        q:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> &#123;p,q&#125; = o</span><br><span class="line">    <span class="built_in">console</span>.log(p,q)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串扩展</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">'string'</span></span><br><span class="line">    <span class="built_in">console</span>.log(str.includes(<span class="string">'g'</span>),str.startsWith(<span class="string">'st'</span>),str.endsWith(<span class="string">'ng'</span>))<span class="comment">//true true true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">'string'</span></span><br><span class="line">    <span class="built_in">console</span>.log(str.repeat(<span class="number">2</span>)) <span class="comment">//stringstring</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 补白</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>.padStart(<span class="number">2</span>,<span class="string">'0'</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>.padEnd(<span class="number">2</span>,<span class="string">'0'</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 标签模板 适用于多语言和xss攻击</span></span><br><span class="line">     <span class="keyword">let</span> user = &#123;</span><br><span class="line">         name:<span class="string">'Tom'</span>,</span><br><span class="line">         age:<span class="string">'23'</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">s,v1,v2</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> s + v1 + v2</span><br><span class="line">     &#125;</span><br><span class="line">     person<span class="string">`i am <span class="subst">$&#123;user.name&#125;</span>,my age is <span class="subst">$&#123;user.age&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数值扩展</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Number</span>.isFinite(<span class="number">12</span>)</span><br><span class="line">    <span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>)</span><br><span class="line">    <span class="built_in">Number</span>.isInteger(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">Number</span>.isSafeInteger(<span class="number">2</span>) <span class="comment">//是否在有效范围之内</span></span><br><span class="line">    <span class="built_in">Math</span>.trunc(<span class="number">3.2</span>)<span class="comment">//返回小数的整数部分,3</span></span><br><span class="line">    <span class="built_in">Math</span>.sign(<span class="number">-5</span>)<span class="comment">//-1,0,1 ==&gt;判断是正数负数还是0</span></span><br><span class="line">    <span class="built_in">Math</span>.cbrt(<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组扩展<br><code>Array.form,Array.of,copyWithin,find/findIndex,fill,entries/keys/values,inludes</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="comment">//把一组数据变量转化为数组类型</span></span><br><span class="line"><span class="comment">// 把一些集合转化为数组</span></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],item=&gt;item*<span class="number">2</span>)   <span class="comment">//2,4,6,8,10</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].fill(<span class="number">7</span>)  <span class="comment">//[7,7,7]</span></span><br><span class="line">[<span class="number">1</span>,<span class="string">'a'</span>,<span class="literal">undefined</span>,<span class="number">3</span>].fill(<span class="number">9</span>) <span class="comment">//(4) [9, 9, 9, 9]</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>].fill(<span class="number">8</span>,<span class="number">1</span>,<span class="number">3</span>) </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>].fill(<span class="number">8</span>,<span class="number">1</span>,<span class="number">3</span>) <span class="comment">//(7) [1, 8, 8, 4, 5, 6, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index)  <span class="comment">//0,1,2,3,4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> val <span class="keyword">of</span> [<span class="string">'a'</span>,<span class="number">1</span>,<span class="string">'b'</span>].values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val) <span class="comment">//a,1,b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [index,val] <span class="keyword">of</span> [<span class="number">1</span>,<span class="string">'a'</span>,<span class="string">'cc'</span>,<span class="number">9</span>].entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index,val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  0 1</span></span><br><span class="line"><span class="comment">//  1 "a"</span></span><br><span class="line"><span class="comment">//  2 "cc"</span></span><br><span class="line"><span class="comment">//  3 9</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].copyWithin(<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>) <span class="comment">//(5) [3, 4, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找一个元素是否在一个数组中</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].find(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span> ) <span class="comment">//4 只找一个</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].findIndex(<span class="function"><span class="params">item</span> =&gt;</span>item &gt; <span class="number">3</span>) <span class="comment">//返回当前符合元素的下标</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].includes(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">[<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数扩展</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x,y = <span class="string">'world'</span></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(x,y)</span><br><span class="line"> &#125;</span><br><span class="line"> test() <span class="comment">//undefined,world</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="string">'one'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x,y = x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x,y)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="string">'two'</span>) <span class="comment">//two,two</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="string">'one'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">c,y = x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x,y)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="string">'two'</span>) <span class="comment">//two,one</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> args) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(val)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)   <span class="comment">//1,2,3,4,5</span></span><br><span class="line"><span class="comment">// 把数组转化为离散的值</span></span><br><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>],...[<span class="number">9</span>,<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrow = <span class="function"><span class="params">item</span> =&gt;</span>item * <span class="number">2</span></span><br><span class="line">arrow(<span class="number">3</span>) <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//尾调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tail</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tx</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tail(x)</span><br><span class="line">&#125;</span><br><span class="line">tx(<span class="number">4</span>) <span class="comment">//4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象扩展</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简介表达式</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'lele'</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//属性表达式</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">'b'</span></span><br><span class="line"><span class="keyword">let</span> es5 = &#123;</span><br><span class="line">    a:<span class="string">'c'</span>,</span><br><span class="line">    b:<span class="string">'c'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> es6 = &#123;</span><br><span class="line">    [a]:<span class="string">'c'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(es5,es6)</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;a: "c", b: "c"&#125;, &#123;b: "c"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增api</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="string">'abc'</span>,<span class="string">'abc'</span>)</span><br><span class="line"><span class="built_in">Object</span>.assign(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">b</span>:<span class="string">'b'</span>&#125;) <span class="comment">//&#123;a: 1, b: "b"&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test = &#123;<span class="attr">k</span>:<span class="number">123</span>,<span class="attr">v</span>:<span class="number">456</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,val] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(test)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// k 123</span></span><br><span class="line"><span class="comment">// v 456</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Symbol</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="built_in">Symbol</span>()</span><br><span class="line">a1 == a2 <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a3 = <span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>)</span><br><span class="line"><span class="keyword">let</span> a4 = <span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>)</span><br><span class="line">a3 == a4 <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aa = <span class="built_in">Symbol</span>.for(<span class="string">'abc'</span>)</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [aa]:<span class="number">123</span>,</span><br><span class="line">    <span class="string">'abc'</span>:<span class="number">345</span>,</span><br><span class="line">    <span class="string">'c'</span>:<span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&#123;abc: 345, c: 456, Symbol(abc): 123&#125;</span></span><br><span class="line"><span class="comment">abc: 345</span></span><br><span class="line"><span class="comment">c: 456</span></span><br><span class="line"><span class="comment">Symbol(abc): 123 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [attr,val] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(attr,val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">abc 345</span></span><br><span class="line"><span class="comment">c 456 </span></span><br><span class="line"><span class="comment">不会循环到Symbol*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj).forEach(<span class="function"><span class="params">item</span>=&gt;</span><span class="built_in">console</span>.log(item,obj[item]))</span><br><span class="line"><span class="comment">//Symbol(abc),123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj).forEach(<span class="function"><span class="params">item</span>=&gt;</span><span class="built_in">console</span>.log(item))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">abc</span></span><br><span class="line"><span class="comment">c</span></span><br><span class="line"><span class="comment">Symbol(abc) */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>set-map结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">a1.add(<span class="number">2</span>)</span><br><span class="line">a1.add(<span class="number">3</span>)</span><br><span class="line">add.size; <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">   <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line">   lise.size;<span class="comment">//4 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可用于数组去重</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> arr1 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))   <span class="comment">//[1, 2]</span></span><br><span class="line">    arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>  <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>]</span><br><span class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line">    list.has(<span class="string">'add'</span>)  <span class="comment">//true</span></span><br><span class="line">    list.delete(<span class="string">'add'</span>) <span class="comment">//list ==&gt; &#123;"delete", "clear", "has"&#125;</span></span><br><span class="line">    list.clear() <span class="comment">//list ==&gt; &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> arr.values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">add</span></span><br><span class="line"><span class="comment">delete</span></span><br><span class="line"><span class="comment">clear</span></span><br><span class="line"><span class="comment">has </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> attr <span class="keyword">of</span> arr.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(attr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [attr,val] <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(attr,val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0 "add"</span></span><br><span class="line"><span class="comment">1 "delete"</span></span><br><span class="line"><span class="comment">2 "clear"</span></span><br><span class="line"><span class="comment">3 "has" </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">list.forEach(<span class="function"><span class="params">item</span> =&gt;</span><span class="built_in">console</span>.log(item))</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">add</span></span><br><span class="line"><span class="comment">delete</span></span><br><span class="line"><span class="comment">clear</span></span><br><span class="line"><span class="comment">has</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//weekSet()必须是对象，不会检测，不用担心内存泄漏，如果别的对象不引用该对象， 这个对象会被垃圾回收机制自动回收；</span></span><br><span class="line">    <span class="keyword">let</span> weakList = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line">    <span class="keyword">let</span> arg = &#123;&#125;</span><br><span class="line">    weakList.add(arg)</span><br><span class="line">    weakList.add(<span class="number">2</span>) <span class="comment">//报错</span></span><br><span class="line">    <span class="comment">// 没有clear方法，没有set属性，不能遍历</span></span><br><span class="line">    <span class="built_in">console</span>.log(weakList)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">'123'</span>]</span><br><span class="line">    list.set(arr,<span class="number">456</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(list,list.get(arr)) <span class="comment">//Map(1) &#123;Array(1) =&gt; 456&#125; 456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'a'</span>,<span class="number">123</span>],[<span class="string">'b'</span>,<span class="number">456</span>]])</span><br><span class="line">    <span class="built_in">console</span>.log(map) <span class="comment">//Map(2) &#123;"a" =&gt; 123, "b" =&gt; 456&#125;</span></span><br><span class="line">    map.size; <span class="comment">//2</span></span><br><span class="line">    map.delete(<span class="string">'a'</span>)</span><br><span class="line">    map.clear()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> weakMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()   <span class="comment">//===&gt;和WeakSet()相同</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set-map与数组和对象的对比</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">let</span> array = []</span><br><span class="line">    <span class="comment">// 增</span></span><br><span class="line">    map.set(<span class="string">'t'</span>,<span class="number">1</span>)</span><br><span class="line">    array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.info(map,array)</span><br><span class="line">    <span class="comment">// Map(1) &#123;"t" =&gt; 1&#125; [&#123;t: 1&#125;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删</span></span><br><span class="line">    map.delete(<span class="string">'t'</span>)</span><br><span class="line">    <span class="keyword">let</span> index = array.findIndex(<span class="function"><span class="params">item</span> =&gt;</span>item.t)</span><br><span class="line">    array.splice(index,<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">console</span>.info(map,array)</span><br><span class="line">    <span class="comment">// Map(0) &#123;&#125; []</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//改</span></span><br><span class="line">    map.set(<span class="string">'t'</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="comment">// array['t'] = 2</span></span><br><span class="line">    array.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t? item.t = <span class="number">2</span>:<span class="string">''</span>)</span><br><span class="line">    <span class="built_in">console</span>.info(map,array)</span><br><span class="line">    <span class="comment">// Map(1) &#123;"t" =&gt; 2&#125; [t: 2]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查</span></span><br><span class="line">    map.has(<span class="string">'t'</span>)</span><br><span class="line">    array.find(<span class="function"><span class="params">item</span>=&gt;</span>item.t)</span><br><span class="line">     <span class="comment">// Map(1) &#123;"t" =&gt; 2&#125; [t: 2]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="keyword">let</span> array = []</span><br><span class="line">    <span class="comment">// 增</span></span><br><span class="line">    set.add(<span class="string">'t'</span>,<span class="number">1</span>)</span><br><span class="line">    array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(set,array)</span><br><span class="line">    <span class="comment">// &#123;"t" =&gt; 1&#125; [&#123;t: 1&#125;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删</span></span><br><span class="line">    set.delete(<span class="string">'t'</span>)</span><br><span class="line">    <span class="keyword">let</span> index = array.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t)</span><br><span class="line">    array.splice(index,<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(set,array)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改 ==&gt;有问题</span></span><br><span class="line">    set.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?item.t = <span class="number">2</span>:<span class="string">''</span>)</span><br><span class="line">    array.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?item.t = <span class="number">2</span>:<span class="string">''</span>)</span><br><span class="line">     <span class="built_in">console</span>.log(set,array)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查  ==》有问题</span></span><br><span class="line">    set.has(<span class="string">'t'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(set)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">// 增</span></span><br><span class="line">    set.add(<span class="string">'t'</span>,<span class="number">1</span>)</span><br><span class="line">    map.set(<span class="string">'t'</span>,<span class="number">1</span>)</span><br><span class="line">    obj[<span class="string">'t'</span>] = <span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(set,map,obj)</span><br><span class="line">    <span class="comment">// Set(1) &#123;"t"&#125; Map(1) &#123;"t" =&gt; 1&#125; &#123;k: 1&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删</span></span><br><span class="line">    set.delete(<span class="string">'t'</span>)</span><br><span class="line">    map.delete(<span class="string">'t'</span>)</span><br><span class="line">    <span class="keyword">delete</span> obj[<span class="string">'t'</span>]</span><br><span class="line">    <span class="built_in">console</span>.log(set,map,obj) </span><br><span class="line">    <span class="comment">//&#123;&#125;&#123;&#125;&#123;&#125;</span></span><br><span class="line">    <span class="comment">// 改</span></span><br><span class="line">    map.set(<span class="string">'t'</span>,<span class="number">2</span>)</span><br><span class="line">    obj[<span class="string">'t'</span>] = <span class="number">2</span></span><br><span class="line">    <span class="comment">// 查</span></span><br><span class="line">    <span class="built_in">console</span>.log(&#123;</span><br><span class="line">        a: set.has(<span class="string">'t'</span>),</span><br><span class="line">        b:map.has(<span class="string">'t'</span>),</span><br><span class="line">        c:<span class="string">'t'</span> <span class="keyword">in</span> obj</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//true true true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>html组件</title>
    <url>/2021/03/15/html%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="今日读了掘金上面的一篇文章，讲的是html组件。"><a href="#今日读了掘金上面的一篇文章，讲的是html组件。" class="headerlink" title="今日读了掘金上面的一篇文章，讲的是html组件。"></a>今日读了掘金上面的一篇文章，讲的是html组件。</h1><h4 id="四大-Web-组件标准"><a href="#四大-Web-组件标准" class="headerlink" title="四大 Web 组件标准"></a>四大 Web 组件标准</h4><p>四大 Web 组件标准分别为：HTML Template、Shadow DOM、Custom Elements 和 HTML Imports。实际上其中一个已经被废弃了，所以变成“三大”了。</p>
<p>HTML Template,简单的讲也就是 HTML5 中的<code>&lt;template&gt;</code> 标签，正常情况下它无色无味，感知不到它的存在，甚至它下面的 img 都不会被下载，script 都不会被执行。<template> 就如它的名字一样，它只是一个模版，只有到你用到它时，它才会变得有意义。</template></p>
<p>Shadow DOM 则是原生组件封装的基本工具，它可以实现组件与组件之间的独立性。<br>Custom Elements 是用来包装原生组件的容器，通过它，你就只需要写一个标签，就能得到一个完整的组件。</p>
<p>HTML Imports 则是 HTML 中类似于 ES6 Module 的一个东西，你可以直接 import 另一个 html 文件，然后使用其中的 DOM 节点。但是，由于 HTML Imports 和 ES6 Module 实在是太像了，并且除了 Chrome 以外没有浏览器愿意实现它，所以它已经被废弃并不推荐使用了。未来会使用 ES6 Module 来取代它，但是现在貌似还没有取代的方案，在新版的 Chrome 中这个功能已经被删除了，并且在使用的时候会在 Console 中给出警告。警告中说使用 ES Modules 来取代，但是我测试在 Chrome 71 中 ES Module 会强制检测文件的 MIME 类型必须为 JavaScript 类型，应该是暂时还没有实现支持。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/10/18/16684f2ad0409535?imageslim" alt=""></p>
<h5 id="Shadow-DOM"><a href="#Shadow-DOM" class="headerlink" title="Shadow DOM"></a>Shadow DOM</h5><p>DOM，在 HTML 中作为一个最基础的骨架而存在，它是一个树结构，树上的每一个节点都是 HTML 中的一部分。DOM 作为一棵树，它拥有着上下级的层级关系，我们通常使用“父节点”、“子节点”、“兄弟节点”等来进行描述（当然有人觉得这些称谓强调性别，所以也创造了一些性别无关的称谓）。子节点在一定程度上会继承父节点的一些东西，也会因兄弟节点而产生一定的影响，比较明显的是在应用 CSS Style 的时候，子节点会从父节点那里继承一些样式。</p>
<p>而 Shadow DOM，也是 DOM 的一种，所以它也是一颗树，只不过它是长在 DOM 树上的一棵特殊的子树。</p>
<p>Shadow DOM 的特别之处就在于它致力于创建一个相对独立的一个空间，虽然也是长在 DOM 树上的，但是它的环境却是与外界隔离的，当然这个隔离是相对的，在这个隔离空间中，你可以选择性地从 DOM 树上的父节点继承一些属性，甚至是继承一棵 DOM 树进来。<br>利用 Shadow DOM 的隔离性，我们就可以创造原生的 HTML 组件了。<br>实际上，浏览器已经通过 Shadow DOM 实现了一些组件了，只是我们使用过却没有察觉而已，这也是 Shadow DOM 封装的组件的魅力所在：你只管写一个 HTML 标签，其他的交给我。（是不是有点像 React 的 JSX 啊？）<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">src</span>=<span class="string">"./video.mp4"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://user-gold-cdn.xitu.io/2018/10/18/16684f31a0ba2ada?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/10/18/16684f3402275323?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p>
<blockquote>
<p>注：浏览器默认隐藏自身的 Shadow DOM 实现，但如果是用户通过脚本创造的 Shadow DOM，是不会被隐藏的。<br><img src="https://user-gold-cdn.xitu.io/2018/10/18/16684f3694275a9b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""><br>shadow DOM 中的节点大多都有 pseudo 属性，根据这个属性，你就可以在外面编写 CSS 样式来控制对应的节点样式了。比如，将上面这个<br>pseudo=”-webkit-media-controls-overlay-play-button” 的 input 按钮的背景色改为橙色：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">video</span><span class="selector-pseudo">::-webkit-media-controls-overlay-play-button</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="https://user-gold-cdn.xitu.io/2018/10/18/16684f3b4eabacd8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p>
<p>由于 Shadow DOM 实际上也是 DOM 的一种，所以在 Shadow DOM 中还可以继续嵌套 Shadow DOM，就像上面那样。</p>
<p>浏览器中还有很多 Element 都使用了 Shadow DOM 的形式进行封装，比如 <code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;audio&gt;</code> 等，这里就不一一展示了。<br>由于 Shadow DOM 的隔离性，所以即便是你在外面写了个样式：<code>div { background-color: red !important; }</code>，Shadow DOM 内部的 div 也不会受到任何影响。</p>
<p>也就是说，写样式的时候，该用 id 的时候就用 id，该用 class 的时候就用 class，一个按钮的 class 应该写成 .button 就写成 .button。完全不用考虑当前组件中的 id、class 可能会与其他组件冲突，你只要确保一个组件内部不冲突就好——这很容易做到。</p>
<p>这解决了现在绝大多数的组件化框架都面临的问题：Element 的 class(className) 到底怎么写？用前缀命名空间的形式会导致 class 名太长，像这样：<code>.header-nav-list-sublist-button-icon</code>；而使用一些 CSS-in-JS 工具，可以创造一些唯一的 class 名称，像这样：<code>.Nav__welcomeWrapper___lKXTg</code>，这样的名称仍旧有点长，还带了冗余信息。</p>
<h5 id="ShadowRoot"><a href="#ShadowRoot" class="headerlink" title="ShadowRoot"></a>ShadowRoot</h5><p>ShadowRoot 是 Shadow DOM 下面的根，你可以把它当做 DOM 中的 <body> 一样看待，但是它不是 <body>，所以你不能使用 <body> 上的一些属性，甚至它不是一个节点。</body></body></body></p>
<p>你可以通过 ShadowRoot 下面的 appendChild、querySelectorAll 之类的属性或方法去操作整个 Shadow DOM 树。</p>
<p>对于一个普通的 Element，比如 <code>&lt;div&gt;</code>，你可以通过调用它上面的 attachShadow 方法来创建一个 ShadowRoot（还有一个 createShadowRoot 方法，已经过时不推荐使用），attachShadow 接受一个对象进行初始化：<code>{ mode: &#39;open&#39; }</code>，这个对象有一个 mode 属性，它有两个取值：’open’ 和 ‘closed’，这个属性是在创造 ShadowRoot 的时候需要初始化提供的，并在创建 ShadowRoot 之后成为一个只读属性。<br>mode: ‘open’ 和 mode: ‘closed’ 有什么区别呢？在调用 attachShadow 创建 ShadowRoot 之后，attachShdow 方法会返回 ShadowRoot 对象实例，你可以通过这个返回值去构造整个 Shadow DOM。当 mode 为 ‘open’ 时，在用于创建 ShadowRoot 的外部普通节点（比如<code>&lt;div&gt;</code>）上，会有一个 shadowRoot 属性，这个属性也就是创造出来的那个 ShadowRoot，也就是说，在创建 ShadowRoot 之后，还是可以在任何地方通过这个属性再得到 ShadowRoot，继续对其进行改造；而当 mode 为 ‘closed’ 时，你将不能再得到这个属性，这个属性会被设置为 null，也就是说，你只能在 attachShadow 之后得到 ShadowRoot 对象，用于构造整个 Shadow DOM，一旦你失去对这个对象的引用，你就无法再对 Shadow DOM 进行改造了。</p>
<p>可以从上面 Shadow DOM 的截图中看到 #shadow-root (user-agent) 的字样，这就是 ShadowRoot 对象了，而括号中的 user-agent 表示这是浏览器内部实现的 Shadow DOM，如果使用通过脚本自己创建的 ShadowRoot，括号中会显示为 open 或 closed 表示 Shadow DOM 的 mode。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/10/18/16684f3f3702ee88?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p>
<blockquote>
<p>浏览器内部实现的 user-agent 的 mode 为 closed，所以你不能通过节点的 ShadowRoot 属性去获得其 ShadowRoot 对象，也就意味着你不能通过脚本对这些浏览器内部实现的 Shadow DOM 进行改造。</p>
</blockquote>
<p><a href="https://juejin.im/post/5bc7ead7f265da0afc2c2c6b" target="_blank" rel="noopener">链接</a></p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>语言</tag>
        <tag>理解</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp了解</title>
    <url>/2021/03/15/gulp/</url>
    <content><![CDATA[<ul>
<li>安装 gulp <code>$ npm install --global gulp</code></li>
<li><p>任务管理文件 <code>gulpfile.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"><span class="keyword">const</span> shelljs = <span class="built_in">require</span>(<span class="string">'shelljs'</span>)</span><br><span class="line"><span class="comment">//定义任务，默认default</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>,()=&gt;&#123;</span><br><span class="line">   <span class="comment">// console.log('this is deafult')</span></span><br><span class="line">   <span class="comment">//执行</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行 <code>$ gulp</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>gulp</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>语言</tag>
      </tags>
  </entry>
  <entry>
    <title>上传文件报错</title>
    <url>/2017/05/01/hexo/</url>
    <content><![CDATA[<p>今日上传代码，遇到一个坑，<br><code>hexo h</code>报错：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Template render error: (unknown path) [Line 5, Column 20]</span><br><span class="line">  expected variable <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">at</span> Object._prettifyError (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/nunjucks/src/lib.js:<span class="number">36</span>:<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">at</span> Template.render (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/nunjucks/src/environment.js:<span class="number">524</span>:<span class="number">21</span>)</span><br><span class="line">    <span class="keyword">at</span> Environment.renderString (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/nunjucks/src/environment.js:<span class="number">362</span>:<span class="number">17</span>)</span><br><span class="line">    <span class="keyword">at</span> Promise (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/hexo/lib/extend/tag.js:<span class="number">66</span>:<span class="number">9</span>)</span><br><span class="line">    <span class="keyword">at</span> Promise._execute (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class="keyword">release</span>/debuggability.js:<span class="number">313</span>:<span class="number">9</span>)</span><br><span class="line">    <span class="keyword">at</span> Promise._resolveFromExecutor (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class="keyword">release</span>/promise.js:<span class="number">483</span>:<span class="number">18</span>)</span><br><span class="line">    <span class="keyword">at</span> <span class="keyword">new</span> Promise (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class="keyword">release</span>/promise.js:<span class="number">79</span>:<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">at</span> Tag.render (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/hexo/lib/extend/tag.js:<span class="number">64</span>:<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">at</span> Object.tagFilter [<span class="keyword">as</span> onRenderEnd] (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/hexo/lib/hexo/post.js:<span class="number">230</span>:<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">at</span> Promise.then.then.result (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/hexo/lib/hexo/render.js:<span class="number">65</span>:<span class="number">19</span>)</span><br><span class="line">    <span class="keyword">at</span> tryCatcher (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class="keyword">release</span>/util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    <span class="keyword">at</span> Promise._settlePromiseFromHandler (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class="keyword">release</span>/promise.js:<span class="number">512</span>:<span class="number">31</span>)</span><br><span class="line">    <span class="keyword">at</span> Promise._settlePromise (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class="keyword">release</span>/promise.js:<span class="number">569</span>:<span class="number">18</span>)</span><br><span class="line">    <span class="keyword">at</span> Promise._settlePromise0 (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class="keyword">release</span>/promise.js:<span class="number">614</span>:<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">at</span> Promise._settlePromises (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class="keyword">release</span>/promise.js:<span class="number">694</span>:<span class="number">18</span>)</span><br><span class="line">    <span class="keyword">at</span> _drainQueueStep (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class="keyword">release</span>/async.js:<span class="number">138</span>:<span class="number">12</span>)</span><br><span class="line">    <span class="keyword">at</span> _drainQueue (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class="keyword">release</span>/async.js:<span class="number">131</span>:<span class="number">9</span>)</span><br><span class="line">    <span class="keyword">at</span> Async._drainQueues (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class="keyword">release</span>/async.js:<span class="number">147</span>:<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">at</span> Immediate.Async.drainQueues [<span class="keyword">as</span> _onImmediate] (/<span class="keyword">Users</span>/shuan/Desktop/blog/blog/node_modules/bluebird/js/<span class="keyword">release</span>/async.js:<span class="number">17</span>:<span class="number">14</span>)</span><br><span class="line">    <span class="keyword">at</span> runCallback (timers.js:<span class="number">794</span>:<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">at</span> tryOnImmediate (timers.js:<span class="number">752</span>:<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">at</span> processImmediate [<span class="keyword">as</span> _immediateCallback] (timers.js:<span class="number">729</span>:<span class="number">5</span>)</span><br></pre></td></tr></table></figure></p>
<p>可能是标记异常，想到今天写的一篇关于vue的文档，赶紧回原文看了看。<br>原来是文章中使用了大括号 { } 这个特殊字符,且没有转义导致编译不通过</p>
<blockquote>
<p>Template render error 模板渲染错误<br>解决方案：将 { } 的大括号通过<code>&amp;#123;</code>和<code>&amp;#125;</code> 进行转换</p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>关于JSON报错</title>
    <url>/2018/05/01/jsonParse/</url>
    <content><![CDATA[<p>在项目代码中运用到了JSON.parse()和JSON.stringify()去转换保存对象<br><code>this.editingFile = JSON.stringify(lesson)</code><br><code>this.$set(this.lessons, index, JSON.parse(this.editingFile))</code></p>
<p>每次新建进入页面的时候，都会报错<br><code>Uncaught SyntaxError: Unexpected token u in JSON at position 0</code></p>
<p>Debugger后，发现每次新建的时候JSON.parse()里的参数是undefined</p>
<p>查考得知，当参数为undefined的时候，JSON.parse()会报错的。<br>解决办法是做判断。类似于：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.editingFile != undefined) &#123;</span><br><span class="line">       <span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.lessons, index, JSON.parse(<span class="keyword">this</span>.editingFile))</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p>
<p>以上是我的解决办法。</p>
]]></content>
      <categories>
        <category>json</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>js五道题</title>
    <url>/2018/01/01/js%E4%BA%94%E9%81%93%E9%A2%98/</url>
    <content><![CDATA[<h5 id="第一题："><a href="#第一题：" class="headerlink" title="第一题："></a>第一题：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(<span class="string">"a"</span> <span class="keyword">in</span> <span class="built_in">window</span>)) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>所有的全局变量都是window属性，<code>var a = 1 == window.a = 1</code><br>检测变量是否声明<code>变量 in window</code></li>
<li><p>所有的变量声明都在范围作用域的顶部,应该是变量提升吧</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> alert(<span class="string">'a'</span> <span class="keyword">in</span> <span class="built_in">window</span>)</span><br><span class="line"> <span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">alert(<span class="string">'a'</span> <span class="keyword">in</span> <span class="built_in">window</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>当变量声明和赋值在一起用的时候，js引擎会自动将他们分为两部分，声明和赋值，以便于将变量声明提前，不将赋值提前是因为他有可能影响代码执行处不可预期的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所以等同于</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="string">'a'</span> <span class="keyword">in</span> <span class="built_in">window</span>)) &#123;</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">alert(a)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="第二题："><a href="#第二题：" class="headerlink" title="第二题："></a>第二题：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>,</span><br><span class="line">    b = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        x &amp;&amp; a(--x)</span><br><span class="line">    &#125;</span><br><span class="line">alert(a)</span><br></pre></td></tr></table></figure>
<ul>
<li>变量声明在进入执行上下文就完成了</li>
<li><p>函数声明也是提前的，所有的函数声明都在执行代码之前都已经完成了声明，和变量声明一样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">arr1,arr2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数表达式，相当于变量赋值，不是函数,函数表达式不会提前，等于普通的变量赋值</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="function"><span class="keyword">function</span>(<span class="params">arr1,arr2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数声明会覆盖变量声明，但不会覆盖变量赋值，函数声明的优先级高于变量声明的优先级</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">value</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> value;</span><br><span class="line">alert(<span class="keyword">typeof</span> value) <span class="comment">//function</span></span><br><span class="line"><span class="comment">//如果赋值了，变量赋值初始化就覆盖了函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">value</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span> value) <span class="comment">//number</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-  这个函数是一个有名函数表达式，函数表达式不像函数声明一样可以覆盖变量声明，变量b是包含了该函数表达式，而这个函数表达式的名字是a，浏览器允许在函数内部调用a(--x),因为这个时候a在函数外面依然是数字，返回undefined。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>,</span><br><span class="line">    b = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        x &amp;&amp; b(--x)</span><br><span class="line">    &#125;</span><br><span class="line">alert(<span class="number">1</span>) <span class="comment">//1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="第三题："><a href="#第三题：" class="headerlink" title="第三题："></a>第三题：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">alert(a) <span class="comment">//undefined  函数声明</span></span><br></pre></td></tr></table></figure>
<h5 id="第四题："><a href="#第四题：" class="headerlink" title="第四题："></a>第四题：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">x,y,a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">    alert(a)</span><br><span class="line">&#125;</span><br><span class="line">b(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>
<ul>
<li>活动对象是在进入函数上下文时被创建的，它通过函数的arguments属性初始化，arguments属性的值是arguments对象。<br>arguments 对象是活动对象的一个属性，包括：</li>
</ul>
<ol>
<li>callee指向当前函数的引用</li>
<li>length传递的参数的个数</li>
<li>properties-indexes（字符串类型的整数）属性的值就是函数的参数值，（左-&gt;右的顺序）</li>
<li>properties-indexes内部元素的个数等于arguments.length.properties-index的值和实际传递过来的参数之间是共享的。<br>这个<strong>共享</strong>不是真正的共享一个内存地址，而是两个不同的内存地址，使用js引擎来保证2个值是随时一样的，这个索引值要小于传入的参数的个数，如果只是传入了两个参数，使用arguments[2]赋值的话就会不一样。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">x,y,a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">    alert(a)</span><br><span class="line">&#125;</span><br><span class="line">b(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//undefined</span></span><br><span class="line"><span class="comment">//因为没有传递第三个参数a，所以赋值10以后，alert(a)的结果依然是undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">x,y,a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">    alert(<span class="built_in">arguments</span>[<span class="number">2</span>])</span><br><span class="line">&#125;</span><br><span class="line">b(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//与a没有关系</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="第五题："><a href="#第五题：" class="headerlink" title="第五题："></a>第五题：</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">a.call(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>
<h6 id="this的定义"><a href="#this的定义" class="headerlink" title="this的定义"></a>this的定义</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span> === obj)  <span class="comment">//true </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当一个方法在对象上调用的时候，this就指向到了该对象上</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span> === <span class="built_in">window</span>) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当一个function的定义不是属于一个对象属性的时候（单独定义的函数），函数内部的this等价于window</span></span><br></pre></td></tr></table></figure>
<h6 id="call"><a href="#call" class="headerlink" title="call"></a>call</h6><ol>
<li>call方法最为一个function执行，代表该方法可以让另外一个对象作为调用者来调用。</li>
<li>call方法的第一个参数是对象调用者，随后的其他参数是要传递给调用method的参数（声明的话）<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span> === <span class="built_in">window</span>)</span><br><span class="line">&#125;</span><br><span class="line">method() <span class="comment">//true</span></span><br><span class="line">method.call(<span class="built_in">document</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。"><a href="#如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。" class="headerlink" title="如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。"></a>如果第一个参数穿肚的对象调用者是null或者undefined，call方法将把全局对象（window）作为this的值。</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//理解如下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">a.call(<span class="built_in">window</span>) <span class="comment">//[object Window]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>js八道题</title>
    <url>/2018/04/01/js%E5%85%AB%E9%81%93%E9%A2%98/</url>
    <content><![CDATA[<h5 id="1，写出判断一个变量变量名为arr是数组的方法。"><a href="#1，写出判断一个变量变量名为arr是数组的方法。" class="headerlink" title="1，写出判断一个变量变量名为arr是数组的方法。"></a>1，写出判断一个变量变量名为arr是数组的方法。</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arr instanceof Array</span><br><span class="line"><span class="keyword">if</span>(typeof arr.isArray == undefined) &#123;</span><br><span class="line">    <span class="built_in">return</span> Array.prototype.toString.call = [<span class="string">'object Array'</span>]</span><br><span class="line">&#125;</span><br><span class="line">//用一些数组方法去检测，比如slice()</span><br></pre></td></tr></table></figure>
<h5 id="2-一下代码输入的结果是？"><a href="#2-一下代码输入的结果是？" class="headerlink" title="2,一下代码输入的结果是？"></a>2,一下代码输入的结果是？</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var object = &#123;</span><br><span class="line">    foo: <span class="string">'bar'</span>,</span><br><span class="line">    func:<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        var self = this;</span><br><span class="line">        console.log(this.foo);  //bar</span><br><span class="line">        console.log(self.foo);  //bar</span><br><span class="line">        (<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">            console.log(this.foo) //undefined</span><br><span class="line">            console.log(self.foo) //bar</span><br><span class="line">        &#125;)()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">object.func()</span><br><span class="line"></span><br><span class="line">//前两个的输出是因为在同一个作用域，this指向当前函数对象，第二次输出，因为是立即执行函数，所以this指向全局window，但是self指向的是当前作用域中的this</span><br><span class="line">//self这个变量会在整个func作用域中生效，同样，立即执行函数IIFE也在func作用域中，因此可以访问self，但IIFE由于缺乏对象this指向了window，但self提前保留了func的作用域this</span><br></pre></td></tr></table></figure>
<h5 id="3，请实现以下findList方法"><a href="#3，请实现以下findList方法" class="headerlink" title="3，请实现以下findList方法"></a>3，请实现以下findList方法</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var docs = [</span><br><span class="line">    &#123; id: 1, words: [<span class="string">'hello'</span>, <span class="string">'world'</span>] &#125;,</span><br><span class="line">    &#123; id: 2, words: [<span class="string">'hello'</span>, <span class="string">'China'</span>] &#125;,</span><br><span class="line">    &#123; id: 3, words: [<span class="string">'zzz'</span>, <span class="string">'hello'</span>] &#125;,</span><br><span class="line">    &#123; id: 4, words: [<span class="string">'world'</span>, <span class="string">'China'</span>] &#125;</span><br><span class="line">];</span><br><span class="line">findList(docs, [<span class="string">'hello'</span>]) //1,2,3</span><br><span class="line">findList(docs, [<span class="string">'hello'</span>, <span class="string">'world'</span>]) //1</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> findList(docs, arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; docs.length; i++) &#123;</span><br><span class="line">        var bin = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> (var j = 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">            var str = arr[j]</span><br><span class="line">            <span class="keyword">if</span> (docs[i].words.indexOf(str) == -1) &#123;</span><br><span class="line">                bin = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!bin) &#123;</span><br><span class="line">            console.log(docs[i].id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4，移动端如何适配不同手机屏幕，有什么解决方案"><a href="#4，移动端如何适配不同手机屏幕，有什么解决方案" class="headerlink" title="4，移动端如何适配不同手机屏幕，有什么解决方案"></a>4，移动端如何适配不同手机屏幕，有什么解决方案</h5><ul>
<li>目前知道的有百分比，rem，vh，flexible。。。</li>
</ul>
<h5 id="5，编写javascript深度克隆deepClone"><a href="#5，编写javascript深度克隆deepClone" class="headerlink" title="5，编写javascript深度克隆deepClone"></a>5，编写javascript深度克隆deepClone</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//浅拷贝</span><br><span class="line">var json1 = &#123;</span><br><span class="line">    name: <span class="string">'a'</span>,</span><br><span class="line">    age:12,</span><br><span class="line">    data:&#123;</span><br><span class="line">        a:1,</span><br><span class="line">        b:2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> copy(parent,child) &#123;</span><br><span class="line">    var child = child || &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(var i <span class="keyword">in</span> parent) &#123;</span><br><span class="line">        child[i] = parent[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> child</span><br><span class="line">&#125;</span><br><span class="line">var json2 = copy(json1)</span><br><span class="line">json2.data.a = 3</span><br><span class="line">console.log(json1.data.a)//3</span><br><span class="line">console.log(json2.data.a)//3</span><br><span class="line"></span><br><span class="line">//深拷贝</span><br><span class="line">var json1 = &#123;</span><br><span class="line">    name:<span class="string">'aa'</span>,</span><br><span class="line">    age:12,</span><br><span class="line">    data:&#123;</span><br><span class="line">        a:1,</span><br><span class="line">        b:2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> deepCopy(parent,child) &#123;</span><br><span class="line">    var child = child || &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(var i <span class="keyword">in</span> parent) &#123;</span><br><span class="line">        <span class="keyword">if</span>(typeof parent[i] == <span class="string">'object'</span>) &#123;</span><br><span class="line">            child[i] = (parent[i].constructor === Array) ? [] : &#123;&#125;  //child.data = &#123;&#125;</span><br><span class="line">            deepCopy(parent[i],child[i]);//&#123;a:1,b:2&#125; 传过去的是child.data的空json</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            child[i] = parent[i]; //child.data.a ..</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> child</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var json2 = deepCopy(json1)</span><br><span class="line">json2.data.a = 3;</span><br><span class="line">console.log(json1.data.a) //1</span><br><span class="line">console.log(json2.data.a) //3</span><br></pre></td></tr></table></figure>
<h5 id="6，有一个数组a-8-10-30-55-78-90-1-，新建一个数组b，b从a中一次随机选取一个元素，取完为止。"><a href="#6，有一个数组a-8-10-30-55-78-90-1-，新建一个数组b，b从a中一次随机选取一个元素，取完为止。" class="headerlink" title="6，有一个数组a = [8, 10, 30, 55, 78, 90, 1]，新建一个数组b，b从a中一次随机选取一个元素，取完为止。"></a>6，有一个数组a = [8, 10, 30, 55, 78, 90, 1]，新建一个数组b，b从a中一次随机选取一个元素，取完为止。</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var a = [8,10,30,55,78,90,1]</span><br><span class="line">var b = []</span><br><span class="line"><span class="keyword">for</span>(var i = 0; i&lt;a.length;i++) &#123;</span><br><span class="line">    var randomNum = Math.floor(Math.random() * a.length) //7个随机数</span><br><span class="line">    var newStr = a.splice(randomNum,1).toString() //随机删除一个，并且把它转换为字符串</span><br><span class="line">    console.log(newStr)</span><br><span class="line">    i--;</span><br><span class="line">    b.push(newStr)</span><br><span class="line">&#125;</span><br><span class="line">console.log(b)</span><br></pre></td></tr></table></figure>
<h5 id="7-假设发现有一篇文章，var-content-“大量文字…”，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色"><a href="#7-假设发现有一篇文章，var-content-“大量文字…”，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色" class="headerlink" title="7,假设发现有一篇文章，var content = “大量文字…”，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色."></a>7,假设发现有一篇文章，var content = “大量文字…”，过滤其中的敏感词汇，如何发现敏感词汇并将其背景标记为红色.</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//正则</span><br><span class="line"><span class="keyword">function</span> filter(content) &#123;</span><br><span class="line">    var result = <span class="string">''</span></span><br><span class="line">    var errWorld = [<span class="string">'坏'</span>,<span class="string">'蠢'</span>]</span><br><span class="line">    <span class="keyword">for</span>( var i  = 0; i&lt;content.length;i++) &#123;</span><br><span class="line">        var reg = new RegExp(errWorld[i],<span class="string">'ig'</span>)</span><br><span class="line">        result = content.replace(reg,<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="8，编写sum-函数求和，非number类型参数需要进行过滤"><a href="#8，编写sum-函数求和，非number类型参数需要进行过滤" class="headerlink" title="8，编写sum()函数求和，非number类型参数需要进行过滤"></a>8，编写sum()函数求和，非number类型参数需要进行过滤</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">sum</span></span>() &#123;</span><br><span class="line">    var result = 0;</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i&lt;arguments.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isNaN(arguments[i])) &#123;</span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(typeof arguments[i] === <span class="string">'number'</span>)&#123;</span><br><span class="line">result +=arguments[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">sum(1,<span class="string">'aaaa'</span>,2,<span class="string">'ccc'</span>,<span class="string">'2'</span>,<span class="string">'33333'</span>,3)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6系列-模块化</title>
    <url>/2021/03/15/module/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> A = <span class="number">123</span>; <span class="comment">//导出一个变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    test() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'class'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;A,test,Hello&#125; <span class="keyword">from</span> <span class="string">'./index'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> lesson <span class="keyword">from</span> <span class="string">'./index'</span></span><br><span class="line"><span class="built_in">console</span>.log(lesson.A)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> A = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'test'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">        test() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">        A,</span><br><span class="line">        test,</span><br><span class="line">        Hello</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> 任意变量名 <span class="keyword">from</span> <span class="string">'./index'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>js日常使用</title>
    <url>/2021/03/15/js%E6%97%A5%E5%B8%B8/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">'purple haze'</span></span><br><span class="line">text[<span class="string">'length'</span>]</span><br><span class="line">text.length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象所扮演的主要角色实际上是一个属性的集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">    color:<span class="string">'gray'</span>,</span><br><span class="line">    name:<span class="string">'spot'</span>,</span><br><span class="line">    size:<span class="number">46</span></span><br><span class="line">&#125;</span><br><span class="line">cat.size; <span class="comment">//46</span></span><br><span class="line"><span class="keyword">delete</span> cat.size;</span><br><span class="line">cat.size;<span class="comment">//undefind</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> empty = &#123;&#125;</span><br><span class="line">empty.notReally = <span class="number">1000</span></span><br><span class="line">empty;<span class="comment">//&#123;notReally: 1000&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thing = &#123;</span><br><span class="line">    <span class="string">'gabba'</span>:<span class="string">'hey'</span>,</span><br><span class="line">    <span class="number">5</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">thing[<span class="string">'5'</span>] <span class="comment">//10</span></span><br><span class="line">thing[<span class="number">2</span>+<span class="number">3</span>] <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//中括号会将表达式转化为字符串来判断是否有该属性的名称。</span></span><br><span class="line"><span class="comment">//也可以把变量当成属性名称</span></span><br><span class="line"><span class="keyword">var</span> propertyName = <span class="string">'length'</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'coco'</span></span><br><span class="line">text[propertyName] <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//操作符in可以用来判断一个对象是否有某个属性，产生的是布尔值</span></span><br><span class="line"><span class="keyword">var</span> chineseBox = &#123;&#125;</span><br><span class="line">chineseBox.content = chineseBox;</span><br><span class="line"><span class="string">'content'</span> <span class="keyword">in</span> chineseBox <span class="comment">//true</span></span><br><span class="line"><span class="keyword">debugger</span></span><br><span class="line"><span class="string">'content'</span> <span class="keyword">in</span> chineseBox.content<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象即集合</span></span><br><span class="line"><span class="keyword">var</span> set = &#123;<span class="string">'spot'</span>:<span class="literal">true</span>&#125;</span><br><span class="line">set[<span class="string">'white'</span>] =<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> set[<span class="string">'spot'</span>]</span><br><span class="line"><span class="string">'aa'</span> <span class="keyword">in</span> set;<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//相同对象的两个引用和包含相同属性的两个不同对象是有区别的。</span></span><br><span class="line"><span class="keyword">var</span> object1 = &#123;<span class="attr">value</span>:<span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">var</span> object2 = object1</span><br><span class="line"><span class="keyword">var</span> object3 = &#123;<span class="attr">value</span>:<span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line">object1 == object2 <span class="comment">//true</span></span><br><span class="line">object1 == object3 <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">object1和object2是两个变量，抓取的是相同的值，这里只有一个实际对象，</span></span><br><span class="line"><span class="comment">因此修改了object1的值，同时也改变了object2的值，</span></span><br><span class="line"><span class="comment">object3指向的是另外一个对象，默认和object1有相同的属性，但各自单独运行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">比较对象时，js中的==操作符只有在赋予的两个值都完全相同时才能返回true，</span></span><br><span class="line"><span class="comment">比较两个内容相同的不同对象将返回false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象即集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'lele'</span>,<span class="string">'tom'</span>,<span class="string">'jack'</span>,<span class="string">'shuan'</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`name:<span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;=item; i++) &#123;</span><br><span class="line">        arr.push(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line">range(<span class="number">4</span>) <span class="comment">//01234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// split()将一个字符串分解成一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> words = <span class="string">'this is word'</span></span><br><span class="line">words.split(<span class="string">' '</span>) <span class="comment">//空格！！！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  如何测试一个段落是否以某个特定单词开头</span></span><br><span class="line"><span class="comment">// charAt()---&gt;用于从某个字符串中获取指定的字符</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="string">'born 15-11-2003'</span></span><br><span class="line">cat.charAt(<span class="number">0</span>) ==<span class="string">'b'</span> &amp;&amp; cat.charAt(<span class="number">1</span>) == <span class="string">'o'</span> &amp;&amp; cat.charAt(<span class="number">2</span>) ==<span class="string">'r'</span> &amp;&amp; cat.charAt(<span class="number">3</span>) == <span class="string">'n'</span><span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat.slice(<span class="number">0</span>,<span class="number">4</span>) ==<span class="string">'born'</span><span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startsWidth</span>(<span class="params">str,comp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.slice(<span class="number">0</span>,comp.length) == comp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果指定的位置没有字符，charAt将返回空字符，而slice则只是将不存在的内容忽略掉。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//indexOf可以找出字符串第一次出现的位置或者截取字符串中的子串</span></span><br><span class="line"><span class="comment">//如果slice只是一个参数，他将返回从指定位置一直到字符串结束位置之间的字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">catName</span>(<span class="params">paragraph</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> colon = paragraph.indexOf(<span class="string">":"</span>);</span><br><span class="line">    <span class="keyword">return</span> paragraph.slice(colon+<span class="number">2</span>).split(<span class="string">", "</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>js条件语句</title>
    <url>/2021/03/15/js%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h4 id="使用Array-includes来处理多重条件"><a href="#使用Array-includes来处理多重条件" class="headerlink" title="使用Array.includes来处理多重条件"></a>使用Array.includes来处理多重条件</h4><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">Array.includes</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fn === <span class="string">'apply'</span> || fn == <span class="string">'pear'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'yes'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果筛选条件多</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fruits = [<span class="string">'apply'</span>,<span class="string">'pear'</span>,<span class="string">'banana'</span>] <span class="comment">//条件提取到数组</span></span><br><span class="line">    <span class="keyword">if</span>(fruits.includes(param)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'yes'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>少写嵌套，尽早返回<ul>
<li>如果没有水果，抛出错误</li>
<li>如果该水果的数量大于10，将其打印出来<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">param, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fruit = [<span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'cherry'</span>]</span><br><span class="line">      <span class="comment">// 条件 1：fruit 必须有值</span></span><br><span class="line">    <span class="keyword">if</span> (param) &#123;</span><br><span class="line">            <span class="comment">// 条件 2：必须存在</span></span><br><span class="line">        <span class="keyword">if</span> (fruit.includes(param)) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'red'</span>)</span><br><span class="line">        <span class="comment">//数量大于 10</span></span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'more'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'no frulte'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// 报错：No fruits</span></span><br><span class="line">test(<span class="string">'apple'</span>); <span class="comment">//red</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">20</span>) <span class="comment">//red</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">p,num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fruits = [<span class="string">'apply'</span>,<span class="string">'pear'</span>]</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'no'</span>)</span><br><span class="line">    <span class="keyword">if</span>(fruits.includes(p)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'yes'</span>)</span><br><span class="line">        <span class="keyword">if</span>(num&gt;<span class="number">10</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'good'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">p,num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fruits = [<span class="string">'apply'</span>,<span class="string">'pear'</span>,<span class="string">'chreey'</span>]</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'no'</span>)</span><br><span class="line">    <span class="keyword">if</span>(!fruits.includes(p)) <span class="keyword">return</span>  <span class="comment">//不是直接返回</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>)</span><br><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">10</span>) <span class="built_in">console</span>.log(<span class="string">'good'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="使用函数默认参数和解构"><a href="#使用函数默认参数和解构" class="headerlink" title="使用函数默认参数和解构"></a>使用函数默认参数和解构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit,num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!fruit) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> q = num || <span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`we have <span class="subst">$&#123;q&#125;</span> <span class="subst">$&#123;fruit&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="string">'banana'</span>); <span class="comment">// We have 1 banana!</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">2</span>); <span class="comment">// We have 2 apple!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit,num = <span class="number">1</span></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(!fruit) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`we have <span class="subst">$&#123;fruit&#125;</span> <span class="subst">$&#123;num&#125;</span>`</span>)</span><br><span class="line"> &#125;  </span><br><span class="line"><span class="comment">//如果fruit是一个对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(fruit &amp;&amp; fruit.name) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(fruit.name)</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'unknow'</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">undefined</span>); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; &#125;); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;); <span class="comment">// apple</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过默认参数和解构赋值的方法来避免写出 fruit &amp;&amp; fruit.name 这种条件。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">&#123;name&#125; =&#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name || <span class="string">'unknow'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解构只适用于对象（Object）</span></span><br></pre></td></tr></table></figure>
<h4 id="相较于-switch，Map-Object-也许是更好的选择"><a href="#相较于-switch，Map-Object-也许是更好的选择" class="headerlink" title="相较于 switch，Map / Object 也许是更好的选择"></a>相较于 switch，Map / Object 也许是更好的选择</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(color) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'red'</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>];</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'yellow'</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>];</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'purple'</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'grape'</span>, <span class="string">'plum'</span>];</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// []</span></span><br><span class="line">test(<span class="string">'yellow'</span>); <span class="comment">// ['banana', 'pineapple']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fruit = &#123;</span><br><span class="line">    red: [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>],</span><br><span class="line">    yellow: [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>],</span><br><span class="line">    purple: [<span class="string">'grape'</span>, <span class="string">'plum'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fruit[color] || []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="keyword">const</span> fruit = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">.set(<span class="string">'red'</span>, [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>])</span><br><span class="line">.set(<span class="string">'yellow'</span>, [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>])</span><br><span class="line">.set(<span class="string">'purple'</span>, [<span class="string">'grape'</span>, <span class="string">'plum'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fruit[color] || []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Array.filter</span></span><br><span class="line"><span class="keyword">const</span> fruit = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'strawberry'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'pineapple'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'plum'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fruit.filter(<span class="function"><span class="params">f</span> =&gt;</span>f.color = color)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用-Array-every-和-Array-some-来处理全部-部分满足条件"><a href="#使用-Array-every-和-Array-some-来处理全部-部分满足条件" class="headerlink" title="使用 Array.every 和 Array.some 来处理全部/部分满足条件"></a>使用 Array.every 和 Array.some 来处理全部/部分满足条件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits =[</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">let</span> isAll = <span class="literal">true</span></span><br><span class="line">    <span class="comment">//所有水果都必须是红色</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> f <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isAll) <span class="keyword">break</span></span><br><span class="line">        isAll = (f.color ==<span class="string">'red'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(isAll) <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Array.every</span></span><br><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//所有水果必须都是红色</span></span><br><span class="line">    <span class="keyword">const</span> isAll = fruits.every(<span class="function"><span class="params">f</span> =&gt;</span>f.color ==<span class="string">'red'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(isAll) <span class="comment">//false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Array.some</span></span><br><span class="line">  <span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//至少一个水果是红色</span></span><br><span class="line">    <span class="keyword">const</span> isAll = fruits.some(<span class="function"><span class="params">f</span> =&gt;</span>f.color==<span class="string">'red'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(isAll) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 终端中用指定文本编辑器打开选中文件</title>
    <url>/2017/05/01/mac%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<p>之前每次用<code>terminal</code>打开文件都是<code>open .</code> 打开父文件夹然后用编辑器打开要打开的文件，或者<code>cat</code>查看当前文件内容。很不舒服，于是，就开始研究命令，果不其然，真的有办法<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">open -t index.html</span><br><span class="line">open -e inex.html</span><br><span class="line">open -<span class="selector-tag">a</span> WebStorm index.html</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>-t</code>使用默认编辑器打开</li>
<li><code>-e</code>文本编辑器打开</li>
<li><code>-a</code>指定应用</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>js替换json对象中的键名</title>
    <url>/2018/05/02/js%E6%9B%BF%E6%8D%A2json%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E9%94%AE%E5%90%8D/</url>
    <content><![CDATA[<p>使用map()是目前想到的最简单的办法。。</p>
<blockquote>
<p>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map#Objects_%E5%92%8C_maps_%E7%9A%84%E6%AF%94%E8%BE%83" target="_blank" rel="noopener">Objects 和 maps 的比较</a><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">    &#123;<span class="attr">count</span>:<span class="number">123</span>,<span class="attr">goods</span>:<span class="string">'小米'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">count</span>:<span class="number">456</span>,<span class="attr">goods</span>:<span class="string">'华为'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">count</span>:<span class="number">789</span>,<span class="attr">goods</span>:<span class="string">'苹果'</span>&#125;</span><br><span class="line">].map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        name:item.count,</span><br><span class="line">        value:item.goods</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>功能</tag>
      </tags>
  </entry>
  <entry>
    <title>js高阶函数</title>
    <url>/2017/12/02/js%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greentng</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;</span><br><span class="line">greentng() <span class="comment">//hello world</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">greentng.lang = <span class="string">'English'</span></span><br><span class="line"><span class="built_in">console</span>.log(greentng.lang) <span class="comment">//English</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以在 JavaScript 中将函数赋值给变量</span></span><br><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> total = square;</span><br><span class="line">total(<span class="number">4</span>)  <span class="comment">//8</span></span><br><span class="line"><span class="comment">//将函数作为参数传递</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">type, one, two</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="string">'oneCase'</span>) &#123;</span><br><span class="line">        one()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">'twoCase'</span>) &#123;</span><br><span class="line">        two()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is one'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is two'</span>)</span><br><span class="line">&#125;</span><br><span class="line">format(<span class="string">'oneCase'</span>, one, two)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">高阶函数是对其他函数进行操作的函数，操作可以是将它们作为参数，或者是返回它们。</span></span><br><span class="line"><span class="comment"> 简单来说，高阶函数是一个接收函数作为参数或将函数作为输出返回的函数。</span></span><br><span class="line"><span class="comment"> 例如，Array.prototype.map，Array.prototype.filter 和 Array.prototype.reduce 是语言中内置的一些高阶函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Array.prototype.map</span></span><br><span class="line"><span class="comment">map() 方法通过调用对输入数组中每个元素调用回调函数来创建一个新数组。</span></span><br><span class="line"><span class="comment">map() 方法将获取回调函数中的每个返回值，并使用这些值创建一个新数组。</span></span><br><span class="line"><span class="comment">传递给 map() 方法的回调函数接受 3 个参数：element，index 和 array。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; num.length; i++) &#123;</span><br><span class="line">    arr.push(num[i] * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> arr = num.map(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">//假设我们有一个包含不同人的出生年份的数组，我们想要创建一个包含其年龄的数组。 例如：</span></span><br><span class="line"><span class="keyword">const</span> year = [<span class="number">1993</span>, <span class="number">1923</span>, <span class="number">1983</span>, <span class="number">1990</span>]</span><br><span class="line"><span class="keyword">const</span> age = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; year.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> change = <span class="number">2018</span> - year[i]</span><br><span class="line">    age.push(change)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="keyword">const</span> year = [<span class="number">1993</span>, <span class="number">1923</span>, <span class="number">1983</span>, <span class="number">1990</span>]</span><br><span class="line"><span class="keyword">const</span> age = year.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="number">2018</span>-item)</span><br><span class="line"><span class="built_in">console</span>.log(age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Array.prototype.filter</span></span><br><span class="line"><span class="comment">filter() 方法会创建一个新数组，其中包含所有通过回调函数测试的元素。</span></span><br><span class="line"><span class="comment"> 传递给 filter() 方法的回调函数接受3个参数：element，index 和 array。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//假设我们有一个包含名称和年龄属性的对象数组。 我们想要创建一个只包含成年人（年龄大于或等于18）的数组。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> persons = [</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'peter'</span>,<span class="attr">age</span>:<span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'lele'</span>,<span class="attr">age</span>:<span class="number">26</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'shaun'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'tony'</span>,<span class="attr">age</span>:<span class="number">46</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'jack'</span>,<span class="attr">age</span>:<span class="number">54</span>&#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> adult = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ;i &lt;persons.length;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(persons[i].age &gt;=<span class="number">18</span>) &#123;</span><br><span class="line">        adult.push(persons[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(adult)</span><br><span class="line"><span class="comment">//filter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> persons = [</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'peter'</span>,<span class="attr">age</span>:<span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'lele'</span>,<span class="attr">age</span>:<span class="number">26</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'shaun'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'tony'</span>,<span class="attr">age</span>:<span class="number">46</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'jack'</span>,<span class="attr">age</span>:<span class="number">54</span>&#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> adult = persons.filter(<span class="function"><span class="params">item</span> =&gt;</span>item.age &gt;=<span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(adult)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Array.prototype.reducereduce 方法对调用数组的每个元素执行回调函数，最后生成一个单一的值并返回。</span></span><br><span class="line"><span class="comment"> reduce 方法接受两个参数：1）reducer 函数（回调），2）一个可选的 initialValue。</span></span><br><span class="line"><span class="comment"> reducer 函数（回调）接受四个参数：accumulator，currentValue，currentIndex，sourceArray。</span></span><br><span class="line"><span class="comment"> 如果提供了 initialValue，则累加器将等于 initialValue，currentValue 将等于数组中的第一个元素。</span></span><br><span class="line"><span class="comment"> 如果没有提供 initialValue，则累加器将等于数组中的第一个元素，currentValue 将等于数组中的第二个元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//假设我们要对一个数字数组的求和：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> total = sum.reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b)</span><br><span class="line"><span class="built_in">console</span>.log(total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">每次对数组中的某个值调用 reducer 函数，</span></span><br><span class="line"><span class="comment">累加器都会保留上一次 reducer 函数操作返回的结果，</span></span><br><span class="line"><span class="comment">并将 currentValue 设置为数组的当前值。 </span></span><br><span class="line"><span class="comment">最后把结果存储在 sum 变量中。</span></span><br><span class="line"><span class="comment">我们还可以为它提供初始值：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ;i &lt;num.length;i++) &#123;</span><br><span class="line">    total +=num[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(total)</span><br><span class="line"></span><br><span class="line"><span class="comment">//reduce</span></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> total = num.reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span>&#123;<span class="keyword">return</span> a+b&#125;,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">我们假设 JavaScript 没有原生的 map 方法。</span></span><br><span class="line"><span class="comment">我们可以自己构建它，从而创建我们自己的高阶函数。 </span></span><br><span class="line"><span class="comment">假设我们有一个字符串数组，我们希望把它转换为整数数组，其中每个元素代表原始数组中字符串的长度。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strArray = [<span class="string">'javascript'</span>,<span class="string">'python'</span>,<span class="string">'php'</span>,<span class="string">'java'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapEach</span>(<span class="params">arr,fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;arr.length;i++) &#123;</span><br><span class="line">        num.push(fn(arr[i]))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> strLength = strArray.mapEach(<span class="function">(<span class="params">strArray,(</span>)=&gt;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>rgb转化为16进制</title>
    <url>/2021/03/15/rgb%E8%BD%AC%E4%B8%BA16%E8%BF%9B%E5%88%B6/</url>
    <content><![CDATA[<p>项目中有个需求是写一个颜色选择器，默认有16个色块可以点击，用户也可以自己输入6位16进制字符，然后动态的给显示用户所输入的颜色。<br>我采用的是vue的<code>:class</code>和<code>:style</code>去完成这个需求。<br>做完之后，发现一个很尴尬的问题，如果我在输入框输入过值，那么他一定会覆盖clss的样式，也就是说，即使我点击色块，颜色也不会出现，于是想到一个解决办法，就是当我点击色块的时候，将色块的颜色值显示到输入框中。<br>那么。如何获取到class中的css样式呢？？<br>我采用了jquery的方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">var color = $(`.$&#123;item.color&#125;`).css(<span class="string">'backgroundColor'</span>) <span class="comment">//获取到颜色值</span></span><br></pre></td></tr></table></figure></p>
<p>额。。。获取到的竟然是个rgb()…….转换起来<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">var rgb = a.split(<span class="string">','</span>);  <span class="comment">//将三个数值获取出</span></span><br><span class="line">var r = parseInt(rgb[<span class="number">0</span>].split(<span class="string">'('</span>)[<span class="number">1</span>]);<span class="comment">//第一个值</span></span><br><span class="line">var g = parseInt(rgb[<span class="number">1</span>]);<span class="comment">//第二个值</span></span><br><span class="line">var b = parseInt(rgb[<span class="number">2</span>].split(<span class="string">')'</span>)[<span class="number">0</span>]);<span class="comment">//第三个值</span></span><br><span class="line">var hex = <span class="string">"#"</span> + ((<span class="number">1</span> &lt;&lt; <span class="number">24</span>) + (r &lt;&lt; <span class="number">16</span>) + (g &lt;&lt; <span class="number">8</span>) + b).toString(<span class="number">16</span>).slice(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p>
<p>原谅我没有把他封装起来。。。。。<br>最后的<code>hex</code>就是rgb转换后的结果，也就是一个十六进制的色值。<br>呼呼~~一定有比这个更简单的方法吧，思考中。。。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-slot</title>
    <url>/2017/05/01/slot/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//goods.vue</span></span><br><span class="line">&lt;span slot=<span class="string">"A"</span>&gt;啦啦啦&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;span slot="B"&gt;嘿嘿嘿&lt;/</span>span&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//list.vue</span></span><br><span class="line">&lt;slot name=<span class="string">"A"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;slot name=<span class="string">"B"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>tab切换</title>
    <url>/2018/04/02/tab%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p>使用javascript和jquery编写tab切换,使用jquery编写列表切换<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> id == <span class="string">'string'</span> ? <span class="built_in">document</span>.getElementById(id) : id</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> titleName = $(<span class="string">'tab-title'</span>).getelementsByTagName(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">var</span> tabContent = $(<span class="string">'tab-content'</span>).getelementsByTagName(<span class="string">'div'</span>)</span><br><span class="line">    <span class="keyword">if</span> (titleName.length != tabContent.length) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; titleName.length; i++) &#123;</span><br><span class="line">        titleName[i].id = i;</span><br><span class="line">        titleName[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; titleName.length; j++) &#123;</span><br><span class="line">                titleName[j].className = <span class="string">''</span></span><br><span class="line">                titleName[j].style.display = <span class="string">'none'</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.className = <span class="string">'select'</span></span><br><span class="line">            tabContent[<span class="keyword">this</span>.id].style.display = <span class="string">'block'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jquery方法添加个定时器</span></span><br><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#tabfirst li'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> liNode = $(<span class="keyword">this</span>)</span><br><span class="line">        $(<span class="keyword">this</span>).mouseover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                $(<span class="string">'div.content'</span>).removeClass(<span class="string">'content'</span>)</span><br><span class="line">                $(<span class="string">'#tabfirst li.tabin'</span>).removeClass(<span class="string">'tabin'</span>)</span><br><span class="line">                $(<span class="string">'div'</span>).eq(index).addClass(<span class="string">'content'</span>)</span><br><span class="line">                liNode.addClass(<span class="string">'tabin'</span>)</span><br><span class="line">            &#125;, <span class="number">300</span>);</span><br><span class="line">        &#125;).mouseout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            clearTimeout(timer)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'.list-1'</span>).bind(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'.list-1'</span>).css(<span class="string">'backgroundPosition'</span>, <span class="string">'0px -26px'</span>)</span><br><span class="line">        $(<span class="string">'.list-2'</span>).css(<span class="string">'backgroundPosition'</span>, <span class="string">'-30px -26px'</span>)</span><br><span class="line">        $(<span class="string">'changeList'</span>).children().removeClass(<span class="string">'list-1-0'</span>).addClass(<span class="string">'list-2-v'</span>)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">'.list-2'</span>).bind(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'.list-1'</span>).css(<span class="string">'backgroundPosition'</span>, <span class="string">'0px 0px'</span>)</span><br><span class="line">        $(<span class="string">'.list-2'</span>).css(<span class="string">'backgroundPosition'</span>, <span class="string">'-30px 0px'</span>)</span><br><span class="line">        $(<span class="string">'changeList'</span>).children().removeClass(<span class="string">'list-2-v'</span>).addClass(<span class="string">'list-1-0'</span>)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>功能</tag>
      </tags>
  </entry>
  <entry>
    <title>this</title>
    <url>/2017/12/02/this/</url>
    <content><![CDATA[<h5 id="this"><a href="#this" class="headerlink" title="this"></a>this</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">identify</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.toUpperCase(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> greeting = <span class="string">'hello'</span> + identify.call(<span class="keyword">this</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(greeting)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> me = &#123;</span><br><span class="line">        name:<span class="string">'lele'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> you = &#123;</span><br><span class="line">        name:<span class="string">'tom'</span></span><br><span class="line">    &#125;</span><br><span class="line">    identify.call(me)</span><br><span class="line">    identify.call(you)</span><br><span class="line"></span><br><span class="line">    speak.call(me)</span><br><span class="line">    speak.call(you)</span><br><span class="line">    <span class="comment">//这段代码可以在不同的上下文对象(me 和 you)中重复使用函数 identify() 和 speak()， 不用针对每个对象编写不同版本的函数。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果不使用 this，那就需要给 identify() 和 speak() 显式传入一个上下文对象。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">identify</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.name.toUpperCase()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> green = <span class="string">'hello'</span> + identify(context)</span><br><span class="line">        <span class="built_in">console</span>.log(green)</span><br><span class="line">    &#125;</span><br><span class="line">    identify(me)</span><br><span class="line">    identify(you)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">nums</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'nums'</span> + i );</span><br><span class="line">        <span class="keyword">this</span>.count++</span><br><span class="line">    &#125;</span><br><span class="line">    foo.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            nums(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(nums.count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">nums</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'nums'</span> + i)</span><br><span class="line">        data.count++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">        count : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">5</span>) &#123;</span><br><span class="line">            nums(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data.count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果要从函数对象内部引用它自身，那只使用 this 是不够的。一般来说你需要通过一个指 向函数对象的词法标识符(变量)来引用它。</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        foo.count = <span class="number">4</span>; <span class="comment">//foo指向它自身</span></span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 匿名(没有名字的)函数无法指向自身</span></span><br><span class="line">    &#125;,<span class="number">10</span>)</span><br><span class="line"><span class="comment">//第一个函数被称为具名函数，在它内部可以使用 foo 来引用自身。</span></span><br><span class="line"><span class="comment">//但是在第二个例子中，传入 setTimeout(..) 的回调函数没有名称标识符(这种函数被称为 匿名函数)，因此无法从函数内部引用自身。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 foo 标识符替代 this 来引用函数 对象:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo'</span> + num)</span><br><span class="line">    foo.count++;</span><br><span class="line">&#125;</span><br><span class="line">foo.count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        foo(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>强制this指向foo函数对象<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'num'</span> + num)</span><br><span class="line">    <span class="keyword">this</span>.count++</span><br><span class="line">&#125;</span><br><span class="line">foo.count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        foo.call(foo,i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6系列-promise</title>
    <url>/2021/03/15/promise/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// promise</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//传统es5回调方式解决异步</span></span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'等待下一步加载。。。'</span>)</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            callback &amp;&amp; callback.call()</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ajax(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'来了来了'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//执行a-b-c-d-e-f....</span></span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'等待setTimeOut2加载'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  <span class="comment">//执行，中断</span></span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ajax().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise'</span>, <span class="string">'setTimeOut2'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'等待第一次加载'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ajax().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'等待第二次'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'我是第三次加载'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;, <span class="number">3000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'最后一次加载'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果中间出现错误，如何捕获</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'判断num'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'传错了'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ajax(<span class="number">6</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'log'</span>, <span class="number">6</span>)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'catch'</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">    ajax(<span class="number">2</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'log'</span>, <span class="number">2</span>)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'catch'</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用场景promise.all,promise</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 所有图都加载后显示到页面</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">            img.src = src</span><br><span class="line">            img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(img)</span><br><span class="line">            &#125;</span><br><span class="line">            img.onerror = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//图片加载完成onload</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加到页面</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImg</span>(<span class="params">imgs</span>) </span>&#123;</span><br><span class="line">        imgs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(item)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// promise.all把多个promise实例当成一个promise实例</span></span><br><span class="line">    <span class="built_in">Promise</span>.all([</span><br><span class="line">        loadImg(<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=219db669df4a813bcca53e582da7582e&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130531_wXcaQ.thumb.700_0.jpeg'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=2c20d892a361fa4313ae380600c434b8&amp;imgtype=0&amp;src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn%2Fw440h329%2F20171229%2Fbe5c-fypyuve2937030.jpg'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426663&amp;di=1ce727cefe866cd3baa0bcdc64dd8cb7&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130914_CrVz5.jpeg'</span>)</span><br><span class="line">    ]).then(showImg)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//先到先得,有一本图片加载完就加载到页面</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">            img.src = src</span><br><span class="line">            img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(img)</span><br><span class="line">            &#125;</span><br><span class="line">            img.onerror = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImg</span>(<span class="params">imgs</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(imgs)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Promise</span>.race([</span><br><span class="line">        loadImg(<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=219db669df4a813bcca53e582da7582e&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130531_wXcaQ.thumb.700_0.jpeg'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=2c20d892a361fa4313ae380600c434b8&amp;imgtype=0&amp;src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn%2Fw440h329%2F20171229%2Fbe5c-fypyuve2937030.jpg'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426663&amp;di=1ce727cefe866cd3baa0bcdc64dd8cb7&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130914_CrVz5.jpeg'</span>)</span><br><span class="line">    ]).then(showImg)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-动态组件</title>
    <url>/2018/12/28/vue-%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>让多个组件使用同一个挂载点，并动态切换，这就是动态组件。通过使用保留的 <code>&lt;component&gt;</code> 元素，动态地绑定到它的 <code>is</code>特性，我们让多个组件可以使用同一个挂载点，并动态切换。根据<code>v-bind:is=&quot;组件名&quot;</code>中的组件名去自动匹配组件，如果匹配不到则不显示。<br>有一个功能需求，就是类似于官网上的动态组件的样子。点击会切换，在实现的过程中，有遇到问题，也请教了别人，记录下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两个子组件txt，file</span></span><br><span class="line">Vue.component(<span class="string">'txt'</span>,&#123;</span><br><span class="line">    template:<span class="string">``</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="comment">// 子组件暴露给外界的值</span></span><br><span class="line">getValue: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'text'</span>,</span><br><span class="line">        content: <span class="keyword">this</span>.inner</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    prop:[<span class="string">"content"</span>]</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">'file'</span>,&#123;</span><br><span class="line">    template:<span class="string">``</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="comment">// 子组件暴露给外界的值</span></span><br><span class="line">getValue: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'text'</span>,</span><br><span class="line">        content: <span class="keyword">this</span>.filesName</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    prop:[<span class="string">"content"</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 父组件调用子组件</span></span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"despContainer"</span> v-<span class="keyword">for</span>=<span class="string">"(desp,index) in desps"</span>&gt;</span><br><span class="line">    &lt;component :is=<span class="string">"comps[desp.type]"</span> :content=<span class="string">"desp"</span> :ref=<span class="string">"'comp' + index"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ desps的数据结构</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ props：</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ content:Object</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ inner:'xxx'</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ type:"text"</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 父组件去循环，返回子组件暴露的值</span></span><br><span class="line"><span class="regexp">allDate() &#123;</span></span><br><span class="line"><span class="regexp">    let data = [];</span></span><br><span class="line"><span class="regexp">    for(let comp in this.desps) &#123;</span></span><br><span class="line"><span class="regexp">        const comIns = this.$refs['comp'+comp][0]</span></span><br><span class="line"><span class="regexp">        if(!comIns || typeof compIns.getValue !=='function')&#123;</span></span><br><span class="line"><span class="regexp">            return</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        if(compIns.getValue()) &#123;</span></span><br><span class="line"><span class="regexp">            data.push(compIns.getValue())</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return data</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 调用</span></span><br><span class="line"><span class="regexp">let introduces = this.fetchAllData()</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果子组件要调用父组件的方法，可以使用\$emit()传值，v-on 监听</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;txt-component @check-title=<span class="string">'checkTitle'</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'check-title'</span>, msg)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>功能</tag>
      </tags>
  </entry>
  <entry>
    <title>vue日常学习-router</title>
    <url>/2018/03/02/vue-router/</url>
    <content><![CDATA[<p>今日搭建vue 3.0脚手架，写了个小项目，被一个问题卡了半天，就是在app.vue里面的router-view和router-link无法生效，页面不会跳转并且控制台会报错，请教后得知，自己在router.js里配置路由的时候代码写错了<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误代码</span></span><br><span class="line">&#123;</span><br><span class="line">      path: <span class="string">'/shopping'</span>,</span><br><span class="line">      name: <span class="string">'shopping'</span>,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">import</span>(<span class="string">"./components/shopping"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//正确的写法 1</span></span><br><span class="line">&#123;</span><br><span class="line">      path: <span class="string">'/shopping'</span>,</span><br><span class="line">      name: <span class="string">'shopping'</span>,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./components/shopping"</span>)</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//正确的写法 2</span></span><br><span class="line">&#123;</span><br><span class="line">      path: <span class="string">'/shopping'</span>,</span><br><span class="line">      name: <span class="string">'shopping'</span>,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">import</span>(<span class="string">"./components/shopping"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import是个异步函数, 单纯的componet方法没有返回值,如果加了&#123;&#125;，需要使用return返回出去</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>vue上传文件</title>
    <url>/2018/02/28/vue_upfile/</url>
    <content><![CDATA[<p>例如点击标签<code>&lt;span @click = &quot;addLesson&quot;&gt;&lt;/span&gt;</code>上传文件<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">change</span>=<span class="string">"fileChange(lesson,$event.target)"</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">addLesson:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lessons.push(&#123;</span><br><span class="line">        name:<span class="string">''</span>,</span><br><span class="line">        files:[],</span><br><span class="line">        editing:<span class="literal">true</span> <span class="comment">//需要隐藏的地方/显示的地方</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">fileChange:<span class="function"><span class="keyword">function</span>(<span class="params">course,input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fileObj = input.file[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> file = &#123;</span><br><span class="line">        previewFlag:<span class="literal">false</span>, <span class="comment">//是否可预览</span></span><br><span class="line">        name:fileObj.name,</span><br><span class="line">        process:<span class="number">0</span>,</span><br><span class="line">        size:fileObj.size</span><br><span class="line">    &#125;;</span><br><span class="line">    course.files.push(file)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>vue日常学习</title>
    <url>/2018/03/01/vue/</url>
    <content><![CDATA[<ul>
<li><p>路由操作的基本步骤</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入对象</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> ’vue-router‘</span><br><span class="line"><span class="comment">//安装插件</span></span><br><span class="line">Vue.use(VueRouter); <span class="comment">//挂载属性的行为</span></span><br><span class="line"><span class="comment">//创建理由对象</span></span><br><span class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routers:[&#123;</span><br><span class="line">        name:<span class="string">'xxx'</span>,<span class="attr">path</span>:<span class="string">'/xxx'</span>,组件</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//将路由对象放入到options中的 new Vue()</span></span><br><span class="line"><span class="keyword">new</span> vue(&#123;</span><br><span class="line">    router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置</p>
</li>
</ul>
<ul>
<li>1: &lt;router-link :to={name:’xxx’}&gt;</li>
<li>2: 配置路由规则<code>{name:&#39;xxx&#39;,path:&#39;xxx&#39;,组件名}</code></li>
<li>3: 作了什么<pre><code>+ 在created事件函数中，获取路由参数
+ 发起请求，把数据挂在上去
</code></pre></li>
</ul>
<ul>
<li>参数<ul>
<li>查询字符串(#/beijing?id=1&amp;age=2)</li>
</ul>
</li>
</ul>
<ul>
<li>1: &lt;router-link :to={name:   ‘xxx’,query:{id=1,age=2}}&gt;</li>
<li>2: 配置路由规则<code>{name:&#39;xxx&#39;,path:&#39;beijing&#39;,组件名}</code></li>
<li><p>3: 作了什么</p>
<pre><code>+ `this.$route.query.id || age`
</code></pre><ul>
<li>path(#/beijing/1/2 )</li>
</ul>
</li>
<li>1: &lt;router-link :to={name:’xxx’,params:{id:1,age:2}}&gt;</li>
<li>2: 配置路由规则<code>{name:&#39;xxx&#39;,path:&#39;/beijing/:id/:age&#39;,组件名}</code></li>
<li>3: 作了什么<pre><code>+ `this.$route.params.id || age`
</code></pre></li>
</ul>
<ul>
<li><p>编程导航</p>
<ul>
<li>一个获取信息的只读对象($route)</li>
<li>一个具备功能函数的对象($router)</li>
<li>根据浏览器历史记录前进和后退<code>this.$router.go(-1 || 1)</code></li>
<li>跳转到指定路由<code>this.$router.push({name:&#39;bj})</code></li>
</ul>
</li>
<li><p>嵌套路由</p>
<ul>
<li>让变化的视图(router-view)产生包含关系(router-view)</li>
<li>让路由与router-view关联，并且产生父子关系</li>
</ul>
</li>
</ul>
<h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><ul>
<li>合并请求</li>
<li>axios.all{[请求1，请求2]}</li>
<li>分发相应 axios.pread(fn)</li>
<li>fn:对应参数和请求的顺序一致。</li>
<li>必须两次请求都成功，只要有一次失败就算失败，否则成功。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'app'</span></span><br><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line">Axios.defaults.baseURL = <span class="string">'http://123.34.543/api/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给Vue原型上挂载属性</span></span><br><span class="line">Vue.prototype.$axios = Axios</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    render:<span class="function"><span class="params">c</span> =&gt;</span> c(App)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.vue</span></span><br><span class="line">created() &#123; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>(<span class="params">res1,res2</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res1)</span><br><span class="line">        <span class="built_in">console</span>.log(res2)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.$axios.all([</span><br><span class="line">        <span class="keyword">this</span>.$axios.post(<span class="string">'postcomment/300'</span>,<span class="string">'content=123'</span>),</span><br><span class="line">        <span class="keyword">this</span>.$axios.get(<span class="string">'postcomment/300'</span>,<span class="string">'content=123'</span>)</span><br><span class="line">    ])</span><br><span class="line">    <span class="comment">//分发相应</span></span><br><span class="line">    .then(<span class="keyword">this</span>.$axios.spread(getMsg))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><ul>
<li>过滤，再一次请求中，做操作,拦截器对每一次请求都有效 </li>
<li>axios.interceptors.request.use(fn) 在请求之前</li>
<li>function(config) {} config相当于options对象</li>
<li>范围广<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line">Axios.defaults.headers = &#123;</span><br><span class="line">    accept:<span class="string">'defaults'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拦截器</span></span><br><span class="line">Axios.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(config)</span><br><span class="line">    <span class="comment">//个性化修改</span></span><br><span class="line">    <span class="comment">//config.headers.accept = 'interceptors'</span></span><br><span class="line">     config.headers = &#123;</span><br><span class="line">         accept:<span class="string">'interceptors'</span></span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">    <span class="comment">//返回没有修改的设置</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//拦截器覆盖默认设置</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$axios.get(<span class="string">'getcomments/300?pa=1'</span>,&#123;</span><br><span class="line">    headers:&#123;</span><br><span class="line">        accept:<span class="string">'get'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="token"><a href="#token" class="headerlink" title="token"></a>token</h4><ul>
<li>cookie和session的机制，coolie自带一个字符串</li>
<li>cookie只在浏览器</li>
<li>移动端原生应用，也可以使用http协议，可以加自定义的头，原生应用没有cookie</li>
<li>对于三端，token可以作为类似cookie的使用，并且可以通用</li>
<li>拦截器可以用在添加token上</li>
</ul>
<h4 id="拦截器操作-loading"><a href="#拦截器操作-loading" class="headerlink" title="拦截器操作 loading"></a>拦截器操作 loading</h4><ul>
<li>在请求发起前open，在相应回来后close<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Axios.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//请求发起之前，显示loading</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line">Axios.interceptors.response.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//在相应回来之后，隐藏loading</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 监听</span></span><br><span class="line"><span class="string">* watch可以对（单个）变量进行监视，也可以深度监视</span></span><br><span class="line"><span class="string">* 如果需求是对于10个变量进行监视？computed，可以监视多个，并且指定返回数据，并且可以显示在页面</span></span><br><span class="line"><span class="string">* 都是options中的根属性</span></span><br><span class="line"><span class="string">    - watch监视单个</span></span><br><span class="line"><span class="string">    - computed可以监视多个this相关属性值的改变，如果和原值一样，不会触发函数的调用，并且可以返回对象</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"> &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"text"</span>&gt;</span><br><span class="line">&lt;button @click=<span class="string">"changeValue"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"> data() &#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        text:[],</span><br><span class="line">        person:[&#123;</span><br><span class="line">          name:<span class="string">'nick'</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          name:<span class="string">'lee'</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      changeValue() &#123;</span><br><span class="line">        <span class="keyword">this</span>.text = <span class="string">'abc'</span></span><br><span class="line">        <span class="keyword">this</span>.person[<span class="number">0</span>].name = <span class="string">'tom'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">      text:<span class="function"><span class="keyword">function</span> (<span class="params">old,newV</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'change it'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      person:&#123;</span><br><span class="line">        handler:<span class="function"><span class="keyword">function</span> (<span class="params">val,old</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'change it'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        deep:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">单价：&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"price"</span>&gt;*</span><br><span class="line">件数：&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"num"</span>&gt;*</span><br><span class="line">折扣：&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"rate"</span>&gt;=</span><br><span class="line">   &#123;&#123;sum.name&#125;&#125; &#123;&#123;sum.price&#125;&#125;</span><br><span class="line"></span><br><span class="line"> data() &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       price: <span class="number">0</span>,</span><br><span class="line">       num: <span class="number">0</span>,</span><br><span class="line">       rate: <span class="number">0</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   computed: &#123;</span><br><span class="line">     sum() &#123;</span><br><span class="line">       <span class="comment">//如果当函数内涉及到的this.相关属性发生变化后触发，并返回一个值（可以是对象）</span></span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">         name:<span class="string">'music'</span>,</span><br><span class="line">         price:<span class="keyword">this</span>.price * <span class="keyword">this</span>.num * (<span class="keyword">this</span>.rate / <span class="number">100</span>)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3-ts</title>
    <url>/2021/06/17/vue3-ts/</url>
    <content><![CDATA[<h4 id="程序-更容易理解"><a href="#程序-更容易理解" class="headerlink" title="程序 更容易理解"></a>程序 更容易理解</h4><ul>
<li>函数或者方法输入输出的参数类型，外部条件等</li>
<li>动态语言的约束：需要手动调整等过程</li>
<li>有了ts，diamante本身就可以回答上述问题</li>
</ul>
<h4 id="效率更高"><a href="#效率更高" class="headerlink" title="效率更高"></a>效率更高</h4><ul>
<li>在不同的代码块和定义中进行跳转</li>
<li>代码自动补全</li>
<li>丰富的接口提示</li>
</ul>
<h4 id="更少的错误"><a href="#更少的错误" class="headerlink" title="更少的错误"></a>更少的错误</h4><ul>
<li>编译期间能够发现大部分错误</li>
<li>杜绝一些比较常见错误</li>
</ul>
<h4 id="非常好的包容性"><a href="#非常好的包容性" class="headerlink" title="非常好的包容性"></a>非常好的包容性</h4><ul>
<li>完全兼容js</li>
<li>第三方库可以单独编写类型文件</li>
</ul>
<h4 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h4><ul>
<li>增加学习成本</li>
<li>短期内增加开发成本</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>title</title>
    <url>/2019/06/24/title/</url>
    <content><![CDATA[<p>test</p>
]]></content>
  </entry>
  <entry>
    <title>vue3-新特性</title>
    <url>/2021/06/18/vue3-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h4 id="性能提升"><a href="#性能提升" class="headerlink" title="性能提升"></a>性能提升</h4><ul>
<li>打包大小减少41%</li>
<li>初次渲染快55%，133%</li>
<li>内存使用减少54%</li>
</ul>
<h4 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h4><ul>
<li>ref和reactive</li>
<li>computed和watch</li>
<li>新的生命周期函数</li>
<li>自定义函数-Hooks函数</li>
</ul>
<h4 id="新增特性"><a href="#新增特性" class="headerlink" title="新增特性"></a>新增特性</h4><ul>
<li>Teleport 瞬移组件的位置</li>
<li>Suspense 异步加载组件的新福音</li>
<li>全局API的修改和优化</li>
<li>更多的试验性特性</li>
</ul>
<h4 id="更好的ts支持"><a href="#更好的ts支持" class="headerlink" title="更好的ts支持"></a>更好的ts支持</h4><h4 id="为什么要有vue3（解决现有存在的棘手问题）"><a href="#为什么要有vue3（解决现有存在的棘手问题）" class="headerlink" title="为什么要有vue3（解决现有存在的棘手问题）"></a>为什么要有vue3（解决现有存在的棘手问题）</h4><ul>
<li><p>随着功能的增长，复杂组件的代码变得难以维护</p>
</li>
<li><p>Mixin的缺点 </p>
</li>
</ul>
<ol>
<li>明明冲突</li>
<li>不清楚暴露出来的变量的作用</li>
<li>重用到其他component经常遇到问题</li>
</ol>
<ul>
<li><p>setup中无法访问this</p>
</li>
<li><p>新生命周期</p>
</li>
</ul>
<p><img src="//onlyH.github.io/2021/06/18/vue3-新特性/生命周期.png" alt="生命周期"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack.config.js配置错误问题</title>
    <url>/2021/03/15/webpack-babel-core/</url>
    <content><![CDATA[<p>今日搭建webpack的时候，一直在报错，其中一个问题是<code>Cannot find module &#39;@babel/core&#39;问题</code><br>最初以为是babel-core没有安装上。重装了好几遍babel-core还是不行。对照以前的项目,发现babel-loader的版本不一样,之前的是@7.1.5版本,而现在是@8.0.0版本。</p>
<ul>
<li>解决办法：降版本。。。<br><code>npm uninstall babel-loader npm install babel-loader@7.1.5</code></li>
</ul>
<h4 id="官方文档说："><a href="#官方文档说：" class="headerlink" title="官方文档说："></a>官方文档说：</h4><h5 id="官方默认babel-loader-babel-对应的版本需要一致-即babel-loader需要搭配最新版本babel"><a href="#官方默认babel-loader-babel-对应的版本需要一致-即babel-loader需要搭配最新版本babel" class="headerlink" title="官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel"></a>官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel</h5>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack配置</title>
    <url>/2021/03/15/webpack/</url>
    <content><![CDATA[<h4 id="webpack属性配置"><a href="#webpack属性配置" class="headerlink" title="webpack属性配置"></a>webpack属性配置</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:&#123;</span><br><span class="line">        <span class="comment">//main默认入口，可以是多入口</span></span><br><span class="line">        main:<span class="string">'./src/main.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//出口</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        filemane:<span class="string">'./build.js'</span>,</span><br><span class="line">        <span class="comment">//指定js文件</span></span><br><span class="line">        path:path.join(__dirname,<span class="string">'..'</span>,<span class="string">'dist'</span>,)</span><br><span class="line">        <span class="comment">//最好是绝对路径，代表当前目录的上一级的dist</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">           <span class="comment">// 一样的功能rules:   webpack2.x之后新加的</span></span><br><span class="line">           loaders:[       <span class="built_in">require</span>(<span class="string">'./a.css||./a.js'</span>)</span><br><span class="line">               &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                loader:<span class="string">'style-loader!css-loader'</span>,</span><br><span class="line">              <span class="comment">//  顺序是反过来的2!1</span></span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                test:<span class="regexp">/\.(jpg|svg)$/</span>,</span><br><span class="line">                loader:<span class="string">'url-loader?limit=4096&amp;name=[name].[ext]'</span>,</span><br><span class="line">               <span class="comment">// 顺序是反过来的2!1 </span></span><br><span class="line">              <span class="comment">//  [name].[ext]内置提供的，因为本身是先读这个文件</span></span><br><span class="line">                options:&#123;</span><br><span class="line">                   limit:<span class="number">4096</span>,</span><br><span class="line">                   name:<span class="string">'[name].[ext]'</span></span><br><span class="line">                &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="comment">//  插件的执行顺序是依次执行的</span></span><br><span class="line">           <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">               template:<span class="string">'./src/index.html'</span>,</span><br><span class="line">               &#125;)</span><br><span class="line">               <span class="comment">//将src下的template属性描述的文件根据当前配置的output.path，将文件移动到该目录</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="webpack-es6"><a href="#webpack-es6" class="headerlink" title="webpack-es6"></a>webpack-es6</h4><ul>
<li>vue默认支持es6的模块导入导出</li>
<li>babel–&gt;babel-core</li>
</ul>
<h4 id="es6模块"><a href="#es6模块" class="headerlink" title="es6模块"></a>es6模块</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//default</span></span><br><span class="line"><span class="keyword">import</span> [,...xxx] [,..form] <span class="string">'./xxx.ext'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> obj = xxx</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> obj2 = &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;stu&#125;<span class="comment">//单独导出</span></span><br><span class="line"><span class="keyword">import</span> &#123;obj,obj2,stu&#125; form <span class="string">'./xxx.js'</span>    <span class="comment">//直接使用obj</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>默认导出和声明式导入在使用上的区别</p>
<ul>
<li>声明式导入的时候，必须{名称} 名称要一致（按需导入)</li>
<li>默认导入，可以随意的使用变量名</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">default</span>:<span class="string">"我是默认导出的结果"</span>    </span><br><span class="line">        <span class="keyword">import</span> xxx <span class="keyword">from</span> <span class="string">'./cal.js'</span>会获取到整个对象的<span class="keyword">default</span>属性</span><br><span class="line">obj1:<span class="string">"我是声明式导出1"</span></span><br><span class="line">obj2:<span class="string">"我是声明式导出2"</span> </span><br><span class="line">obj3:<span class="string">"我是声明式导出3"</span>     <span class="keyword">import</span> &#123;obj1,obj2&#125;</span><br><span class="line">obj4:<span class="string">"我是声明式导出4"</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> allObj <span class="keyword">from</span> <span class="string">'./cal.js'</span>;  获取的就是一整个对象</span><br></pre></td></tr></table></figure>
</li>
<li><p>import 和export一定写在顶级，不要包含在{}内</p>
</li>
</ul>
<ul>
<li>build：打包配置所在的文件夹</li>
<li>打包的配置</li>
<li>开发项目的源码</li>
<li>App.vue入口组件(.vue都是一个组件)</li>
<li>main.js项目入口的文件</li>
<li>static：静态资源</li>
<li><p>webpack.base.conf.js 打包核心的配置与config-&gt;index.js可以合并成为一个</p>
</li>
<li><p>build.js打生产包</p>
</li>
</ul>
<ul>
<li>package.json</li>
</ul>
<ol>
<li>项目描述</li>
<li>dependencies：依赖库</li>
<li>devDependencied：开发依赖库</li>
<li>engines： 引擎</li>
<li>browserslist：浏览器列表</li>
</ol>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>vue简易下拉框</title>
    <url>/2018/12/14/vue%E4%B8%8B%E6%8B%89%E6%A1%86/</url>
    <content><![CDATA[<p>使用vue模拟了一个简易的下拉框，主要是根据传入当前索引实现数据切换的。具体实现代码如下：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown show"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> @<span class="attr">click</span>=<span class="string">"toggleDrop"</span>  <span class="attr">ref</span>=<span class="string">"listParents"</span>&gt;</span></span><br><span class="line">    &#123;&#123;content.languages[nowIndex].name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-show</span>=<span class="string">"isDrop"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">"(ops,index) in content.languages"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">"ops.id"</span> </span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"chooseSelection(index)"</span>&gt;</span>&#123;&#123;ops.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        isDrop:<span class="literal">false</span>,</span><br><span class="line">        nowIndex:<span class="number">0</span>,</span><br><span class="line">        content&#123;</span><br><span class="line">            languages:&#123;</span><br><span class="line">                [</span><br><span class="line">                    name:<span class="string">'lele'</span>,</span><br><span class="line">                    id:<span class="number">1</span></span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    name:<span class="string">'xiaohong'</span>,</span><br><span class="line">                    id:<span class="number">2</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    toggleDrop() &#123;</span><br><span class="line">        <span class="keyword">this</span>.isDrop = !<span class="keyword">this</span>.isDrop</span><br><span class="line">    &#125;,</span><br><span class="line">    chooseSelection(index) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nowIndex = index;</span><br><span class="line">        <span class="keyword">this</span>.isDrop = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于点击空白处隐藏，具体实现的思路是：</p>
<ol>
<li>给document添加一个事件监听</li>
<li>当发生点击事件的时候判断点击的是否是当前对象（vue使用ref）</li>
<li>此段js写在mounted函数里面<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,e=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.$refs.listParents.contains(e.target)) &#123; <span class="comment">//这句是说如果我们点击到了listParents以外的区域</span></span><br><span class="line">            <span class="keyword">this</span>.isDrop = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>原生JS中是有contains方法的,但它并不是字符串方法，，仅用于判断DOM元素的包含关系，参数是Element类型<br>JS中通用的contains方法判断两个节点的关系</p>
</blockquote>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>清空上传内容</title>
    <url>/2018/04/28/%E4%B8%8A%E4%BC%A0%E5%A4%9A%E4%B8%AAfile%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>如果要上传同一个文件。例如<br><code>&lt;input @change=&quot;fileChange(lesson, $event.target,index)&quot; type=&quot;file&quot; accept=&quot;.jpg,.png,.JPG,.PNG,.gif,.GIF,.xls,.xlsx,.ppt,.pptx,.doc,.docx,.txt,.pdf,.jpeg,.bmp,.XLS,.XLSX,.PPT,.PPTX,.DOC,.DOCX,.TXT,.PDF,.JPEG,.BMP&quot;&gt;</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fileChange: <span class="function"><span class="keyword">function</span> (<span class="params">course, input, index</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">let</span> fileObj = input.files[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">var</span> file = &#123;</span><br><span class="line">         prepare: <span class="literal">false</span>,<span class="comment">//是否可预览</span></span><br><span class="line">         name: fileObj.name,</span><br><span class="line">         size: fileObj.size,</span><br><span class="line">         previewFlag: <span class="literal">false</span>,</span><br><span class="line">         process: <span class="literal">true</span></span><br><span class="line">       &#125;;</span><br><span class="line">       course.files.push(file);</span><br><span class="line">                 input.value = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p>
<p>那么在js里只需要一行代码<br><code>input.value = &quot;&quot;</code></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>js中的内置函数</title>
    <url>/2018/03/28/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>js中有哪些内置函数？–函数封装类对象</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">Object</span><br><span class="line">Array</span><br><span class="line">Boolearn</span><br><span class="line">String</span><br><span class="line">Function</span><br><span class="line">Error</span><br><span class="line">Number</span><br><span class="line">Date</span><br><span class="line">RegExp</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>日常js</title>
    <url>/2017/03/01/%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<ul>
<li><p>直接将函数名作为参数，直接调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'success'</span>)</span><br><span class="line">&#125;</span><br><span class="line">test1(test2)</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义一个调用以带参数的函数为参数的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn(mydata)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br><span class="line">test1(test2(<span class="string">'hello world'</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>作为参数的函数不再单独定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line">test1(<span class="function"><span class="params">data</span> =&gt;</span>&#123;</span><br><span class="line">    alert(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="属性删除"><a href="#属性删除" class="headerlink" title="属性删除"></a>属性删除</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//delete只能删除属性，不可以删除一个变量,在函数内也不可以，隐式的创建一个变量可以删除</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">delete</span> obj.x; <span class="comment">//true</span></span><br><span class="line">obj.x;<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> a; <span class="comment">//false</span></span><br><span class="line">a; <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> localVal = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">delete</span> localVal;</span><br><span class="line">&#125;)()<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> fd; <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">delete</span> fd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">ohNo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.ohNo; <span class="comment">//1</span></span><br><span class="line"><span class="keyword">delete</span> ohNo; <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h4 id="属性检测"><a href="#属性检测" class="headerlink" title="属性检测"></a>属性检测</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">cat.legs = <span class="number">4</span>;</span><br><span class="line">cat.name = <span class="string">'lele'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'legs'</span> <span class="keyword">in</span> cat <span class="comment">//true</span></span><br><span class="line"><span class="string">'abc'</span> <span class="keyword">in</span> cat <span class="comment">//false</span></span><br><span class="line"><span class="string">'toString'</span> <span class="keyword">in</span> cat <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">cat.hasOwnProperty(<span class="string">'legs'</span>)<span class="comment">//true</span></span><br><span class="line">cat.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">//false</span></span><br><span class="line"><span class="comment">//是否可枚举</span></span><br><span class="line">cat.propertyIsEnumerable(<span class="string">'legs'</span>);<span class="comment">//true</span></span><br><span class="line">cat.propertyIsEnumerable(<span class="string">'toString'</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在枚举是false的方法,Object.defineProperty默认的属性都是false</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">Object</span>.defineProperty(cat,<span class="string">'price'</span>,&#123;</span><br><span class="line">    enumerable:<span class="literal">false</span>,</span><br><span class="line">    value:<span class="number">1000</span></span><br><span class="line">&#125;)</span><br><span class="line">cat.propertyIsEnumerable(<span class="string">'price'</span>) <span class="comment">//false</span></span><br><span class="line">cat.hasOwnProperty(<span class="string">'price'</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(cat &amp;&amp; cat.legs) &#123;</span><br><span class="line">    cat.legs *=<span class="number">2</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(cat.legs != <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// !=undefined or !=null</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cat.legs !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// only id cat.legs is not undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="属性枚举"><a href="#属性枚举" class="headerlink" title="属性枚举"></a>属性枚举</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> o = &#123;</span><br><span class="line">     x:<span class="number">1</span>,</span><br><span class="line">     y:<span class="number">2</span>,</span><br><span class="line">     z:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">'toString'</span> <span class="keyword">in</span> o;<span class="comment">//true</span></span><br><span class="line">o.propertyIsEnumerable(<span class="string">'toString'</span>) <span class="comment">//false</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key) <span class="comment">//x,y,z</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>(o)</span><br><span class="line">obj.a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i) <span class="comment">//a,x,y,z</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> o <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log)(a) <span class="comment">//a</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="属性getter-setter方法"><a href="#属性getter-setter方法" class="headerlink" title="属性getter/setter方法"></a>属性getter/setter方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name:<span class="string">'lele'</span>,</span><br><span class="line">    get age() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() <span class="number">-2014</span></span><br><span class="line">    &#125;,</span><br><span class="line">    set age(val) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'no set'</span> +val)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.age) <span class="comment">//4</span></span><br><span class="line">person.age = <span class="number">20</span> <span class="comment">//no set20</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age) <span class="comment">//4</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>作用域</title>
    <url>/2017/12/01/%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h4 id="ReferenceError-同作用域判别失败相关，而-TypeError-则代表作用域判别成功了，但是对结果的操作是非法或不合理的。"><a href="#ReferenceError-同作用域判别失败相关，而-TypeError-则代表作用域判别成功了，但是对结果的操作是非法或不合理的。" class="headerlink" title="ReferenceError 同作用域判别失败相关，而 TypeError 则代表作用域判别成功了，但是对结果的操作是非法或不合理的。"></a>ReferenceError 同作用域判别失败相关，而 TypeError 则代表作用域判别成功了，但是对结果的操作是非法或不合理的。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//js具有基于函数的作用域，每声明一个函数都会为其自身创造一个气泡，而其他结构都不会创建作用域气泡，但并非完全真确</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo(..)包含了a,b,c,bar，所以无法从foo(..)的外部对他进行访问，这些标识符全都无法从全局作用域中进行访问。</span></span><br><span class="line">bar() <span class="comment">//ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(a,b,c) <span class="comment">//ReferenceError</span></span><br></pre></td></tr></table></figure>
<h5 id="函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）"><a href="#函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）" class="headerlink" title="函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）"></a>函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用（嵌套的作用域中也可以使用）</h5><h5 id="隐藏内部实现–最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的-API-设计。"><a href="#隐藏内部实现–最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的-API-设计。" class="headerlink" title="隐藏内部实现–最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。"></a>隐藏内部实现–最小特权：这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量 b 和函数 doSomethingElse(..) 应该是 doSomething(..) 内部具体 实现的“私有”内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomethingElse</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> b;</span><br><span class="line">    b = a + doSomethingElse(a * <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(b * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">doSomething(<span class="number">2</span>) <span class="comment">//15</span></span><br><span class="line"><span class="comment">//b 和 doSomethingElse(..) 都无法从外部被访问，而只能被 doSomething(..) 所控制</span></span><br></pre></td></tr></table></figure>
<h5 id="全局命名空间-–-避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。"><a href="#全局命名空间-–-避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。" class="headerlink" title="全局命名空间 – 避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。"></a>全局命名空间 – 避免变量冲突，比如在全局作用域中声明一个独特的变量名，通常是一个对象（命名空间），所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myRellyCoolLibrary = &#123;</span><br><span class="line">    awesome:<span class="string">'stuff'</span>,</span><br><span class="line">    doSomething:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">    &#125;,</span><br><span class="line">    doAotherThing:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="函数作用域-–任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。"><a href="#函数作用域-–任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。" class="headerlink" title="函数作用域 –任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。"></a>函数作用域 –任意代码片段外部添加包装函数，科技将内部的变量和函数定义‘隐藏’起来，外部作用域无法访问包装函数内部的任何内容。</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//2</span></span><br><span class="line"><span class="comment">// foo 被绑定在所在作用域中，可以直接通过foo() 来调用它</span></span><br></pre></td></tr></table></figure>
<ul>
<li>缺点：必须声明一个具名函数foo(),’污染’了作用域，必须要显式的通过调用函数名foo()才能运行。</li>
<li>参考以下方法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//3</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//2</span></span><br><span class="line"><span class="comment">// foo 被绑定在函数表达式自身的函数中而不是所在作用域中,此时函数会被当作函数表达式而不是一个标准的函数声明来处理。</span></span><br><span class="line"><span class="comment">//(function foo()&#123; .. &#125;)作为函数表达式意味着foo只能在..所代表的位置中 被访问，外部作用域则不行。foo 变量名被隐藏在自身中意味着不会非必要地污染外部作 用域。</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><code>区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位 置(不仅仅是一行代码，而是整个声明中的位置)。如果 function 是声明中 的第一个词，那么就是一个函数声明，否则就是一个函数表达式。</code></p>
<h5 id="let–let-关键字可以将变量绑定到所在的任意作用域中，-通常是-内部"><a href="#let–let-关键字可以将变量绑定到所在的任意作用域中，-通常是-内部" class="headerlink" title="let–let 关键字可以将变量绑定到所在的任意作用域中，(通常是 {..}内部)."></a>let–let 关键字可以将变量绑定到所在的任意作用域中，(通常是 {..}内部).</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(foo) &#123;</span><br><span class="line">    <span class="keyword">let</span> bar = foo * <span class="number">2</span>;</span><br><span class="line">    bar = something(bar)</span><br><span class="line">    <span class="built_in">console</span>.log(bar)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bar) <span class="comment">//ReferenceError</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log( bar ); <span class="comment">// ReferenceError! let bar = 2;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//..doSomething</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> someReally = &#123;..&#125;</span><br><span class="line">    process(someReally)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'div'</span>)</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'button clicked'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line">     <span class="built_in">console</span>.log( i ); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="comment">//for 循环头部的 let 不仅将 i 绑定到了 for 循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> j;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j&lt;<span class="number">10</span>;j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> i = j; <span class="comment">//// 每个迭代重新绑定!</span></span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>由于 let 声明附属于一个新的作用域而不是当前的函数作用域(也不属于全局作用域)， 当代码中存在对于函数作用域中 var 声明的隐式依赖时，就会有很多隐藏的陷阱，如果用 let 来替代 var 则需要在代码重构的过程中付出额外的精力。</li>
</ul>
<h5 id="const"><a href="#const" class="headerlink" title="const"></a>const</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span>(foo) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> b = <span class="number">3</span>;</span><br><span class="line">    a = <span class="number">3</span>;<span class="comment">//ok</span></span><br><span class="line">    b = <span class="number">4</span>;<span class="comment">//no</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//PrferenceError</span></span><br></pre></td></tr></table></figure>
<ul>
<li>函数是 JavaScript 中最常见的作用域单元。</li>
<li>声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，这是有意为之的良好软件的设计原则。</li>
<li>但函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块(通常指 { .. } 内部)。</li>
<li>try/catch 结构在 catch 分句中具有块作用域。</li>
</ul>
<h5 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h5><ul>
<li>函数表达式不会提升，函数声明会<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">foo()</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">//ubdefined</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//理解如此</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//undefined</span></span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"><span class="comment">//理解如下</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line">foo();<span class="comment">//TypeError</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a>函数优先</h5><ul>
<li>函数会首先被提升，然后才是变量<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">foo() <span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//理解如下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo() <span class="comment">//1</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出现在后面的函数声明还是可以覆盖前面的</span></span><br><span class="line">foo() <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个普通块内部的函数声明通常会被提升到所在作用域的顶部</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>《你不知道的javascript上卷》</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack端口号</title>
    <url>/2021/03/15/webpack%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<p>今日，修改webpack端口号，遇到了问题<br>本来是在webpack.config.js文件夹里添加了devServer属性<br><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">   <span class="attribute">devServer</span>: &#123;</span><br><span class="line">        <span class="attribute">port</span>: <span class="number">2333</span>,</span><br><span class="line">        <span class="attribute">host</span>: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">        <span class="attribute">overlay</span>: &#123;</span><br><span class="line">            <span class="attribute">errors</span>: true</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attribute">hot</span>: true</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">     <span class="attribute">plugins</span>: [</span><br><span class="line">        new webpack.HotModuleReplacementPlugin(),]</span><br><span class="line"><span class="built_in">``</span>`   </span><br><span class="line"><span class="built_in">`webpack-dev-server`</span> 带 <span class="built_in">`hot`</span> 参数的时候，要去掉config里面的 HotModuleReplacementPlugin</span><br><span class="line">不然会内存溢出。</span><br><span class="line">解决办法：删除</span><br></pre></td></tr></table></figure></p>
<p>plugins: [<br>        new webpack.HotModuleReplacementPlugin()<br>]<br><code>`</code><br>将<br><code>&quot;dev&quot;: &quot;webpack-dev-server --mode development&quot;,</code><br>改为<br><code>&quot;dev&quot;: &quot;webpack-dev-server --hot --inline&quot;,</code><br>启动服务并不能自动刷新，要自动刷新需要用到webpack-dev-server –hot –inline<br>当使用webpack-dev-server –hot –inline命令时，<br>在每次修改文件，是将文件打包<br>　　保存在内存中并没有写在磁盘里(默认是根据webpack.config.js打包文件，通过–config xxxx.js修改)，这种打包得到的文件<br>　　和项目根目录中的index.html位于同一级（你看不到，因为<br>　　它在内存中并没有在磁盘里）。使用webpack命令将打包后的文件保存在磁盘中<br>　　例如在index.html文件中引入通过webpack-dev-server –hot –inline打包的build.js<br><code>&lt;script src=&quot;build.js&quot;&gt;&lt;/script&gt;</code><br>　　在index.html文件中引入通过webpack命令打包的build.js<br><code>&lt;script src=&quot;./build/build.js&quot;&gt;&lt;/script&gt;</code></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>动态添加属性（set）</title>
    <url>/2021/03/15/%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<p>使用vue动态的添加属性，假设从父组件<code>props</code>传来一个数组，要为数组中的每一项添加一个属性，每个属性点击一次就+1，大于2的时候就为0，（0，1，2），添加另一组属性，当为0的时候显示一张图，当为1的时候，显示另一张图片，当为1的时候再换一张图片。当点击某一个按钮，剩余其他的状态要归0，图片显示0的对应的图片。<br>代码实现如下：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">itemsTrans:&#123;&#125;,</span><br><span class="line">currentSort: <span class="number">0</span>,<span class="comment">//当前排序</span></span><br><span class="line">created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.content.titles.forEach(<span class="function">(<span class="params">i,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$set(<span class="keyword">this</span>.itemsTrans,<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>`</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">this</span>.$set(<span class="keyword">this</span>.itemsTrans,<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>img`</span>,<span class="string">'xxx.png'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">    changeToggle(item,index) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.content.titles.length;i++) &#123; <span class="comment">//返回默认状态</span></span><br><span class="line">            <span class="keyword">if</span>(i !== index) &#123;</span><br><span class="line">                <span class="keyword">this</span>.itemsTrans[<span class="string">`toggle<span class="subst">$&#123;i&#125;</span>`</span>] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">this</span>.itemsTrans[<span class="string">`toggle<span class="subst">$&#123;i&#125;</span>img`</span>] = <span class="string">'xxx.png'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.itemsTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>`</span>] += <span class="number">1</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>`</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.content.currentSort = <span class="number">1</span></span><br><span class="line">                <span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>img`</span>] = <span class="string">'yyy.png'</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>`</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.content.currentSort = <span class="number">2</span></span><br><span class="line">                <span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>img`</span>] = <span class="string">'zzz.png'</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>`</span>] &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>img`</span>] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>`</span>] = <span class="string">'xxx.png'</span></span><br><span class="line">                <span class="keyword">this</span>.content.currentSort = <span class="number">0</span></span><br><span class="line">              &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果要做数据加载分页的话一定要先切割，以免出现数据重复。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.content.items.splice(<span class="number">0</span>,<span class="keyword">this</span>.content.items.length)</span><br><span class="line"><span class="keyword">this</span>.content.items.push(...items)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>封装--逐步运动</title>
    <url>/2021/03/15/%E5%B0%81%E8%A3%85%E8%BF%90%E5%8A%A81/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        * &#123;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">            padding: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        div &#123;</span></span><br><span class="line"><span class="regexp">            width: 200px;</span></span><br><span class="line"><span class="regexp">            height: 200px;</span></span><br><span class="line"><span class="regexp">            opacity: .3;</span></span><br><span class="line"><span class="regexp">            background-color: yellow;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script src=<span class="string">"moveOne.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> tag = $tag(<span class="string">'div'</span>)</span><br><span class="line">        tag.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            starSport(tag, <span class="string">'width'</span>, <span class="number">400</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                starSport(tag, <span class="string">'opacity'</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        tag.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            starSport(tag, <span class="string">'width'</span>, <span class="number">200</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                starSport(tag, <span class="string">'opacity'</span>, <span class="number">30</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//moveOne.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$tag</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取样式属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.currentStyle) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[attr]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(obj, <span class="literal">false</span>)[attr]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运动</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">starSport</span>(<span class="params">obj, attr, target, fn</span>) </span>&#123; <span class="comment">//当前对象，属性，变化对象</span></span><br><span class="line">    obj.timer = <span class="literal">null</span></span><br><span class="line">    clearInterval(obj.timer)</span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> current = <span class="number">0</span></span><br><span class="line">        <span class="comment">//定义当前属性</span></span><br><span class="line">        <span class="keyword">if</span> (attr === <span class="string">'opacity'</span>) &#123;</span><br><span class="line">            current = <span class="built_in">Math</span>.round(<span class="built_in">parseFloat</span>(getStyle(obj, attr) * <span class="number">100</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = <span class="built_in">parseInt</span>(getStyle(obj, attr))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义速度</span></span><br><span class="line">        <span class="keyword">var</span> speed = (target - current) / <span class="number">8</span></span><br><span class="line">        speed = speed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(speed) : <span class="built_in">Math</span>.floor(speed)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果当前值等于目标值</span></span><br><span class="line">        <span class="keyword">if</span> (current === target) &#123;</span><br><span class="line">            <span class="comment">//如果第一次运动停止</span></span><br><span class="line">            clearInterval(obj.timer)</span><br><span class="line">            <span class="keyword">if</span> (fn) &#123;</span><br><span class="line">                fn()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (attr === <span class="string">'opacity'</span>) &#123;</span><br><span class="line">                obj.style[attr] = (current + speed) / <span class="number">100</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                obj.style[attr] = current + speed + <span class="string">'px'</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>异步回调处理</title>
    <url>/2021/03/15/%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83/</url>
    <content><![CDATA[<p>之前异步回调总是出现问题，先上一段错误的代码<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">callbacking = <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.callbacking) &#123;</span><br><span class="line">    <span class="keyword">this</span>.callbacking = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.callback()</span><br><span class="line">    <span class="keyword">this</span>.callbacking = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这段代码会走<code>this.callbacking = false</code>但是没有意义，如果callback是同步的，这个if在callback执行期间不再会走第二次，如果是异步的，这样写是不对的。我的callback是异步的。。所以这样写的效果是这样的<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.callbacking = <span class="literal">true</span></span><br><span class="line"><span class="keyword">this</span>.callback() <span class="comment">//发起异步请求后callback函数结束（请求未完成）</span></span><br><span class="line"><span class="keyword">this</span>.callbacking = <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p>也就是说，callbacking在异步请求没有结束的时候就已经回归到false了，无法起到想要的作用。应该这样写：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.callbacking = <span class="literal">true</span></span><br><span class="line"><span class="keyword">this</span>.callback(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.callbacking = <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>callback接受的函数需要在异步完成后执行。这样才能保证指定代码在异步操作完成后才执行，比如说在<code>this.callbacking = true</code>上锁后，是希望在异步操作结束后才解锁。</p>
<p>或者使用promise，在.then().then解决</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>回调函数</title>
    <url>/2018/03/01/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<ul>
<li>js代码是顺序执行的，如果需要等到一个操作结束之后再进行下一个操作，这个时候需要用到回调函数</li>
<li>函数也是一种数据结构，可以像变量一样使用</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6系列-类与对象</title>
    <url>/2021/03/15/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类与对象</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = 'yoyo') &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> v_person = <span class="keyword">new</span> Person(<span class="string">'v'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(v_person) <span class="comment">//Person &#123;name: "v"&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = 'child') &#123;</span><br><span class="line">            <span class="comment">//  super()会使用父类的所有</span></span><br><span class="line">            <span class="keyword">super</span>(name)</span><br><span class="line">            <span class="keyword">this</span>.type = <span class="string">'dog'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> Child()) <span class="comment">//Child &#123;name: "child", type: "dog"&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> Child(<span class="string">'hello'</span>)) <span class="comment">//Child &#123;name: "hello", type: "dog"&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// getter,setter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = 'yoy') &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name</span><br><span class="line">        &#125;</span><br><span class="line">        get longName() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">'读取属性'</span></span><br><span class="line">        &#125;</span><br><span class="line">        set longName(value) &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> v = <span class="keyword">new</span> Person()</span><br><span class="line">    <span class="built_in">console</span>.log(v.longName, <span class="string">'getter'</span>)<span class="comment">//yoy读取属性 getter</span></span><br><span class="line">    v.longName = <span class="string">'hello'</span></span><br><span class="line">    <span class="built_in">console</span>.log(v.longName) <span class="comment">//hello读取属性</span></span><br><span class="line">    <span class="keyword">let</span> vs = <span class="keyword">new</span> Person(<span class="string">'lele'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(vs.longName, <span class="string">'setter'</span>) <span class="comment">//lele读取属性 setter</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 静态方法，不是使用类的实例去调用</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = 'yoyo') &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> tail() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'this is tail'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.tail()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 静态属性 ===&gt; 直接在类上定义</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = 'uouo') &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> tail() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'this is tail'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.numberId = <span class="number">23333</span></span><br><span class="line">    <span class="built_in">console</span>.log(Person.numberId) <span class="comment">//2333</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>变量</title>
    <url>/2017/01/01/%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><ul>
<li>全局变量可以减少变量的个数，减少由于实际参数和形式参数的数据传递带来的时间消耗</li>
<li>全局变量保存在静态存储区，程序开始运行时为其分配内存，程序结束的时候释放该内存，局部变量的动态分配，动态释放相比，生存期比较长，因此过多的全局变量会占用较多的内存单元。</li>
<li>全局变量破坏了函数的封装性能。函数象一个黑匣子，一般是通过函数参数 和返回值进行输入输出，函数内部实现相对独立。但函数中如果使用了全局变量， 那么函数体内的语句就可以绕过函数参数和返回值进行存取，这种情况破坏了函 数的独立性，使函数对全局变量产生依赖。同时，也降低了该函数的可移植性。</li>
<li>全局变量使函数的代码可读性降低。由于多个函数都可能使用全局变量，函 数执行时全局变量的值可能随时发生变化，对于程序的查错和调试都非常不利。 因此，如果不是万不得已，最好不要使用全局变量。</li>
</ul>
<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><ul>
<li>当局部变量与全局变量同名的时候，全局变量会被局部变量覆盖。也就是说 函数在使用该变量的时候会以局部变量覆盖全局变量，也就是只有局部变量会起 效果。在此定义域中赋值等操作时都不会使用到全局变量。</li>
<li>在 main 函数或其他函数里定义了局部变量，同时同名的全局变量同时也存 在，当调用一个使用了该变量的函数(该变量在此函数中无定义)时，函数会使 用全局变量。而不是 main 或其他函数中定义的同名变量</li>
</ul>
<h4 id="var"><a href="#var" class="headerlink" title="var"></a>var</h4><ul>
<li>没有块级作用域</li>
<li>可以重复使用</li>
<li>无法限制修改</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾回收</title>
    <url>/2017/12/03/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    <content><![CDATA[<h4 id="代码回收规则"><a href="#代码回收规则" class="headerlink" title="代码回收规则"></a>代码回收规则</h4><ol>
<li>全局变量不会被回收</li>
<li>局部变量会被回收，函数一旦运行完毕，函数内部的东西会被销毁</li>
<li>只要被另外一个作用于所引用就不会被回收</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br><span class="line">add();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>富文本-select改进</title>
    <url>/2021/03/15/%E6%94%B9%E8%BF%9B-select/</url>
    <content><![CDATA[<p>之前在项目中，做了一个富文本编辑器，第一次用的是原生js实现，第二次用vue实现功能，在select里面定义可以选择字体的大小，当时采取的是@input去实现，无聊时读了下vue文档，发现其实。。是可以改进的，比如说v-model是一个语法糖，文档是这样说的：</p>
<ul>
<li>自定义事件也可以用于创建支持 v-model 的自定义输入组件<br><code>input v-nodel=searchText</code><br>等价于：<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> v-bind:value=<span class="string">'searchText'</span> v-<span class="keyword">on</span>:<span class="keyword">input</span>=<span class="string">'$event.target.value'</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>而我当时的实现就有一些复杂<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;select name=<span class="string">"fontSize"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"fontSize"</span> @change=<span class="string">"showSize($event)"</span>&gt;</span><br><span class="line">    &lt;option :value=<span class="string">"ops.value"</span></span><br><span class="line">            v-<span class="keyword">for</span>=<span class="string">"ops in fontSize"</span></span><br><span class="line">            :selected=<span class="string">"ops.value == 16 ? true: '' "</span>&gt;&#123;&#123;ops.value&#125;&#125;&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>select&gt;</span><br><span class="line"></span><br><span class="line">showSize: <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> execFontSize = <span class="function"><span class="keyword">function</span> (<span class="params">size, unit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> spanString = $(<span class="string">'&lt;span/&gt;'</span>, &#123;</span><br><span class="line">        <span class="string">'text'</span>: <span class="built_in">document</span>.getSelection()</span><br><span class="line">    &#125;).css(</span><br><span class="line">        &#123;<span class="string">'font-size'</span>: size + unit, <span class="string">'color'</span>: <span class="string">`#<span class="subst">$&#123;<span class="keyword">this</span>.designColor&#125;</span>`</span>&#125;).prop(<span class="string">'outerHTML'</span>);</span><br><span class="line">    <span class="built_in">document</span>.execCommand(<span class="string">'insertHTML'</span>, <span class="literal">false</span>, spanString);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> value = ev.target.value;</span><br><span class="line">    execFontSize(value, <span class="string">'px'</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>嗯嗯，改起来~~</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>功能</tag>
      </tags>
  </entry>
  <entry>
    <title>购物车项目</title>
    <url>/2018/04/01/%E8%B4%AD%E7%89%A9%E8%BD%A6%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h4 id="第一部分：购物功能"><a href="#第一部分：购物功能" class="headerlink" title="第一部分：购物功能"></a>第一部分：购物功能</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">//接口json数据</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"totalMoney"</span>: <span class="number">88</span>,</span><br><span class="line">        <span class="attr">"list"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"productId"</span>: <span class="string">"12345654321"</span>,</span><br><span class="line">                <span class="attr">"productName"</span>: <span class="string">"music"</span>,</span><br><span class="line">                <span class="attr">"productPrice"</span>: <span class="string">"28"</span>,</span><br><span class="line">                <span class="attr">"productQuentity"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"productImage"</span>: <span class="string">"img/goods.png"</span>,</span><br><span class="line">                <span class="attr">"parts"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"partId"</span>: <span class="string">"100001"</span>,</span><br><span class="line">                        <span class="attr">"partName"</span>: <span class="string">"see you again"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"productId"</span>: <span class="string">"12345654322"</span>,</span><br><span class="line">                <span class="attr">"productName"</span>: <span class="string">"food"</span>,</span><br><span class="line">                <span class="attr">"productPrice"</span>: <span class="string">"30"</span>,</span><br><span class="line">                <span class="attr">"productQuentity"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"productImage"</span>: <span class="string">"img/food.png"</span>,</span><br><span class="line">                <span class="attr">"parts"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"partId"</span>: <span class="string">"100002"</span>,</span><br><span class="line">                        <span class="attr">"partName"</span>: <span class="string">"ice"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"message"</span>:<span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>连接接口数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cartView();<span class="comment">//实例化创建完以后，默认查询某一个方法</span></span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">    cartView() &#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">        axios.get(<span class="string">'/user.json?ID=12345'</span>)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            that.productList = res.result.list</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>列表数据渲染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 购物车页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in productList"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 选中状态 a --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">:class</span>=<span class="string">"&#123;'check':item.check&#125;"</span> @<span class="attr">click</span>=<span class="string">"selectorPeoduct"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.productImage"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- titile --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;item.productName&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 类别 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span> <span class="attr">v-for</span>=<span class="string">"part in item.parts"</span> <span class="attr">v-text</span>=<span class="string">"part.partsName"</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 价格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;item.productPrice | formatMoney&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 个数 + - --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click</span>=<span class="string">"changeNum(item,-1)"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--item对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">v-model</span>=<span class="string">"item.productQuentity | money('元')"</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click</span>=<span class="string">"changeNum(item,1)"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 删除 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"delConfirm(item)"</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 总金额 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;item.productPrice * item.productQuentity&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">"&#123;'ckecked':checkAllFLag&#125;"</span> @<span class="attr">click</span>=<span class="string">"checkAll(true)"</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"checkAll(false)"</span>&gt;</span>取消全选<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 删除后的弹框提示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;'show':delFlag&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"delFlag = false"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"delProduct()"</span>&gt;</span>确认删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 结账 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"index.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        totalMoney:<span class="number">0</span>,<span class="comment">//总金额</span></span><br><span class="line">        productList:[],</span><br><span class="line">        checkAllFLag:<span class="literal">false</span>,</span><br><span class="line">        delFlag:<span class="literal">false</span>, <span class="comment">//遮罩开关</span></span><br><span class="line">        current:<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//局部</span></span><br><span class="line">filters:&#123;</span><br><span class="line">    formatMoney:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"￥"</span> + value.toFixed(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//全局</span></span><br><span class="line">vue.filter(<span class="string">'money'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value,type</span>)) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"￥"</span> + value.toFixed(<span class="number">2</span>) + type</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>改变商品数量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">changeMoney(product,way) &#123;</span><br><span class="line">      <span class="keyword">if</span>(way &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          product.productQuentity++</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          product.productQuentity--;</span><br><span class="line">          <span class="keyword">if</span>(product.productQuentity&lt; <span class="number">1</span>) &#123;</span><br><span class="line">              product.productQuentity = <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.totalPrice()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果接口返回的数据中，没有判断点中状态的数据，那么就动态添加一个选中状态的判断。(多用于循环)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// :class一定是一个object 或者 数组</span></span><br><span class="line">selectorPeoduct(item) &#123;</span><br><span class="line">    <span class="comment">//判断商品是否选中 ,如果一个对象中的变量不存在，set方法</span></span><br><span class="line">    <span class="comment">//判断item中的checked是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> item.checked == <span class="string">'undefined'</span>) &#123; <span class="comment">//如果等于就是不存在</span></span><br><span class="line">        <span class="comment">// 如果不存在，全局注册或者局部注册</span></span><br><span class="line">        Vue.set(item,<span class="string">'checked'</span>,<span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">this</span>.$set(item,<span class="string">'checked'</span>,<span class="literal">true</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        item.checked = !item.checked</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.totalPrice()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>全选，取消全选事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">checkAll(flag) &#123; <span class="comment">//参数用于判断当前状态是全选还是取消全选</span></span><br><span class="line">    <span class="keyword">this</span>.checkAllFlag = flag</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">this</span>.productList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//如果第一次直接点击的全选，那么上面的事件就不会触发，checked属性就不存在。那么就要判断是否注册。</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> item.checked == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            that.$set(item,<span class="string">'checked'</span>,<span class="keyword">this</span>.checkAllFlag)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            item .checked = <span class="keyword">this</span>.checkAllFlag</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">   <span class="keyword">this</span>.totalPrice()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>计算总金额</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">totalPrice() &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.totalMoney = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.productList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(item.checked) &#123;</span><br><span class="line">            that.totalMoney += item.productPrice * item.productQuentity</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除操作（当前选中的是哪个要删除）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">delConfirm(item) &#123;</span><br><span class="line">    <span class="keyword">this</span>.delFlag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.current = item; <span class="comment">//当前对象</span></span><br><span class="line">&#125;,</span><br><span class="line">delProduct() &#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="keyword">this</span>.productList.indexOf(<span class="keyword">this</span>.current) <span class="comment">//获取索引</span></span><br><span class="line">    <span class="keyword">this</span>.productList.splice(index,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">this</span>.delFlag = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="第二部分：地址选配功能"><a href="#第二部分：地址选配功能" class="headerlink" title="第二部分：地址选配功能"></a>第二部分：地址选配功能</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">//数据json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"result"</span>: [&#123;</span><br><span class="line">        <span class="attr">"addressId"</span>: <span class="string">"100000"</span>,</span><br><span class="line">        <span class="attr">"userName"</span>: <span class="string">"jeck"</span>,</span><br><span class="line">        <span class="attr">"stressName"</span>: <span class="string">"北京市海淀区"</span>,</span><br><span class="line">        <span class="attr">"tel"</span>: <span class="string">"1232112321"</span>,</span><br><span class="line">        <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">"addressId"</span>: <span class="string">"100000"</span>,</span><br><span class="line">        <span class="attr">"userName"</span>: <span class="string">"jeck"</span>,</span><br><span class="line">        <span class="attr">"stressName"</span>: <span class="string">"北京市海淀区"</span>,</span><br><span class="line">        <span class="attr">"tel"</span>: <span class="string">"1232112321"</span>,</span><br><span class="line">        <span class="attr">"isDefault"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">"addressId"</span>: <span class="string">"100000"</span>,</span><br><span class="line">        <span class="attr">"userName"</span>: <span class="string">"jeck"</span>,</span><br><span class="line">        <span class="attr">"stressName"</span>: <span class="string">"北京市海淀区"</span>,</span><br><span class="line">        <span class="attr">"tel"</span>: <span class="string">"1232112321"</span>,</span><br><span class="line">        <span class="attr">"isDefault"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>列表数据渲染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>配送地址<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in filterLength"</span> </span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"currentIndex = index"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">:class</span>=<span class="string">"&#123;'check':currentIndex == index&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dt</span>&gt;</span>&#123;&#123;item.userName&#125;&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123;item.stressName&#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123;item.tel&#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"!item.isDefault"</span></span></span><br><span class="line"><span class="tag">             @<span class="attr">click</span>=<span class="string">"setDefault(item.addressId)"</span>&gt;</span>设为默认<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"item.isDefault"</span>&gt;</span>默认地址<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"limitNum = addressList.length"</span>&gt;</span>显示全部列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 高亮 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;'check':sippingMethod ==1&#125;"</span></span></span><br><span class="line"><span class="tag">             @<span class="attr">click</span>=<span class="string">"sippingMethod = 1"</span>&gt;</span>标准配送<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;'check':sippingMethod ==2&#125;"</span></span></span><br><span class="line"><span class="tag">             @<span class="attr">click</span>=<span class="string">"sippingMethod = 2"</span>&gt;</span>高级配送<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数据加载</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getAddressList()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    getAddressList() &#123;</span><br><span class="line">         <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">        axios.get(<span class="string">'/address.json'</span>)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            that.addressList = res.result.list</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义data</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        addressList:[],</span><br><span class="line">        limitNum:<span class="number">3</span>,</span><br><span class="line">        currentIndex:<span class="number">0</span>,<span class="comment">//定义卡片索引，做高亮</span></span><br><span class="line">        sippingMethod:<span class="number">1</span> <span class="comment">//默认配送方式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果默认显示三张卡片</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    filterLength:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.addressList.slice(<span class="number">0</span>,<span class="keyword">this</span>.limitNum)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设为默认</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setDefault(addresssId) &#123;</span><br><span class="line">    <span class="keyword">this</span>.addressList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">address,index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(address.addressId == addressId) &#123;</span><br><span class="line">            address.isDefault = <span class="literal">true</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            address.isDefault = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>项目</tag>
        <tag>项分析目</tag>
      </tags>
  </entry>
  <entry>
    <title>既可以输入又可以显示下拉的列表</title>
    <url>/2017/12/02/%E6%98%BE%E7%A4%BA%E4%B8%8B%E6%8B%89/</url>
    <content><![CDATA[<p>今日工作需求，写了一个既可以上传输入又可以下拉列表的输入框<br>总结下这个功能的实现<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;input type=<span class="string">"text"</span></span><br><span class="line">                 id=<span class="string">"selectId"</span></span><br><span class="line">                 placeholder=<span class="string">"Select Teacher"</span></span><br><span class="line">                 v-model=<span class="string">"teaName"</span></span><br><span class="line">                 value=<span class="string">""</span></span><br><span class="line">                 @click=<span class="string">"selectTeacher"</span></span><br><span class="line">                 <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control pr"</span>&gt;</span><br><span class="line">                 &lt;img src=<span class="string">"/static/image/course-back.png"</span></span><br><span class="line">                 <span class="class"><span class="keyword">class</span></span>=<span class="string">"course-select-img"</span> </span><br><span class="line">                 :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;'course-select-img-transform':teaSelect&#125;"</span>&gt;</span><br><span class="line"> &lt;--下拉列表--&gt;</span><br><span class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"course-select "</span> </span><br><span class="line">               v-show=<span class="string">"teaSelect"</span>&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">          &lt;li v-<span class="keyword">for</span>=<span class="string">"(item,index) in filtedTeacher"</span></span><br><span class="line">              @click=<span class="string">"selectOption(item)"</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/省略列表显示部分，着重记录下输入匹配的方法</span></span><br><span class="line"><span class="regexp">data() &#123;</span></span><br><span class="line"><span class="regexp">    return&#123;</span></span><br><span class="line"><span class="regexp">        teachers:[] /</span><span class="regexp">/接收后台传来的对象</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">computed:&#123;</span></span><br><span class="line"><span class="regexp">    let filtedTeacher = [];</span></span><br><span class="line"><span class="regexp">    let inputName = this.teaName</span></span><br><span class="line"><span class="regexp">    if(!inputName || !inputName.length) &#123;</span></span><br><span class="line"><span class="regexp">        return this.teachers /</span><span class="regexp">/把原数组返回</span></span><br><span class="line"><span class="regexp">    &#125;else&#123;</span></span><br><span class="line"><span class="regexp">        for(var teacher of this.teachers) &#123;</span></span><br><span class="line"><span class="regexp">            if(teacher.name.indexOf(inputName) !== -1) &#123;</span></span><br><span class="line"><span class="regexp">                filtedTeacher.push(teacher)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>截取字符串最方便的办法</title>
    <url>/2021/03/15/%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>今日解析YouTube视频，采用了YouTube的iframe。<br>其中有一坑是YouTube不允许输入第三方链接，也就是不解析，解决的办法就是<br><code>http://www.youtube.com/embed/VIDEO_ID</code></p>
<ul>
<li><p>例如：<br><code>https://www.youtube.com/watch?v=78tNYZUS-ps</code><br>改为：<br><code>http://www.youtube.com/embed/78tNYZUS-ps</code></p>
</li>
<li><p>为了判断输入的URL是否是一个有效的，我们采取了后台解析id的办法，返回title。<br>那么我就需要将用户输入的链接进行截取。试了好几种办法，虽然都能实现，但是觉得麻烦，最终选择了，split()方法，他可以将一个字符串分割成字符串数组。</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">url</span> = <span class="string">'https://www.youtube.com/watch?v=78tNYZUS-ps'</span>;</span><br><span class="line"><span class="keyword">let</span> front = <span class="built_in">url</span>.split(<span class="string">'='</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> end = <span class="built_in">url</span>.split(<span class="string">'='</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(front,end) <span class="comment">//https://www.youtube.com/watch?v 78tNYZUS-ps</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>表单验证，滚动到错误位置</title>
    <url>/2017/03/03/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E6%BB%9A%E5%8A%A8/</url>
    <content><![CDATA[<p>今日有个需求是，表单验证的时候，不弹toast，而是滚动到错误位置，公司代码实现就不写了，记录下自己写的demo。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        * &#123;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">            padding: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        div &#123;</span></span><br><span class="line"><span class="regexp">            height: 1500px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        button &#123;</span></span><br><span class="line"><span class="regexp">            width: 100px;</span></span><br><span class="line"><span class="regexp">            height: 50px;</span></span><br><span class="line"><span class="regexp">            line-height: 50px;</span></span><br><span class="line"><span class="regexp">            background-color: rgb(0, 195, 255);</span></span><br><span class="line"><span class="regexp">            color: #fff;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;label for=""&gt;请输入&lt;/</span>label&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"check"</span>&gt;</span><br><span class="line">    &lt;p id=<span class="string">"tips"</span> style=<span class="string">"color:red;"</span>&gt;输入有误哟&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;button&gt;确认&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="https:/</span><span class="regexp">/cdn.bootcss.com/</span>jquery/<span class="number">3.3</span><span class="number">.1</span>/jquery.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        //jquery</span></span><br><span class="line"><span class="string">        $('#tips').hide()</span></span><br><span class="line"><span class="string">            //获取某个元素距离文档区域的距离</span></span><br><span class="line"><span class="string">        function move(id) &#123;</span></span><br><span class="line"><span class="string">            var currentScroll = $('#' + id).offset().top</span></span><br><span class="line"><span class="string">            $('html,body').animate(&#123;</span></span><br><span class="line"><span class="string">                scrollTop: currentScroll</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $('button').on('click', function() &#123;</span></span><br><span class="line"><span class="string">                if ($('#check' == undefined)) &#123;</span></span><br><span class="line"><span class="string">                    $('#tips').show()</span></span><br><span class="line"><span class="string">                    move('check')</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">            //javascript</span></span><br><span class="line"><span class="string">        function $(id) &#123;</span></span><br><span class="line"><span class="string">            return document.querySelector(id)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        $('#tips').style.display = 'none'</span></span><br><span class="line"><span class="string">        $('button').onclick = function() &#123;</span></span><br><span class="line"><span class="string">            if ($('#check').innerHTML == '') &#123;</span></span><br><span class="line"><span class="string">                $('#tips').style.display = 'block'</span></span><br><span class="line"><span class="string">                $('html').scrollTop = $('#check').offsetTop;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑运算符</title>
    <url>/2018/03/28/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &amp;&amp; <span class="number">0</span>) <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">''</span> || <span class="string">'abc'</span>) <span class="comment">//abc</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.abc) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断一个变量会被当做true还是false</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(!!a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">if</span>(a.b == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">//a.b === null ,a.b === undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参考于bootstrap源码</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>关于遍历一组对象</title>
    <url>/2018/02/28/%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>今日，要去遍历一组后台传来的数据，类似于<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">courses: [</span><br><span class="line"><span class="number">0</span>: &#123;</span><br><span class="line">    classId: <span class="string">"5b9b5a10a5084200d4905f98"</span>, </span><br><span class="line">    lessonId: <span class="string">"5b9b5840a5084200d4905f8e"</span>, </span><br><span class="line">    courseName: <span class="string">"sadfsafsadf"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: &#123;</span><br><span class="line">    classId: <span class="string">"5b9b5a10a5084200d4905f98"</span>, </span><br><span class="line">    lessonId: <span class="string">"5b9b584da5084200d4905f93"</span>, </span><br><span class="line">    courseName: <span class="string">"sadfsafsadf"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>这样的数据。<br>按照往常在vue里面动态展现数据的想法，我定义了一个空数组<code>courseList = []</code>，然后把后台的数据添加到这个空数组，如果是在vue中，一个 <code>v-for=&quot;item in courseList&quot;</code>就可以把数据展现了，但是我现在不是要在vue中展现，而是要js里面展现。<br>采用定义空数组，然后把后台数据赋值给空数组，再去遍历空数组，获取需要的数据。。。orz，好放繁琐的一个过程。。<br>现在，有一个新的做法，那就是</p>
<ol>
<li>不在定义一个空数组，而是定义一个空对象，<code>courseList = {}</code></li>
<li>出初始化这个对象，并把后台数据循环给这个对象的数组</li>
<li>接收传来的每一个对象<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码如下</span></span><br><span class="line"><span class="keyword">this</span>.data.courseList = &#123;&#125;</span><br><span class="line">data.courses.forEach(<span class="function"><span class="params">course</span> =&gt;</span>&#123; <span class="comment">//data.courses是后台数据</span></span><br><span class="line">    <span class="keyword">this</span>.data.courseList[course.courseId] = course <span class="comment">//course为每一组对象&#123;&#125;,&#123;&#125;,&#123;&#125;...</span></span><br><span class="line">    <span class="comment">//this.data.courseList将当前对象循环n次</span></span><br><span class="line">    <span class="comment">//[course.courseId]数组，取每次循环中对应的courseId对应的数据</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//这时候的 this.data.courseList[courseId]就等于</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">courseList:<span class="built_in">Object</span></span><br><span class="line"><span class="number">5</span>b9b5a10a5084200d4905f98:<span class="built_in">Object</span></span><br><span class="line">classId:<span class="string">"5b9b5a10a5084200d4905f98"</span></span><br><span class="line">courseName:<span class="string">"sadfsafsadf"</span></span><br><span class="line">lessonId:<span class="string">"5b9b584da5084200d4905f93"</span></span><br><span class="line"><span class="number">5</span>b9b5a2fa5084200d4905f9a:<span class="built_in">Object</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>闭包</title>
    <url>/2017/12/02/%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<ul>
<li><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)  <span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">    bar()</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = foo();</span><br><span class="line">baz();<span class="comment">//2  闭包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//bar()的词法作用域能够与访问foo()的内部作用域，将bar()函数本身当做一个值类型进行传递（将bar所引用的函数对象本身当做返回值）在foo()执行后，其返回值(bar()函数)赋值给变量baz并调用baz()，实际上只是通过不同的标识符引用调用了内部的函数bar(),bar() 显然可以被正常执行。但是在这个例子中，它在自己定义的词法作用域以外的地方 执行。</span></span><br><span class="line"><span class="comment">//在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，因为我们知道引擎有垃 圾回收器用来释放不再使用的内存空间。由于看上去 foo() 的内容不会再被使用，所以很 自然地会考虑对其进行回收。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此 没有被回收。谁在使用这个内部作用域?原来是 bar() 本身在使用。bar()拥有涵盖 foo() 内部作用域的闭包,使得该作用域能够一直存活，以供 bar() 在之后任何时间进行引用。</p>
<h6 id="bar-依然持有对该作用域的引用，而这个引用就叫作闭包。"><a href="#bar-依然持有对该作用域的引用，而这个引用就叫作闭包。" class="headerlink" title="bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。"></a>bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。</h6></li>
<li>这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的<br>词法作用域。<h6 id="无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到-闭包。"><a href="#无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到-闭包。" class="headerlink" title="无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到 闭包。"></a>无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到 闭包。</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a) <span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">    bar(baz)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把内部函数 baz 传递给 bar，当调用这个内部函数时(现在叫作 fn)，它涵盖的 foo()内部作用域的闭包就可以观察到了，因为它能够访问 a。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">    fn = baz;<span class="comment">//将 baz 分配给全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fn() <span class="comment">//这就是闭包!</span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line">bar() <span class="comment">//2</span></span><br><span class="line"><span class="comment">//无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用 域的引用，无论在何处执行这个函数都会使用闭包。</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="经典"><a href="#经典" class="headerlink" title="经典"></a>经典</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(message)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125; </span><br><span class="line">wait(<span class="string">'hello , closure '</span>)</span><br></pre></td></tr></table></figure>
<p>将一个内部函数(名为 timer)传递给 setTimeout(..)。timer 具有涵盖 wait(..) 作用域<br>的闭包，因此还保有对变量 message 的引用。<br>wait(..) 执行 1000 毫秒后，它的内部作用域并不会消失，timer 函数依然保有 wait(..)作用域的闭包。<br>深入到引擎的内部原理中，内置的工具函数 setTimeout(..) 持有对一个参数的引用，这个 参数也许叫作 fn 或者 func，或者其他类似的名字。引擎会调用这个函数，在例子中就是 内部的 timer 函数，而词法作用域在这个过程中保持完整。<br><code>这就是闭包</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setupBot</span>(<span class="params">name,selector</span>) </span>&#123;</span><br><span class="line">    $(selector).click(<span class="function"><span class="keyword">function</span> <span class="title">activator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"> setupBot( <span class="string">"Closure Bot 1"</span>, <span class="string">"#bot_1"</span> );</span><br><span class="line">     setupBot( <span class="string">"Closure Bot 2"</span>, <span class="string">"#bot_2"</span> );</span><br></pre></td></tr></table></figure>
<h6 id="如果将函数-访问它们各自的词法作用域-当作第一-级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、-Ajax-请求、跨窗口通信、Web-Workers-或者任何其他的异步-或者同步-任务中，只要使-用了回调函数，实际上就是在使用闭包-通常认为-IIFE-是典型的闭包例子"><a href="#如果将函数-访问它们各自的词法作用域-当作第一-级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、-Ajax-请求、跨窗口通信、Web-Workers-或者任何其他的异步-或者同步-任务中，只要使-用了回调函数，实际上就是在使用闭包-通常认为-IIFE-是典型的闭包例子" class="headerlink" title="如果将函数(访问它们各自的词法作用域)当作第一 级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步(或者同步)任务中，只要使 用了回调函数，实际上就是在使用闭包!通常认为 IIFE 是典型的闭包例子."></a>如果将函数(访问它们各自的词法作用域)当作第一 级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步(或者同步)任务中，只要使 用了回调函数，实际上就是在使用闭包!通常认为 IIFE 是典型的闭包例子.</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">IIEF</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">//这段代码可以正常工作，但严格来讲它并不是闭包。因为函数(示例代码中 的 IIFE)并不是在它本身的词法作用域以外执行的。它在定义时所在的作用域中执行(而外部作用域，也就是全局作用域也持有a)。a 是通过普通的词法作用域查找而非闭包被发现的。</span></span><br></pre></td></tr></table></figure>
<h5 id="循环和闭包–for循环"><a href="#循环和闭包–for循环" class="headerlink" title="循环和闭包–for循环"></a>循环和闭包–for循环</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span> ;i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125; <span class="comment">//6,6,6,6,6</span></span><br><span class="line"><span class="comment">//这个循环的终止条件是 i 不再 &lt;=5。条件首次成立时 i 的值是 6。因此，输出显示的是循环结束时 i 的最终值。</span></span><br><span class="line"><span class="comment">//延迟函数的回调会在循环结束时才执行。事实上， 当定时器运行时即使每个迭代中执行的是setTimeout(.., 0)，所有的回调函数依然是在循环结束后才会被执行，因此会每次输出一个 6 出来。</span></span><br></pre></td></tr></table></figure>
<ul>
<li>缺陷是我们试图假设循环中的每个迭代在运行时都会给自己“捕获”一个 i 的副本。但是 根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的， 但是它们都被封闭在一个共享的全局作用域中，因此实际上只有一个 i。</li>
<li>这样说的话，当然所有函数共享一个 i 的引用。循环结构让我们误以为背后还有更复杂的 机制在起作用，但实际上没有。如果将延迟函数的回调重复定义五次，完全不使用循环， 那它同这段代码是完全等价的。</li>
<li>缺陷是什么?我们需要更多的闭包作用域，特别是在循环的过程中每个迭代都需要一个闭包作用域。</li>
</ul>
<h6 id="IIFE-会通过声明并立即执行一个函数来创建作用域。"><a href="#IIFE-会通过声明并立即执行一个函数来创建作用域。" class="headerlink" title="IIFE 会通过声明并立即执行一个函数来创建作用域。"></a>IIFE 会通过声明并立即执行一个函数来创建作用域。</h6><ul>
<li>IIEF如果作用域是空的，那么将它进行封闭是没有效果的，需要有一点实质内容才可以。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span> ; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;,i*<span class="number">1000</span>)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//在迭代内使用 IIFE 会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="let劫持块作用域–并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）"><a href="#let劫持块作用域–并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）" class="headerlink" title="let劫持块作用域–并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）"></a>let劫持块作用域–并且在这个块作用域中声明了一个变量（将一个块转换成一个可以被关闭的作用域）</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i&lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;,i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> something = <span class="string">'cool'</span></span><br><span class="line">    <span class="keyword">var</span> other = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(something)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doOther</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(other.join(<span class="string">'!'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里并没有明显的闭包，只有两个私有数据变量 something 和 other，以及 doSomething() 和 doOther() 两个内部函数，它们的词法作用域(而这 就是闭包)也就是 foo() 的内部作用域。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">coolModule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> something = <span class="string">'study'</span></span><br><span class="line">    <span class="keyword">var</span> other = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(something)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doOther</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(other.join(<span class="string">'!'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        doSomething:doSomething,</span><br><span class="line">        doOther : doOther</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = coolModule()</span><br><span class="line">person.doSomething()</span><br><span class="line">person.doOther()</span><br><span class="line"><span class="comment">//这个模式在 JavaScript 中被称为模块。最常见的实现模块模式的方法通常被称为模块暴露， 这里展示的是其变体。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">1.coolModule()是一个函数，必须要通过调用他来创建一个模块实例，不执行外部函数，内部作用域和闭包都无法被创建</span></span><br><span class="line"><span class="comment">2.coolModule()返回的是一个对象字面量语法&#123;key:value,...&#125;来表示的对象。这 个返回的对象中含有对内部函数而不是内部数据变量的引用。我们保持内部数据变量是隐 藏且私有的状态。可以将这个对象类型的返回值看作本质上是模块的公共 API。</span></span><br><span class="line"><span class="comment">3.这个对象类型的返回值最终被赋值给外部的变量 foo，然后就可以通过它来访问 API 中的 属性方法，比如 foo.doSomething()。</span></span><br><span class="line"><span class="comment">4.doSomething() 和 doAnother() 函数具有涵盖模块实例内部作用域的闭包(通过调用 CoolModule() 实现)。当通过返回一个含有属性引用的对象的方式来将函数传递到词法作 用域外部时，我们已经创造了可以观察和实践闭包的条件。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>从模块中返回一个实际的对象并不是必须的，也可以直接返回一个内部函 数。jQuery 就是一个很好的例子。jQuery 和 $ 标识符就是 jQuery 模块的公 共 API，但它们本身都是函数(由于函数也是对象，它们本身也可以拥有属性)。</p>
</blockquote>
<h6 id="模块模式需要具备两个必要条件"><a href="#模块模式需要具备两个必要条件" class="headerlink" title="模块模式需要具备两个必要条件"></a>模块模式需要具备两个必要条件</h6><ol>
<li>必须有外部的封闭函数，该函数必须至少被调用一次(每次调用都会创建一个新的模块 实例)</li>
<li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</li>
</ol>
<ul>
<li>一个具有函数属性的对象本身并不是真正的模块。从方便观察的角度看，一个从函数调用 所返回的，只有数据属性而没有闭包函数的对象并不是真正的模块</li>
</ul>
<p>上一个示例代码中有一个叫作 CoolModule() 的独立的模块创建器，可以被调用任意多次， 每次调用都会创建一个新的模块实例。当只需要一个实例时，可以对这个模式进行简单的 改进来实现<code>单例模式</code>:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span> <span class="title">coolModuel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> something = <span class="string">'study'</span></span><br><span class="line">    <span class="keyword">var</span> other = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(something)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doOther</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(other.join(<span class="string">'!'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        doSomething:doSomething,</span><br><span class="line">        doOther:doOther</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">foo.doSomething()</span><br><span class="line">foo.doOther()</span><br><span class="line"><span class="comment">//我们将模块函数转换成了 IIFE立即调用这个函数并将返回值直接赋值给 单例的模块实例标识符 foo。</span></span><br></pre></td></tr></table></figure></p>
<p>模块也是普通的函数，因此可以接受参数:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">coolModule</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">identify</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(id)</span><br><span class="line">    &#125;<span class="keyword">return</span>&#123;</span><br><span class="line">        identify:identify</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = coolModule(<span class="string">'teacher'</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = coolModule(<span class="string">'doctor'</span>)</span><br><span class="line">person1.identify() <span class="comment">//teacher</span></span><br><span class="line">person2.identify() <span class="comment">//doctor</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>模块模式另一个简单但强大的变化用法是，命名将要作为公共 API 返回的对象:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span> <span class="title">coolModule</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 修改公共 API</span></span><br><span class="line">        publicAPI.identify = identify2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">identify1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(id)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">identify2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(id.toUpperCase())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> publicAPI = &#123;</span><br><span class="line">        change:change,</span><br><span class="line">        identify:identify1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> publicAPI</span><br><span class="line">  </span><br><span class="line">&#125;)(<span class="string">'foo person'</span>)</span><br><span class="line">    foo.identify()<span class="comment">//foo person</span></span><br><span class="line">    foo.change()</span><br><span class="line">    foo.identify()<span class="comment">//FOO PERSON</span></span><br><span class="line"><span class="comment">//通过在模块实例的内部保留对公共 API 对象的内部引用，可以从内部对模块实例进行修 改，包括添加或删除方法和属性，以及修改它们的值。</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="现代的模块机制"><a href="#现代的模块机制" class="headerlink" title="现代的模块机制"></a>现代的模块机制</h5><ul>
<li>大多数模块依赖加载器 / 管理器本质上都是将这种模块定义封装进一个友好的 API。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myModules = (<span class="function"><span class="keyword">function</span> <span class="title">Manager</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> modules = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params">name,deps,impl</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;deps.length;i++) &#123;</span><br><span class="line">            deps[i] = modules[deps[i]]</span><br><span class="line">        &#125;</span><br><span class="line">        modules[name] = impl.apply(impl,deps)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> modules[name]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        define:define,</span><br><span class="line">        get:get</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">//这段代码的核心是 modules[name] = impl.apply(impl, deps)。为了模块的定义引入了包装函数(可以传入任何依赖)，并且将返回值，也就是模块的 API，储存在一个根据名字来管 理的模块列表中。</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>下面展示了如何使用它来定义模块:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myModules.define(<span class="string">'bar'</span>,[],<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'let'</span>+who</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        hello:hello</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">myModules.define(<span class="string">'foo'</span>,[<span class="string">'bar'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hungry = <span class="string">'hippo'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">awesome</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(bar.hello(hungry).toUpperCase())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        awesome:awesome</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> bar = myModules.get(<span class="string">'bar'</span>)</span><br><span class="line"><span class="keyword">var</span> foo = myModules.get(<span class="string">'foo'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(bar.hello(<span class="string">'hippo'</span>))<span class="comment">//Let hippo</span></span><br><span class="line"><span class="comment">//"foo" 和 "bar" 模块都是通过一个返回公共 API 的函数来定义的。"foo" 甚至接受 "bar" 的 示例作为依赖参数，并能相应地使用它。</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>模块管理器:为函数定义引入包装函数，并保证它的返回值和模块的 API 保持一致</li>
<li>模块就是模块，即使在它们外层加上一个友好的包装工具也不会发生任何变化。<blockquote>
<p>基于函数的模块并不是一个能被稳定识别的模式(编译器无法识别)，它们 的 API 语义只有在运行时才会被考虑进来。因此可以在运行时修改一个模块 的 API(参考前面关于公共 API 的讨论)。<br>相比之下，ES6 模块 API 更加稳定(API 不会在运行时改变)。由于编辑器知 道这一点，因此可以在(的确也这样做了)编译期检查对导入模块的 API 成 员的引用是否真实存在。如果 API 引用并不存在，编译器会在运行时抛出一 个或多个“早期”错误，而不会像往常一样在运行期采用动态的解决方案.</p>
</blockquote>
</li>
<li>ES6 的模块没有“行内”格式，必须被定义在独立的文件中(一个文件一个模块)。浏览 器或引擎有一个默认的“模块加载器”(可以被重载)可以在导入模块时异步地加载模块文件。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bar.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Let me '</span> + who</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> hello</span><br><span class="line"></span><br><span class="line"><span class="comment">//foo.js</span></span><br><span class="line"><span class="comment">// 仅从 "bar" 模块导入 hello()</span></span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">'bar'</span></span><br><span class="line"><span class="keyword">var</span> hungry = <span class="string">'hippo'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">awesome</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(hello(hungry).toUpperCase())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> awesome</span><br><span class="line"><span class="comment">//baz.js</span></span><br><span class="line"><span class="comment">// 导入完整的 "foo" 和 "bar" 模块</span></span><br><span class="line"><span class="built_in">module</span> foo <span class="keyword">from</span> <span class="string">'foo'</span></span><br><span class="line"><span class="built_in">module</span> bar <span class="keyword">from</span> <span class="string">'bar'</span></span><br><span class="line"><span class="built_in">console</span>.log(bar.hello(<span class="string">'rhino'</span>))</span><br><span class="line"><span class="comment">// Let me  rhino</span></span><br><span class="line">     foo.awesome();</span><br><span class="line"><span class="comment">// LET ME : HIPPO</span></span><br><span class="line"><span class="comment">//需要用前面两个代码片段中的内容分别创建文件 foo.js 和 bar.js。然后如第三 个代码片段中展示的那样，bar.js 中的程序会加载或导入这两个模块并使用 它们。</span></span><br></pre></td></tr></table></figure>
<h6 id="import-可以将一个模块中的一个或多个-API-导入到当前作用域中，并分别绑定在一个变量-上-在我们的例子里是-hello-。module-会将整个模块的-API-导入并绑定到一个变量上-在-我们的例子里是-foo-和-bar-。export-会将当前模块的一个标识符-变量、函数-导出为公-共-API。这些操作可以在模块定义中根据需要使用任意多次。"><a href="#import-可以将一个模块中的一个或多个-API-导入到当前作用域中，并分别绑定在一个变量-上-在我们的例子里是-hello-。module-会将整个模块的-API-导入并绑定到一个变量上-在-我们的例子里是-foo-和-bar-。export-会将当前模块的一个标识符-变量、函数-导出为公-共-API。这些操作可以在模块定义中根据需要使用任意多次。" class="headerlink" title="import 可以将一个模块中的一个或多个 API 导入到当前作用域中，并分别绑定在一个变量 上(在我们的例子里是 hello)。module 会将整个模块的 API 导入并绑定到一个变量上(在 我们的例子里是 foo 和 bar)。export 会将当前模块的一个标识符(变量、函数)导出为公 共 API。这些操作可以在模块定义中根据需要使用任意多次。"></a>import 可以将一个模块中的一个或多个 API 导入到当前作用域中，并分别绑定在一个变量 上(在我们的例子里是 hello)。module 会将整个模块的 API 导入并绑定到一个变量上(在 我们的例子里是 foo 和 bar)。export 会将当前模块的一个标识符(变量、函数)导出为公 共 API。这些操作可以在模块定义中根据需要使用任意多次。</h6><h6 id="模块文件中的内容会被当作好像包含在作用域闭包中一样来处理"><a href="#模块文件中的内容会被当作好像包含在作用域闭包中一样来处理" class="headerlink" title="模块文件中的内容会被当作好像包含在作用域闭包中一样来处理"></a>模块文件中的内容会被当作好像包含在作用域闭包中一样来处理</h6><h5 id="模块-1"><a href="#模块-1" class="headerlink" title="模块"></a>模块</h5><ol>
<li>为创建内部作用域而调用了一个包装函数。</li>
<li>包装函数的返回 值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。</li>
</ol>
<blockquote>
<p>JavaScript 中的作用域就是词法 作用域(事实上大部分语言都是基于词法作用域的)<br>词法作用域是一套关于引擎如何寻找变量以及会在何处找到变量的规则。词法作用域最重要的特征是它的定义过程发生在代码的书写阶段(假设你没有使用 eval() 或 with)。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line">    foo()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">bar()</span><br><span class="line"><span class="comment">//词法作用域让 foo() 中的 a 通过 RHS 引用到了全局作用域中的 a，因此会输出 2。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调 用。换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。</span></span><br><span class="line"><span class="comment">事实上 JavaScript 并不具有动态作用域。它只有词法作用域，简单明了。 但是 this 机制某种程度上很像动态作用域。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h6 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别:"></a>主要区别:</h6><ol>
<li>词法作用域是在写代码或者说定义时确定的，而动态作用域是在运行时确定 的。(this 也是!)词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。</li>
<li>this 关注函数如何调用，这就表明了 this 机制和动态作用域之间的关系多么紧密</li>
</ol>
<h6 id="块作用域，而-with-和-catch-分句就是块作用域的两个小例子"><a href="#块作用域，而-with-和-catch-分句就是块作用域的两个小例子" class="headerlink" title="块作用域，而 with 和 catch 分句就是块作用域的两个小例子"></a>块作用域，而 with 和 catch 分句就是块作用域的两个小例子</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//ReferenceError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参考如下</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(a) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="comment">//catch 分句具有块作用域，因此它可以在 ES6 之前的环境中作为块作用域的替代方案。</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Traceur 的项目:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(a) &#123;</span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="隐式和显式作用域"><a href="#隐式和显式作用域" class="headerlink" title="隐式和显式作用域"></a>隐式和显式作用域</h5><ul>
<li>let 作用域或 let 声明(<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> (a = <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">     <span class="built_in">console</span>.log( a ); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>同隐式地劫持一个已经存在的作用域不同，let 声明会创建一个显示的作用域并与其进行 绑定。显式作用域不仅更加突出，在代码重构时也表现得更加健壮。在语法上，通过强制 性地将所有变量声明提升到块的顶部来产生更简洁的代码。这样更容易判断变量是否属于 某个作用域。</p>
<ul>
<li>let 声 明有意将变量声明放在块的顶部</li>
</ul>
</blockquote>
<h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="params">a</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">2</span>) <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    id:<span class="string">'awesome'</span>,</span><br><span class="line">    cool:<span class="function"><span class="keyword">function</span> <span class="title">coolFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> id = <span class="string">'no cool'</span></span><br><span class="line">obj.cool() <span class="comment">//cool</span></span><br><span class="line">setTimeout(obj.cool,<span class="number">100</span>)<span class="comment">//no cool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cool() 函数丢失了同 this 之间的绑定,解决：var self = this ---词法作用域,self 只是一个可以通过 词法作用域和闭包进行引用的标识符，不关心 this 绑定的过程中发生了什么。</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    count:<span class="number">0</span>,</span><br><span class="line">    cool:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span>(self.count &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                self.count++;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'awesome'</span>)</span><br><span class="line">            &#125;,<span class="number">100</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.cool()<span class="comment">//awesome</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    count:<span class="number">0</span>,</span><br><span class="line">    cool:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.count &lt;<span class="number">1</span>) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.count++;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'yes'</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.cool() <span class="comment">//yes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    count:<span class="number">0</span>,</span><br><span class="line">    cool:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.count &lt;<span class="number">1</span>) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.count++;<span class="comment">//this是安全的，因为bind()</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'more awsome'</span>)</span><br><span class="line">            &#125;.bind(<span class="keyword">this</span>),<span class="number">100</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.cool()</span><br></pre></td></tr></table></figure>
<ul>
<li>箭头函数的this是用当前的词法作用域覆盖了 this 本来的值。</li>
</ul>
<blockquote>
<p>《你不知道的javascript上卷》</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
