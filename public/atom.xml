<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郝洁的小栈</title>
  
  <subtitle>shaun web</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://onlyH.github.io/"/>
  <updated>2021-07-01T02:46:56.053Z</updated>
  <id>http://onlyH.github.io/</id>
  
  <author>
    <name>郝洁</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>github访问代理映射</title>
    <link href="http://onlyH.github.io/2021/07/01/github%E8%AE%BF%E9%97%AE%E4%BB%A3%E7%90%86%E6%98%A0%E5%B0%84/"/>
    <id>http://onlyH.github.io/2021/07/01/github访问代理映射/</id>
    <published>2021-07-01T02:39:40.000Z</published>
    <updated>2021-07-01T02:46:56.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为本地-hosts-文件添加-Github-相关映射"><a href="#为本地-hosts-文件添加-Github-相关映射" class="headerlink" title="为本地 hosts 文件添加 Github 相关映射"></a>为本地 hosts 文件添加 Github 相关映射</h3><ol><li>打开本地 hosts 文件 win + r =&gt; <code>C:\WINDOWS\system32\drivers\etc</code>进入</li><li>获取 Github 相关网站的 IP</li></ol><ul><li>访问 <a href="https://www.ipaddress.com" target="_blank" rel="noopener">https://www.ipaddress.com</a></li><li>输入 github.global.ssl.fastly.net 和 github.com，查询ip地址</li></ul><ol start="3"><li>将查询到的内容填写到hosts文件中：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">140.82.112.3      github.com</span><br><span class="line">199.232.69.194    github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure><ol start="4"><li>使用<code>ping github.com</code>查询是否配置成功</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为本地-hosts-文件添加-Github-相关映射&quot;&gt;&lt;a href=&quot;#为本地-hosts-文件添加-Github-相关映射&quot; class=&quot;headerlink&quot; title=&quot;为本地 hosts 文件添加 Github 相关映射&quot;&gt;&lt;/a&gt;为本地 hosts 文件添加 Github 相关映射&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;打开本地 hosts 文件 win + r =&amp;gt; &lt;code&gt;C:\WINDOWS\system32\drivers\etc&lt;/code&gt;进入&lt;/li&gt;
&lt;li&gt;获取 Github 相关网站的 IP&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;访问 &lt;a href=&quot;https://www.ipaddress.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ipaddress.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;输入 github.global.ssl.fastly.net 和 github.com，查询ip地址&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="技巧" scheme="http://onlyH.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>vue3-新特性</title>
    <link href="http://onlyH.github.io/2021/06/18/vue3-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://onlyH.github.io/2021/06/18/vue3-新特性/</id>
    <published>2021-06-18T06:27:55.000Z</published>
    <updated>2021-06-30T08:09:09.474Z</updated>
    
    <content type="html"><![CDATA[<h4 id="性能提升"><a href="#性能提升" class="headerlink" title="性能提升"></a>性能提升</h4><ul><li>打包大小减少41%</li><li>初次渲染快55%，133%</li><li>内存使用减少54%</li></ul><h4 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h4><ul><li>ref和reactive</li><li>computed和watch</li><li>新的生命周期函数</li><li>自定义函数-Hooks函数</li></ul><h4 id="新增特性"><a href="#新增特性" class="headerlink" title="新增特性"></a>新增特性</h4><ul><li>Teleport 瞬移组件的位置</li><li>Suspense 异步加载组件的新福音</li><li>全局API的修改和优化</li><li>更多的试验性特性</li></ul><h4 id="更好的ts支持"><a href="#更好的ts支持" class="headerlink" title="更好的ts支持"></a>更好的ts支持</h4><h4 id="为什么要有vue3（解决现有存在的棘手问题）"><a href="#为什么要有vue3（解决现有存在的棘手问题）" class="headerlink" title="为什么要有vue3（解决现有存在的棘手问题）"></a>为什么要有vue3（解决现有存在的棘手问题）</h4><ul><li><p>随着功能的增长，复杂组件的代码变得难以维护</p></li><li><p>Mixin的缺点 </p></li></ul><ol><li>明明冲突</li><li>不清楚暴露出来的变量的作用</li><li>重用到其他component经常遇到问题</li></ol><ul><li><p>setup中无法访问this</p></li><li><p>新生命周期</p></li></ul><p><img src="//onlyH.github.io/2021/06/18/vue3-新特性/生命周期.png" alt="生命周期"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;性能提升&quot;&gt;&lt;a href=&quot;#性能提升&quot; class=&quot;headerlink&quot; title=&quot;性能提升&quot;&gt;&lt;/a&gt;性能提升&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;打包大小减少41%&lt;/li&gt;
&lt;li&gt;初次渲染快55%，133%&lt;/li&gt;
&lt;li&gt;内存使用减少54%&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Composition-API&quot;&gt;&lt;a href=&quot;#Composition-API&quot; class=&quot;headerlink&quot; title=&quot;Composition API&quot;&gt;&lt;/a&gt;Composition API&lt;/h4&gt;
    
    </summary>
    
      <category term="技术" scheme="http://onlyH.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="感悟" scheme="http://onlyH.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>vue3-ts</title>
    <link href="http://onlyH.github.io/2021/06/17/vue3-ts/"/>
    <id>http://onlyH.github.io/2021/06/17/vue3-ts/</id>
    <published>2021-06-17T08:24:18.000Z</published>
    <updated>2021-06-17T08:36:32.365Z</updated>
    
    <content type="html"><![CDATA[<h4 id="程序-更容易理解"><a href="#程序-更容易理解" class="headerlink" title="程序 更容易理解"></a>程序 更容易理解</h4><ul><li>函数或者方法输入输出的参数类型，外部条件等</li><li>动态语言的约束：需要手动调整等过程</li><li>有了ts，diamante本身就可以回答上述问题</li></ul><h4 id="效率更高"><a href="#效率更高" class="headerlink" title="效率更高"></a>效率更高</h4><ul><li>在不同的代码块和定义中进行跳转</li><li>代码自动补全</li><li>丰富的接口提示</li></ul><h4 id="更少的错误"><a href="#更少的错误" class="headerlink" title="更少的错误"></a>更少的错误</h4><ul><li>编译期间能够发现大部分错误</li><li>杜绝一些比较常见错误</li></ul><h4 id="非常好的包容性"><a href="#非常好的包容性" class="headerlink" title="非常好的包容性"></a>非常好的包容性</h4><ul><li>完全兼容js</li><li>第三方库可以单独编写类型文件</li></ul><h4 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h4><ul><li>增加学习成本</li><li>短期内增加开发成本</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;程序-更容易理解&quot;&gt;&lt;a href=&quot;#程序-更容易理解&quot; class=&quot;headerlink&quot; title=&quot;程序 更容易理解&quot;&gt;&lt;/a&gt;程序 更容易理解&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;函数或者方法输入输出的参数类型，外部条件等&lt;/li&gt;
&lt;li&gt;动态语言的约束：需要手动调整等过程&lt;/li&gt;
&lt;li&gt;有了ts，diamante本身就可以回答上述问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;效率更高&quot;&gt;&lt;a href=&quot;#效率更高&quot; class=&quot;headerlink&quot; title=&quot;效率更高&quot;&gt;&lt;/a&gt;效率更高&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开发小技巧</title>
    <link href="http://onlyH.github.io/2021/06/17/17/"/>
    <id>http://onlyH.github.io/2021/06/17/17/</id>
    <published>2021-06-17T07:33:03.000Z</published>
    <updated>2021-06-17T07:40:55.929Z</updated>
    
    <content type="html"><![CDATA[<h5 id="分页删除最后一条返回上一页"><a href="#分页删除最后一条返回上一页" class="headerlink" title="分页删除最后一条返回上一页"></a>分页删除最后一条返回上一页</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> totalPage =<span class="built_in">Math</span>.ceil((<span class="keyword">this</span>.page.total <span class="number">-1</span>)/res.pageSize);</span><br><span class="line"><span class="keyword">this</span>.page.currentPage = <span class="keyword">this</span>.page.currentPage &lt;<span class="number">1</span> ?<span class="number">1</span> :<span class="keyword">this</span>.page.currentPage &gt; totalPage ?totalPage :<span class="keyword">this</span>.page.currentPage</span><br></pre></td></tr></table></figure><h5 id="Git报错处理"><a href="#Git报错处理" class="headerlink" title="Git报错处理"></a>Git报错处理</h5><p><code>OpenSSL SSL_read: Connection was reset, errno 10054</code></p><p>这是服务器的SSL证书没有经过第三方机构的签署，所以报错。</p><p>解决办法：</p><p><code>git config --global http.sslVerify &quot;false&quot;</code></p><p><a href="https://github.com/onlyH/summary" target="_blank" rel="noopener">github链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;分页删除最后一条返回上一页&quot;&gt;&lt;a href=&quot;#分页删除最后一条返回上一页&quot; class=&quot;headerlink&quot; title=&quot;分页删除最后一条返回上一页&quot;&gt;&lt;/a&gt;分页删除最后一条返回上一页&lt;/h5&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; totalPage =&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.ceil((&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.page.total &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)/res.pageSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.page.currentPage = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.page.currentPage &amp;lt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ?&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; :&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.page.currentPage &amp;gt; totalPage ?totalPage :&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.page.currentPage&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Git报错处理&quot;&gt;&lt;a href=&quot;#Git报错处理&quot; class=&quot;headerlink&quot; title=&quot;Git报错处理&quot;&gt;&lt;/a&gt;Git报错处理&lt;/h5&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6系列-类与对象</title>
    <link href="http://onlyH.github.io/2021/03/15/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    <id>http://onlyH.github.io/2021/03/15/类与对象/</id>
    <published>2021-03-15T08:13:37.578Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类与对象</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = 'yoyo') &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> v_person = <span class="keyword">new</span> Person(<span class="string">'v'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(v_person) <span class="comment">//Person &#123;name: "v"&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = 'child') &#123;</span><br><span class="line">            <span class="comment">//  super()会使用父类的所有</span></span><br><span class="line">            <span class="keyword">super</span>(name)</span><br><span class="line">            <span class="keyword">this</span>.type = <span class="string">'dog'</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> Child()) <span class="comment">//Child &#123;name: "child", type: "dog"&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> Child(<span class="string">'hello'</span>)) <span class="comment">//Child &#123;name: "hello", type: "dog"&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// getter,setter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = 'yoy') &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name</span><br><span class="line">        &#125;</span><br><span class="line">        get longName() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">'读取属性'</span></span><br><span class="line">        &#125;</span><br><span class="line">        set longName(value) &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> v = <span class="keyword">new</span> Person()</span><br><span class="line">    <span class="built_in">console</span>.log(v.longName, <span class="string">'getter'</span>)<span class="comment">//yoy读取属性 getter</span></span><br><span class="line">    v.longName = <span class="string">'hello'</span></span><br><span class="line">    <span class="built_in">console</span>.log(v.longName) <span class="comment">//hello读取属性</span></span><br><span class="line">    <span class="keyword">let</span> vs = <span class="keyword">new</span> Person(<span class="string">'lele'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(vs.longName, <span class="string">'setter'</span>) <span class="comment">//lele读取属性 setter</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 静态方法，不是使用类的实例去调用</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = 'yoyo') &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> tail() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'this is tail'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.tail()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 静态属性 ===&gt; 直接在类上定义</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name = 'uouo') &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> tail() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'this is tail'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.numberId = <span class="number">23333</span></span><br><span class="line">    <span class="built_in">console</span>.log(Person.numberId) <span class="comment">//2333</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="js" scheme="http://onlyH.github.io/categories/js/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="学习" scheme="http://onlyH.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>截取字符串最方便的办法</title>
    <link href="http://onlyH.github.io/2021/03/15/%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://onlyH.github.io/2021/03/15/截取字符串/</id>
    <published>2021-03-15T08:13:37.577Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>今日解析YouTube视频，采用了YouTube的iframe。<br>其中有一坑是YouTube不允许输入第三方链接，也就是不解析，解决的办法就是<br><code>http://www.youtube.com/embed/VIDEO_ID</code></p><ul><li><p>例如：<br><code>https://www.youtube.com/watch?v=78tNYZUS-ps</code><br>改为：<br><code>http://www.youtube.com/embed/78tNYZUS-ps</code></p></li><li><p>为了判断输入的URL是否是一个有效的，我们采取了后台解析id的办法，返回title。<br>那么我就需要将用户输入的链接进行截取。试了好几种办法，虽然都能实现，但是觉得麻烦，最终选择了，split()方法，他可以将一个字符串分割成字符串数组。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">url</span> = <span class="string">'https://www.youtube.com/watch?v=78tNYZUS-ps'</span>;</span><br><span class="line"><span class="keyword">let</span> front = <span class="built_in">url</span>.split(<span class="string">'='</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> end = <span class="built_in">url</span>.split(<span class="string">'='</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(front,end) <span class="comment">//https://www.youtube.com/watch?v 78tNYZUS-ps</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日解析YouTube视频，采用了YouTube的iframe。&lt;br&gt;其中有一坑是YouTube不允许输入第三方链接，也就是不解析，解决的办法就是&lt;br&gt;&lt;code&gt;http://www.youtube.com/embed/VIDEO_ID&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
      <category term="js" scheme="http://onlyH.github.io/categories/js/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="学习" scheme="http://onlyH.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>富文本-select改进</title>
    <link href="http://onlyH.github.io/2021/03/15/%E6%94%B9%E8%BF%9B-select/"/>
    <id>http://onlyH.github.io/2021/03/15/改进-select/</id>
    <published>2021-03-15T08:13:37.577Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在项目中，做了一个富文本编辑器，第一次用的是原生js实现，第二次用vue实现功能，在select里面定义可以选择字体的大小，当时采取的是@input去实现，无聊时读了下vue文档，发现其实。。是可以改进的，比如说v-model是一个语法糖，文档是这样说的：</p><ul><li>自定义事件也可以用于创建支持 v-model 的自定义输入组件<br><code>input v-nodel=searchText</code><br>等价于：<figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> v-bind:value=<span class="string">'searchText'</span> v-<span class="keyword">on</span>:<span class="keyword">input</span>=<span class="string">'$event.target.value'</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><p>而我当时的实现就有一些复杂<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;select name=<span class="string">"fontSize"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"fontSize"</span> @change=<span class="string">"showSize($event)"</span>&gt;</span><br><span class="line">    &lt;option :value=<span class="string">"ops.value"</span></span><br><span class="line">            v-<span class="keyword">for</span>=<span class="string">"ops in fontSize"</span></span><br><span class="line">            :selected=<span class="string">"ops.value == 16 ? true: '' "</span>&gt;&#123;&#123;ops.value&#125;&#125;&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>select&gt;</span><br><span class="line"></span><br><span class="line">showSize: <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> execFontSize = <span class="function"><span class="keyword">function</span> (<span class="params">size, unit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> spanString = $(<span class="string">'&lt;span/&gt;'</span>, &#123;</span><br><span class="line">        <span class="string">'text'</span>: <span class="built_in">document</span>.getSelection()</span><br><span class="line">    &#125;).css(</span><br><span class="line">        &#123;<span class="string">'font-size'</span>: size + unit, <span class="string">'color'</span>: <span class="string">`#<span class="subst">$&#123;<span class="keyword">this</span>.designColor&#125;</span>`</span>&#125;).prop(<span class="string">'outerHTML'</span>);</span><br><span class="line">    <span class="built_in">document</span>.execCommand(<span class="string">'insertHTML'</span>, <span class="literal">false</span>, spanString);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> value = ev.target.value;</span><br><span class="line">    execFontSize(value, <span class="string">'px'</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>嗯嗯，改起来~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在项目中，做了一个富文本编辑器，第一次用的是原生js实现，第二次用vue实现功能，在select里面定义可以选择字体的大小，当时采取的是@input去实现，无聊时读了下vue文档，发现其实。。是可以改进的，比如说v-model是一个语法糖，文档是这样说的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义事件也可以用于创建支持 v-model 的自定义输入组件&lt;br&gt;&lt;code&gt;input v-nodel=searchText&lt;/code&gt;&lt;br&gt;等价于：&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt; v-bind:value=&lt;span class=&quot;string&quot;&gt;&#39;searchText&#39;&lt;/span&gt; v-&lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;$event.target.value&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而我当时的实现就有一些复杂&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;select name=&lt;span class=&quot;string&quot;&gt;&quot;fontSize&quot;&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fontSize&quot;&lt;/span&gt; @change=&lt;span class=&quot;string&quot;&gt;&quot;showSize($event)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;option :value=&lt;span class=&quot;string&quot;&gt;&quot;ops.value&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            v-&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ops in fontSize&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            :selected=&lt;span class=&quot;string&quot;&gt;&quot;ops.value == 16 ? true: &#39;&#39; &quot;&lt;/span&gt;&amp;gt;&amp;#123;&amp;#123;ops.value&amp;#125;&amp;#125;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/option&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt; &amp;lt;/&lt;/span&gt;select&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;showSize: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;ev&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; execFontSize = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;size, unit&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; spanString = $(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;span/&amp;gt;&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getSelection()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).css(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;font-size&#39;&lt;/span&gt;: size + unit, &lt;span class=&quot;string&quot;&gt;&#39;color&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;`#&lt;span class=&quot;subst&quot;&gt;$&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.designColor&amp;#125;&lt;/span&gt;`&lt;/span&gt;&amp;#125;).prop(&lt;span class=&quot;string&quot;&gt;&#39;outerHTML&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.execCommand(&lt;span class=&quot;string&quot;&gt;&#39;insertHTML&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, spanString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; value = ev.target.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    execFontSize(value, &lt;span class=&quot;string&quot;&gt;&#39;px&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://onlyH.github.io/categories/vue/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="功能" scheme="http://onlyH.github.io/tags/%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>异步回调处理</title>
    <link href="http://onlyH.github.io/2021/03/15/%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83/"/>
    <id>http://onlyH.github.io/2021/03/15/异步回调/</id>
    <published>2021-03-15T08:13:37.576Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前异步回调总是出现问题，先上一段错误的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">callbacking = <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.callbacking) &#123;</span><br><span class="line">    <span class="keyword">this</span>.callbacking = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.callback()</span><br><span class="line">    <span class="keyword">this</span>.callbacking = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码会走<code>this.callbacking = false</code>但是没有意义，如果callback是同步的，这个if在callback执行期间不再会走第二次，如果是异步的，这样写是不对的。我的callback是异步的。。所以这样写的效果是这样的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.callbacking = <span class="literal">true</span></span><br><span class="line"><span class="keyword">this</span>.callback() <span class="comment">//发起异步请求后callback函数结束（请求未完成）</span></span><br><span class="line"><span class="keyword">this</span>.callbacking = <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>也就是说，callbacking在异步请求没有结束的时候就已经回归到false了，无法起到想要的作用。应该这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.callbacking = <span class="literal">true</span></span><br><span class="line"><span class="keyword">this</span>.callback(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.callbacking = <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>callback接受的函数需要在异步完成后执行。这样才能保证指定代码在异步操作完成后才执行，比如说在<code>this.callbacking = true</code>上锁后，是希望在异步操作结束后才解锁。</p><p>或者使用promise，在.then().then解决</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前异步回调总是出现问题，先上一段错误的代码&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;callbacking = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.callbacking) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.callbacking = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.callback()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.callbacking = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段代码会走&lt;code&gt;this.callbacking = false&lt;/code&gt;但是没有意义，如果callback是同步的，这个if在callback执行期间不再会走第二次，如果是异步的，这样写是不对的。我的callback是异步的。。所以这样写的效果是这样的&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.callbacking = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.callback() &lt;span class=&quot;comment&quot;&gt;//发起异步请求后callback函数结束（请求未完成）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.callbacking = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也就是说，callbacking在异步请求没有结束的时候就已经回归到false了，无法起到想要的作用。应该这样写：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.callbacking = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.callback(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.callbacking = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://onlyH.github.io/categories/js/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="学习" scheme="http://onlyH.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>封装--逐步运动</title>
    <link href="http://onlyH.github.io/2021/03/15/%E5%B0%81%E8%A3%85%E8%BF%90%E5%8A%A81/"/>
    <id>http://onlyH.github.io/2021/03/15/封装运动1/</id>
    <published>2021-03-15T08:13:37.576Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        * &#123;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">            padding: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        div &#123;</span></span><br><span class="line"><span class="regexp">            width: 200px;</span></span><br><span class="line"><span class="regexp">            height: 200px;</span></span><br><span class="line"><span class="regexp">            opacity: .3;</span></span><br><span class="line"><span class="regexp">            background-color: yellow;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;script src=<span class="string">"moveOne.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> tag = $tag(<span class="string">'div'</span>)</span><br><span class="line">        tag.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            starSport(tag, <span class="string">'width'</span>, <span class="number">400</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                starSport(tag, <span class="string">'opacity'</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        tag.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            starSport(tag, <span class="string">'width'</span>, <span class="number">200</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                starSport(tag, <span class="string">'opacity'</span>, <span class="number">30</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//moveOne.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$tag</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取样式属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.currentStyle) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[attr]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(obj, <span class="literal">false</span>)[attr]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运动</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">starSport</span>(<span class="params">obj, attr, target, fn</span>) </span>&#123; <span class="comment">//当前对象，属性，变化对象</span></span><br><span class="line">    obj.timer = <span class="literal">null</span></span><br><span class="line">    clearInterval(obj.timer)</span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> current = <span class="number">0</span></span><br><span class="line">        <span class="comment">//定义当前属性</span></span><br><span class="line">        <span class="keyword">if</span> (attr === <span class="string">'opacity'</span>) &#123;</span><br><span class="line">            current = <span class="built_in">Math</span>.round(<span class="built_in">parseFloat</span>(getStyle(obj, attr) * <span class="number">100</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = <span class="built_in">parseInt</span>(getStyle(obj, attr))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义速度</span></span><br><span class="line">        <span class="keyword">var</span> speed = (target - current) / <span class="number">8</span></span><br><span class="line">        speed = speed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(speed) : <span class="built_in">Math</span>.floor(speed)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果当前值等于目标值</span></span><br><span class="line">        <span class="keyword">if</span> (current === target) &#123;</span><br><span class="line">            <span class="comment">//如果第一次运动停止</span></span><br><span class="line">            clearInterval(obj.timer)</span><br><span class="line">            <span class="keyword">if</span> (fn) &#123;</span><br><span class="line">                fn()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (attr === <span class="string">'opacity'</span>) &#123;</span><br><span class="line">                obj.style[attr] = (current + speed) / <span class="number">100</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                obj.style[attr] = current + speed + <span class="string">'px'</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="js" scheme="http://onlyH.github.io/categories/js/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="封装" scheme="http://onlyH.github.io/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>动态添加属性（set）</title>
    <link href="http://onlyH.github.io/2021/03/15/%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/"/>
    <id>http://onlyH.github.io/2021/03/15/动态添加属性/</id>
    <published>2021-03-15T08:13:37.574Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用vue动态的添加属性，假设从父组件<code>props</code>传来一个数组，要为数组中的每一项添加一个属性，每个属性点击一次就+1，大于2的时候就为0，（0，1，2），添加另一组属性，当为0的时候显示一张图，当为1的时候，显示另一张图片，当为1的时候再换一张图片。当点击某一个按钮，剩余其他的状态要归0，图片显示0的对应的图片。<br>代码实现如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">itemsTrans:&#123;&#125;,</span><br><span class="line">currentSort: <span class="number">0</span>,<span class="comment">//当前排序</span></span><br><span class="line">created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.content.titles.forEach(<span class="function">(<span class="params">i,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$set(<span class="keyword">this</span>.itemsTrans,<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>`</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">this</span>.$set(<span class="keyword">this</span>.itemsTrans,<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>img`</span>,<span class="string">'xxx.png'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">    changeToggle(item,index) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.content.titles.length;i++) &#123; <span class="comment">//返回默认状态</span></span><br><span class="line">            <span class="keyword">if</span>(i !== index) &#123;</span><br><span class="line">                <span class="keyword">this</span>.itemsTrans[<span class="string">`toggle<span class="subst">$&#123;i&#125;</span>`</span>] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">this</span>.itemsTrans[<span class="string">`toggle<span class="subst">$&#123;i&#125;</span>img`</span>] = <span class="string">'xxx.png'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.itemsTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>`</span>] += <span class="number">1</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>`</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.content.currentSort = <span class="number">1</span></span><br><span class="line">                <span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>img`</span>] = <span class="string">'yyy.png'</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>`</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.content.currentSort = <span class="number">2</span></span><br><span class="line">                <span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>img`</span>] = <span class="string">'zzz.png'</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>`</span>] &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>img`</span>] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">this</span>.itemTrans[<span class="string">`toggle<span class="subst">$&#123;index&#125;</span>`</span>] = <span class="string">'xxx.png'</span></span><br><span class="line">                <span class="keyword">this</span>.content.currentSort = <span class="number">0</span></span><br><span class="line">              &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果要做数据加载分页的话一定要先切割，以免出现数据重复。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.content.items.splice(<span class="number">0</span>,<span class="keyword">this</span>.content.items.length)</span><br><span class="line"><span class="keyword">this</span>.content.items.push(...items)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用vue动态的添加属性，假设从父组件&lt;code&gt;props&lt;/code&gt;传来一个数组，要为数组中的每一项添加一个属性，每个属性点击一次就+1，大于2的时候就为0，（0，1，2），添加另一组属性，当为0的时候显示一张图，当为1的时候，显示另一张图片，当为1的时候再换一张图片
      
    
    </summary>
    
      <category term="vue" scheme="http://onlyH.github.io/categories/vue/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="学习" scheme="http://onlyH.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>webpack端口号</title>
    <link href="http://onlyH.github.io/2021/03/15/webpack%E7%AB%AF%E5%8F%A3/"/>
    <id>http://onlyH.github.io/2021/03/15/webpack端口/</id>
    <published>2021-03-15T08:13:37.572Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>今日，修改webpack端口号，遇到了问题<br>本来是在webpack.config.js文件夹里添加了devServer属性<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="attribute">devServer</span>: &#123;</span><br><span class="line">        <span class="attribute">port</span>: <span class="number">2333</span>,</span><br><span class="line">        <span class="attribute">host</span>: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">        <span class="attribute">overlay</span>: &#123;</span><br><span class="line">            <span class="attribute">errors</span>: true</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attribute">hot</span>: true</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">     <span class="attribute">plugins</span>: [</span><br><span class="line">        new webpack.HotModuleReplacementPlugin(),]</span><br><span class="line"><span class="built_in">``</span>`   </span><br><span class="line"><span class="built_in">`webpack-dev-server`</span> 带 <span class="built_in">`hot`</span> 参数的时候，要去掉config里面的 HotModuleReplacementPlugin</span><br><span class="line">不然会内存溢出。</span><br><span class="line">解决办法：删除</span><br></pre></td></tr></table></figure></p><p>plugins: [<br>        new webpack.HotModuleReplacementPlugin()<br>]<br><code>`</code><br>将<br><code>&quot;dev&quot;: &quot;webpack-dev-server --mode development&quot;,</code><br>改为<br><code>&quot;dev&quot;: &quot;webpack-dev-server --hot --inline&quot;,</code><br>启动服务并不能自动刷新，要自动刷新需要用到webpack-dev-server –hot –inline<br>当使用webpack-dev-server –hot –inline命令时，<br>在每次修改文件，是将文件打包<br>　　保存在内存中并没有写在磁盘里(默认是根据webpack.config.js打包文件，通过–config xxxx.js修改)，这种打包得到的文件<br>　　和项目根目录中的index.html位于同一级（你看不到，因为<br>　　它在内存中并没有在磁盘里）。使用webpack命令将打包后的文件保存在磁盘中<br>　　例如在index.html文件中引入通过webpack-dev-server –hot –inline打包的build.js<br><code>&lt;script src=&quot;build.js&quot;&gt;&lt;/script&gt;</code><br>　　在index.html文件中引入通过webpack命令打包的build.js<br><code>&lt;script src=&quot;./build/build.js&quot;&gt;&lt;/script&gt;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日，修改webpack端口号，遇到了问题&lt;br&gt;本来是在webpack.config.js文件夹里添加了devServer属性&lt;br&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
      <category term="js" scheme="http://onlyH.github.io/categories/js/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="学习" scheme="http://onlyH.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>webpack.config.js配置错误问题</title>
    <link href="http://onlyH.github.io/2021/03/15/webpack-babel-core/"/>
    <id>http://onlyH.github.io/2021/03/15/webpack-babel-core/</id>
    <published>2021-03-15T08:13:37.571Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>今日搭建webpack的时候，一直在报错，其中一个问题是<code>Cannot find module &#39;@babel/core&#39;问题</code><br>最初以为是babel-core没有安装上。重装了好几遍babel-core还是不行。对照以前的项目,发现babel-loader的版本不一样,之前的是@7.1.5版本,而现在是@8.0.0版本。</p><ul><li>解决办法：降版本。。。<br><code>npm uninstall babel-loader npm install babel-loader@7.1.5</code></li></ul><h4 id="官方文档说："><a href="#官方文档说：" class="headerlink" title="官方文档说："></a>官方文档说：</h4><h5 id="官方默认babel-loader-babel-对应的版本需要一致-即babel-loader需要搭配最新版本babel"><a href="#官方默认babel-loader-babel-对应的版本需要一致-即babel-loader需要搭配最新版本babel" class="headerlink" title="官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel"></a>官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今日搭建webpack的时候，一直在报错，其中一个问题是&lt;code&gt;Cannot find module &amp;#39;@babel/core&amp;#39;问题&lt;/code&gt;&lt;br&gt;最初以为是babel-core没有安装上。重装了好几遍babel-core还是不行。对照以前的项目,发现babel-loader的版本不一样,之前的是@7.1.5版本,而现在是@8.0.0版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决办法：降版本。。。&lt;br&gt;&lt;code&gt;npm uninstall babel-loader npm install babel-loader@7.1.5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;官方文档说：&quot;&gt;&lt;a href=&quot;#官方文档说：&quot; class=&quot;headerlink&quot; title=&quot;官方文档说：&quot;&gt;&lt;/a&gt;官方文档说：&lt;/h4&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://onlyH.github.io/categories/webpack/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="感悟" scheme="http://onlyH.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>webpack配置</title>
    <link href="http://onlyH.github.io/2021/03/15/webpack/"/>
    <id>http://onlyH.github.io/2021/03/15/webpack/</id>
    <published>2021-03-15T08:13:37.571Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="webpack属性配置"><a href="#webpack属性配置" class="headerlink" title="webpack属性配置"></a>webpack属性配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:&#123;</span><br><span class="line">        <span class="comment">//main默认入口，可以是多入口</span></span><br><span class="line">        main:<span class="string">'./src/main.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//出口</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        filemane:<span class="string">'./build.js'</span>,</span><br><span class="line">        <span class="comment">//指定js文件</span></span><br><span class="line">        path:path.join(__dirname,<span class="string">'..'</span>,<span class="string">'dist'</span>,)</span><br><span class="line">        <span class="comment">//最好是绝对路径，代表当前目录的上一级的dist</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">           <span class="comment">// 一样的功能rules:   webpack2.x之后新加的</span></span><br><span class="line">           loaders:[       <span class="built_in">require</span>(<span class="string">'./a.css||./a.js'</span>)</span><br><span class="line">               &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                loader:<span class="string">'style-loader!css-loader'</span>,</span><br><span class="line">              <span class="comment">//  顺序是反过来的2!1</span></span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                test:<span class="regexp">/\.(jpg|svg)$/</span>,</span><br><span class="line">                loader:<span class="string">'url-loader?limit=4096&amp;name=[name].[ext]'</span>,</span><br><span class="line">               <span class="comment">// 顺序是反过来的2!1 </span></span><br><span class="line">              <span class="comment">//  [name].[ext]内置提供的，因为本身是先读这个文件</span></span><br><span class="line">                options:&#123;</span><br><span class="line">                   limit:<span class="number">4096</span>,</span><br><span class="line">                   name:<span class="string">'[name].[ext]'</span></span><br><span class="line">                &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="comment">//  插件的执行顺序是依次执行的</span></span><br><span class="line">           <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">               template:<span class="string">'./src/index.html'</span>,</span><br><span class="line">               &#125;)</span><br><span class="line">               <span class="comment">//将src下的template属性描述的文件根据当前配置的output.path，将文件移动到该目录</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webpack-es6"><a href="#webpack-es6" class="headerlink" title="webpack-es6"></a>webpack-es6</h4><ul><li>vue默认支持es6的模块导入导出</li><li>babel–&gt;babel-core</li></ul><h4 id="es6模块"><a href="#es6模块" class="headerlink" title="es6模块"></a>es6模块</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//default</span></span><br><span class="line"><span class="keyword">import</span> [,...xxx] [,..form] <span class="string">'./xxx.ext'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> obj = xxx</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> obj2 = &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;stu&#125;<span class="comment">//单独导出</span></span><br><span class="line"><span class="keyword">import</span> &#123;obj,obj2,stu&#125; form <span class="string">'./xxx.js'</span>    <span class="comment">//直接使用obj</span></span><br></pre></td></tr></table></figure><ul><li><p>默认导出和声明式导入在使用上的区别</p><ul><li>声明式导入的时候，必须{名称} 名称要一致（按需导入)</li><li>默认导入，可以随意的使用变量名</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">default</span>:<span class="string">"我是默认导出的结果"</span>    </span><br><span class="line">        <span class="keyword">import</span> xxx <span class="keyword">from</span> <span class="string">'./cal.js'</span>会获取到整个对象的<span class="keyword">default</span>属性</span><br><span class="line">obj1:<span class="string">"我是声明式导出1"</span></span><br><span class="line">obj2:<span class="string">"我是声明式导出2"</span> </span><br><span class="line">obj3:<span class="string">"我是声明式导出3"</span>     <span class="keyword">import</span> &#123;obj1,obj2&#125;</span><br><span class="line">obj4:<span class="string">"我是声明式导出4"</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> allObj <span class="keyword">from</span> <span class="string">'./cal.js'</span>;  获取的就是一整个对象</span><br></pre></td></tr></table></figure></li><li><p>import 和export一定写在顶级，不要包含在{}内</p></li></ul><ul><li>build：打包配置所在的文件夹</li><li>打包的配置</li><li>开发项目的源码</li><li>App.vue入口组件(.vue都是一个组件)</li><li>main.js项目入口的文件</li><li>static：静态资源</li><li><p>webpack.base.conf.js 打包核心的配置与config-&gt;index.js可以合并成为一个</p></li><li><p>build.js打生产包</p></li></ul><ul><li>package.json</li></ul><ol><li>项目描述</li><li>dependencies：依赖库</li><li>devDependencied：开发依赖库</li><li>engines： 引擎</li><li>browserslist：浏览器列表</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;webpack属性配置&quot;&gt;&lt;a href=&quot;#webpack属性配置&quot; class=&quot;headerlink&quot; title=&quot;webpack属性配置&quot;&gt;&lt;/a&gt;webpack属性配置&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    entry:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//main默认入口，可以是多入口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        main:&lt;span class=&quot;string&quot;&gt;&#39;./src/main.js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//出口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    output:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        filemane:&lt;span class=&quot;string&quot;&gt;&#39;./build.js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//指定js文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        path:path.join(__dirname,&lt;span class=&quot;string&quot;&gt;&#39;..&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;dist&#39;&lt;/span&gt;,)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//最好是绝对路径，代表当前目录的上一级的dist&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;comment&quot;&gt;// 一样的功能rules:   webpack2.x之后新加的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           loaders:[       &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./a.css||./a.js&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#123;&lt;span class=&quot;attr&quot;&gt;test&lt;/span&gt;:&lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loader:&lt;span class=&quot;string&quot;&gt;&#39;style-loader!css-loader&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//  顺序是反过来的2!1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                test:&lt;span class=&quot;regexp&quot;&gt;/\.(jpg|svg)$/&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                loader:&lt;span class=&quot;string&quot;&gt;&#39;url-loader?limit=4096&amp;amp;name=[name].[ext]&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;comment&quot;&gt;// 顺序是反过来的2!1 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//  [name].[ext]内置提供的，因为本身是先读这个文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                options:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   limit:&lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   name:&lt;span class=&quot;string&quot;&gt;&#39;[name].[ext]&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plugins:[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  插件的执行顺序是依次执行的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; htmlWebpackPlugin(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               template:&lt;span class=&quot;string&quot;&gt;&#39;./src/index.html&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;comment&quot;&gt;//将src下的template属性描述的文件根据当前配置的output.path，将文件移动到该目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;webpack-es6&quot;&gt;&lt;a href=&quot;#webpack-es6&quot; class=&quot;headerlink&quot; title=&quot;webpack-es6&quot;&gt;&lt;/a&gt;webpack-es6&lt;/h4&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://onlyH.github.io/categories/webpack/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="感悟" scheme="http://onlyH.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>rgb转化为16进制</title>
    <link href="http://onlyH.github.io/2021/03/15/rgb%E8%BD%AC%E4%B8%BA16%E8%BF%9B%E5%88%B6/"/>
    <id>http://onlyH.github.io/2021/03/15/rgb转为16进制/</id>
    <published>2021-03-15T08:13:37.566Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中有个需求是写一个颜色选择器，默认有16个色块可以点击，用户也可以自己输入6位16进制字符，然后动态的给显示用户所输入的颜色。<br>我采用的是vue的<code>:class</code>和<code>:style</code>去完成这个需求。<br>做完之后，发现一个很尴尬的问题，如果我在输入框输入过值，那么他一定会覆盖clss的样式，也就是说，即使我点击色块，颜色也不会出现，于是想到一个解决办法，就是当我点击色块的时候，将色块的颜色值显示到输入框中。<br>那么。如何获取到class中的css样式呢？？<br>我采用了jquery的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var color = $(`.$&#123;item.color&#125;`).css(<span class="string">'backgroundColor'</span>) <span class="comment">//获取到颜色值</span></span><br></pre></td></tr></table></figure></p><p>额。。。获取到的竟然是个rgb()…….转换起来<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var rgb = a.split(<span class="string">','</span>);  <span class="comment">//将三个数值获取出</span></span><br><span class="line">var r = parseInt(rgb[<span class="number">0</span>].split(<span class="string">'('</span>)[<span class="number">1</span>]);<span class="comment">//第一个值</span></span><br><span class="line">var g = parseInt(rgb[<span class="number">1</span>]);<span class="comment">//第二个值</span></span><br><span class="line">var b = parseInt(rgb[<span class="number">2</span>].split(<span class="string">')'</span>)[<span class="number">0</span>]);<span class="comment">//第三个值</span></span><br><span class="line">var hex = <span class="string">"#"</span> + ((<span class="number">1</span> &lt;&lt; <span class="number">24</span>) + (r &lt;&lt; <span class="number">16</span>) + (g &lt;&lt; <span class="number">8</span>) + b).toString(<span class="number">16</span>).slice(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>原谅我没有把他封装起来。。。。。<br>最后的<code>hex</code>就是rgb转换后的结果，也就是一个十六进制的色值。<br>呼呼~~一定有比这个更简单的方法吧，思考中。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中有个需求是写一个颜色选择器，默认有16个色块可以点击，用户也可以自己输入6位16进制字符，然后动态的给显示用户所输入的颜色。&lt;br&gt;我采用的是vue的&lt;code&gt;:class&lt;/code&gt;和&lt;code&gt;:style&lt;/code&gt;去完成这个需求。&lt;br&gt;做完之后，发现一个很尴尬的问题，如果我在输入框输入过值，那么他一定会覆盖clss的样式，也就是说，即使我点击色块，颜色也不会出现，于是想到一个解决办法，就是当我点击色块的时候，将色块的颜色值显示到输入框中。&lt;br&gt;那么。如何获取到class中的css样式呢？？&lt;br&gt;我采用了jquery的方法&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var color = $(`.$&amp;#123;item.color&amp;#125;`).css(&lt;span class=&quot;string&quot;&gt;&#39;backgroundColor&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//获取到颜色值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;额。。。获取到的竟然是个rgb()…….转换起来&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var rgb = a.split(&lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//将三个数值获取出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var r = parseInt(rgb[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].split(&lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;span class=&quot;comment&quot;&gt;//第一个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var g = parseInt(rgb[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;span class=&quot;comment&quot;&gt;//第二个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var b = parseInt(rgb[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;].split(&lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;span class=&quot;comment&quot;&gt;//第三个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var hex = &lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; + ((&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;) + (r &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) + (g &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;) + b).toString(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;).slice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;原谅我没有把他封装起来。。。。。&lt;br&gt;最后的&lt;code&gt;hex&lt;/code&gt;就是rgb转换后的结果，也就是一个十六进制的色值。&lt;br&gt;呼呼~~一定有比这个更简单的方法吧，思考中。。。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://onlyH.github.io/categories/js/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="学习" scheme="http://onlyH.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ES6系列-promise</title>
    <link href="http://onlyH.github.io/2021/03/15/promise/"/>
    <id>http://onlyH.github.io/2021/03/15/promise/</id>
    <published>2021-03-15T08:13:37.565Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//传统es5回调方式解决异步</span></span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'等待下一步加载。。。'</span>)</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            callback &amp;&amp; callback.call()</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ajax(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'来了来了'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//执行a-b-c-d-e-f....</span></span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'等待setTimeOut2加载'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  <span class="comment">//执行，中断</span></span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ajax().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise'</span>, <span class="string">'setTimeOut2'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'等待第一次加载'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ajax().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'等待第二次'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'我是第三次加载'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;, <span class="number">3000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'最后一次加载'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果中间出现错误，如何捕获</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'判断num'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'传错了'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ajax(<span class="number">6</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'log'</span>, <span class="number">6</span>)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'catch'</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">    ajax(<span class="number">2</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'log'</span>, <span class="number">2</span>)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'catch'</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用场景promise.all,promise</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 所有图都加载后显示到页面</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">            img.src = src</span><br><span class="line">            img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(img)</span><br><span class="line">            &#125;</span><br><span class="line">            img.onerror = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//图片加载完成onload</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加到页面</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImg</span>(<span class="params">imgs</span>) </span>&#123;</span><br><span class="line">        imgs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(item)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// promise.all把多个promise实例当成一个promise实例</span></span><br><span class="line">    <span class="built_in">Promise</span>.all([</span><br><span class="line">        loadImg(<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=219db669df4a813bcca53e582da7582e&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130531_wXcaQ.thumb.700_0.jpeg'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=2c20d892a361fa4313ae380600c434b8&amp;imgtype=0&amp;src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn%2Fw440h329%2F20171229%2Fbe5c-fypyuve2937030.jpg'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426663&amp;di=1ce727cefe866cd3baa0bcdc64dd8cb7&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130914_CrVz5.jpeg'</span>)</span><br><span class="line">    ]).then(showImg)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//先到先得,有一本图片加载完就加载到页面</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">            img.src = src</span><br><span class="line">            img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(img)</span><br><span class="line">            &#125;</span><br><span class="line">            img.onerror = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImg</span>(<span class="params">imgs</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(imgs)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Promise</span>.race([</span><br><span class="line">        loadImg(<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=219db669df4a813bcca53e582da7582e&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130531_wXcaQ.thumb.700_0.jpeg'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426664&amp;di=2c20d892a361fa4313ae380600c434b8&amp;imgtype=0&amp;src=http%3A%2F%2Fn.sinaimg.cn%2Fsinacn%2Fw440h329%2F20171229%2Fbe5c-fypyuve2937030.jpg'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545736426663&amp;di=1ce727cefe866cd3baa0bcdc64dd8cb7&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201706%2F12%2F20170612130914_CrVz5.jpeg'</span>)</span><br><span class="line">    ]).then(showImg)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="js" scheme="http://onlyH.github.io/categories/js/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="学习" scheme="http://onlyH.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ES6系列-模块化</title>
    <link href="http://onlyH.github.io/2021/03/15/module/"/>
    <id>http://onlyH.github.io/2021/03/15/module/</id>
    <published>2021-03-15T08:13:37.565Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> A = <span class="number">123</span>; <span class="comment">//导出一个变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    test() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'class'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;A,test,Hello&#125; <span class="keyword">from</span> <span class="string">'./index'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> lesson <span class="keyword">from</span> <span class="string">'./index'</span></span><br><span class="line"><span class="built_in">console</span>.log(lesson.A)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> A = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'test'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">        test() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">        A,</span><br><span class="line">        test,</span><br><span class="line">        Hello</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> 任意变量名 <span class="keyword">from</span> <span class="string">'./index'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="js" scheme="http://onlyH.github.io/categories/js/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="学习" scheme="http://onlyH.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>js条件语句</title>
    <link href="http://onlyH.github.io/2021/03/15/js%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>http://onlyH.github.io/2021/03/15/js条件语句/</id>
    <published>2021-03-15T08:13:37.564Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用Array-includes来处理多重条件"><a href="#使用Array-includes来处理多重条件" class="headerlink" title="使用Array.includes来处理多重条件"></a>使用Array.includes来处理多重条件</h4><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">Array.includes</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fn === <span class="string">'apply'</span> || fn == <span class="string">'pear'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'yes'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果筛选条件多</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fruits = [<span class="string">'apply'</span>,<span class="string">'pear'</span>,<span class="string">'banana'</span>] <span class="comment">//条件提取到数组</span></span><br><span class="line">    <span class="keyword">if</span>(fruits.includes(param)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'yes'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>少写嵌套，尽早返回<ul><li>如果没有水果，抛出错误</li><li>如果该水果的数量大于10，将其打印出来<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">param, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fruit = [<span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'cherry'</span>]</span><br><span class="line">      <span class="comment">// 条件 1：fruit 必须有值</span></span><br><span class="line">    <span class="keyword">if</span> (param) &#123;</span><br><span class="line">            <span class="comment">// 条件 2：必须存在</span></span><br><span class="line">        <span class="keyword">if</span> (fruit.includes(param)) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'red'</span>)</span><br><span class="line">        <span class="comment">//数量大于 10</span></span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'more'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'no frulte'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// 报错：No fruits</span></span><br><span class="line">test(<span class="string">'apple'</span>); <span class="comment">//red</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">20</span>) <span class="comment">//red</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">p,num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fruits = [<span class="string">'apply'</span>,<span class="string">'pear'</span>]</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'no'</span>)</span><br><span class="line">    <span class="keyword">if</span>(fruits.includes(p)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'yes'</span>)</span><br><span class="line">        <span class="keyword">if</span>(num&gt;<span class="number">10</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'good'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">p,num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fruits = [<span class="string">'apply'</span>,<span class="string">'pear'</span>,<span class="string">'chreey'</span>]</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'no'</span>)</span><br><span class="line">    <span class="keyword">if</span>(!fruits.includes(p)) <span class="keyword">return</span>  <span class="comment">//不是直接返回</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>)</span><br><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">10</span>) <span class="built_in">console</span>.log(<span class="string">'good'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="使用函数默认参数和解构"><a href="#使用函数默认参数和解构" class="headerlink" title="使用函数默认参数和解构"></a>使用函数默认参数和解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit,num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!fruit) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> q = num || <span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`we have <span class="subst">$&#123;q&#125;</span> <span class="subst">$&#123;fruit&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="string">'banana'</span>); <span class="comment">// We have 1 banana!</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">2</span>); <span class="comment">// We have 2 apple!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit,num = <span class="number">1</span></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(!fruit) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`we have <span class="subst">$&#123;fruit&#125;</span> <span class="subst">$&#123;num&#125;</span>`</span>)</span><br><span class="line"> &#125;  </span><br><span class="line"><span class="comment">//如果fruit是一个对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(fruit &amp;&amp; fruit.name) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(fruit.name)</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'unknow'</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">undefined</span>); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; &#125;); <span class="comment">// unknown</span></span><br><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;); <span class="comment">// apple</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过默认参数和解构赋值的方法来避免写出 fruit &amp;&amp; fruit.name 这种条件。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">&#123;name&#125; =&#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name || <span class="string">'unknow'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解构只适用于对象（Object）</span></span><br></pre></td></tr></table></figure><h4 id="相较于-switch，Map-Object-也许是更好的选择"><a href="#相较于-switch，Map-Object-也许是更好的选择" class="headerlink" title="相较于 switch，Map / Object 也许是更好的选择"></a>相较于 switch，Map / Object 也许是更好的选择</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(color) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'red'</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>];</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'yellow'</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>];</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'purple'</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'grape'</span>, <span class="string">'plum'</span>];</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// []</span></span><br><span class="line">test(<span class="string">'yellow'</span>); <span class="comment">// ['banana', 'pineapple']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fruit = &#123;</span><br><span class="line">    red: [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>],</span><br><span class="line">    yellow: [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>],</span><br><span class="line">    purple: [<span class="string">'grape'</span>, <span class="string">'plum'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fruit[color] || []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="keyword">const</span> fruit = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">.set(<span class="string">'red'</span>, [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>])</span><br><span class="line">.set(<span class="string">'yellow'</span>, [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>])</span><br><span class="line">.set(<span class="string">'purple'</span>, [<span class="string">'grape'</span>, <span class="string">'plum'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fruit[color] || []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Array.filter</span></span><br><span class="line"><span class="keyword">const</span> fruit = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'strawberry'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'pineapple'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'plum'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fruit.filter(<span class="function"><span class="params">f</span> =&gt;</span>f.color = color)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="使用-Array-every-和-Array-some-来处理全部-部分满足条件"><a href="#使用-Array-every-和-Array-some-来处理全部-部分满足条件" class="headerlink" title="使用 Array.every 和 Array.some 来处理全部/部分满足条件"></a>使用 Array.every 和 Array.some 来处理全部/部分满足条件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits =[</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">let</span> isAll = <span class="literal">true</span></span><br><span class="line">    <span class="comment">//所有水果都必须是红色</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> f <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isAll) <span class="keyword">break</span></span><br><span class="line">        isAll = (f.color ==<span class="string">'red'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(isAll) <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Array.every</span></span><br><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//所有水果必须都是红色</span></span><br><span class="line">    <span class="keyword">const</span> isAll = fruits.every(<span class="function"><span class="params">f</span> =&gt;</span>f.color ==<span class="string">'red'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(isAll) <span class="comment">//false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Array.some</span></span><br><span class="line">  <span class="keyword">const</span> fruits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">color</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'grape'</span>, <span class="attr">color</span>: <span class="string">'purple'</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//至少一个水果是红色</span></span><br><span class="line">    <span class="keyword">const</span> isAll = fruits.some(<span class="function"><span class="params">f</span> =&gt;</span>f.color==<span class="string">'red'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(isAll) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;使用Array-includes来处理多重条件&quot;&gt;&lt;a href=&quot;#使用Array-includes来处理多重条件&quot; class=&quot;headerlink&quot; title=&quot;使用Array.includes来处理多重条件&quot;&gt;&lt;/a&gt;使用Array.includes来处理多重条件&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Array.includes&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fn === &lt;span class=&quot;string&quot;&gt;&#39;apply&#39;&lt;/span&gt; || fn == &lt;span class=&quot;string&quot;&gt;&#39;pear&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;yes&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//如果筛选条件多&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;param&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fruits = [&lt;span class=&quot;string&quot;&gt;&#39;apply&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;pear&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;banana&#39;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;//条件提取到数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fruits.includes(param)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;yes&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="js" scheme="http://onlyH.github.io/categories/js/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="感悟" scheme="http://onlyH.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>js日常使用</title>
    <link href="http://onlyH.github.io/2021/03/15/js%E6%97%A5%E5%B8%B8/"/>
    <id>http://onlyH.github.io/2021/03/15/js日常/</id>
    <published>2021-03-15T08:13:37.563Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">'purple haze'</span></span><br><span class="line">text[<span class="string">'length'</span>]</span><br><span class="line">text.length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象所扮演的主要角色实际上是一个属性的集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">    color:<span class="string">'gray'</span>,</span><br><span class="line">    name:<span class="string">'spot'</span>,</span><br><span class="line">    size:<span class="number">46</span></span><br><span class="line">&#125;</span><br><span class="line">cat.size; <span class="comment">//46</span></span><br><span class="line"><span class="keyword">delete</span> cat.size;</span><br><span class="line">cat.size;<span class="comment">//undefind</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> empty = &#123;&#125;</span><br><span class="line">empty.notReally = <span class="number">1000</span></span><br><span class="line">empty;<span class="comment">//&#123;notReally: 1000&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thing = &#123;</span><br><span class="line">    <span class="string">'gabba'</span>:<span class="string">'hey'</span>,</span><br><span class="line">    <span class="number">5</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">thing[<span class="string">'5'</span>] <span class="comment">//10</span></span><br><span class="line">thing[<span class="number">2</span>+<span class="number">3</span>] <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//中括号会将表达式转化为字符串来判断是否有该属性的名称。</span></span><br><span class="line"><span class="comment">//也可以把变量当成属性名称</span></span><br><span class="line"><span class="keyword">var</span> propertyName = <span class="string">'length'</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'coco'</span></span><br><span class="line">text[propertyName] <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//操作符in可以用来判断一个对象是否有某个属性，产生的是布尔值</span></span><br><span class="line"><span class="keyword">var</span> chineseBox = &#123;&#125;</span><br><span class="line">chineseBox.content = chineseBox;</span><br><span class="line"><span class="string">'content'</span> <span class="keyword">in</span> chineseBox <span class="comment">//true</span></span><br><span class="line"><span class="keyword">debugger</span></span><br><span class="line"><span class="string">'content'</span> <span class="keyword">in</span> chineseBox.content<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象即集合</span></span><br><span class="line"><span class="keyword">var</span> set = &#123;<span class="string">'spot'</span>:<span class="literal">true</span>&#125;</span><br><span class="line">set[<span class="string">'white'</span>] =<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> set[<span class="string">'spot'</span>]</span><br><span class="line"><span class="string">'aa'</span> <span class="keyword">in</span> set;<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//相同对象的两个引用和包含相同属性的两个不同对象是有区别的。</span></span><br><span class="line"><span class="keyword">var</span> object1 = &#123;<span class="attr">value</span>:<span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">var</span> object2 = object1</span><br><span class="line"><span class="keyword">var</span> object3 = &#123;<span class="attr">value</span>:<span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line">object1 == object2 <span class="comment">//true</span></span><br><span class="line">object1 == object3 <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">object1和object2是两个变量，抓取的是相同的值，这里只有一个实际对象，</span></span><br><span class="line"><span class="comment">因此修改了object1的值，同时也改变了object2的值，</span></span><br><span class="line"><span class="comment">object3指向的是另外一个对象，默认和object1有相同的属性，但各自单独运行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">比较对象时，js中的==操作符只有在赋予的两个值都完全相同时才能返回true，</span></span><br><span class="line"><span class="comment">比较两个内容相同的不同对象将返回false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象即集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'lele'</span>,<span class="string">'tom'</span>,<span class="string">'jack'</span>,<span class="string">'shuan'</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`name:<span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;=item; i++) &#123;</span><br><span class="line">        arr.push(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line">range(<span class="number">4</span>) <span class="comment">//01234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// split()将一个字符串分解成一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> words = <span class="string">'this is word'</span></span><br><span class="line">words.split(<span class="string">' '</span>) <span class="comment">//空格！！！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  如何测试一个段落是否以某个特定单词开头</span></span><br><span class="line"><span class="comment">// charAt()---&gt;用于从某个字符串中获取指定的字符</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="string">'born 15-11-2003'</span></span><br><span class="line">cat.charAt(<span class="number">0</span>) ==<span class="string">'b'</span> &amp;&amp; cat.charAt(<span class="number">1</span>) == <span class="string">'o'</span> &amp;&amp; cat.charAt(<span class="number">2</span>) ==<span class="string">'r'</span> &amp;&amp; cat.charAt(<span class="number">3</span>) == <span class="string">'n'</span><span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat.slice(<span class="number">0</span>,<span class="number">4</span>) ==<span class="string">'born'</span><span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startsWidth</span>(<span class="params">str,comp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.slice(<span class="number">0</span>,comp.length) == comp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果指定的位置没有字符，charAt将返回空字符，而slice则只是将不存在的内容忽略掉。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//indexOf可以找出字符串第一次出现的位置或者截取字符串中的子串</span></span><br><span class="line"><span class="comment">//如果slice只是一个参数，他将返回从指定位置一直到字符串结束位置之间的字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">catName</span>(<span class="params">paragraph</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> colon = paragraph.indexOf(<span class="string">":"</span>);</span><br><span class="line">    <span class="keyword">return</span> paragraph.slice(colon+<span class="number">2</span>).split(<span class="string">", "</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="js" scheme="http://onlyH.github.io/categories/js/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="学习" scheme="http://onlyH.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ES6系列-Iterator与for of</title>
    <link href="http://onlyH.github.io/2021/03/15/Iterator-forOf/"/>
    <id>http://onlyH.github.io/2021/03/15/Iterator-forOf/</id>
    <published>2021-03-15T08:13:37.561Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">什么是Iterator接口</span></span><br><span class="line"><span class="comment">Iterator的基本用法</span></span><br><span class="line"><span class="comment">for...of </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line">    <span class="keyword">let</span> map = arr[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line">    <span class="built_in">console</span>.log(map.next())</span><br><span class="line">    <span class="built_in">console</span>.log(map.next())</span><br><span class="line">    <span class="built_in">console</span>.log(map.next())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;value: "hello", done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: "world", done: false&#125;</span></span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for..of循环Iterator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        start:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        end:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">        [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">            <span class="keyword">let</span> that = <span class="keyword">this</span></span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">            <span class="keyword">let</span> arr = that.start.concat(that.end)</span><br><span class="line">            <span class="keyword">let</span> len = arr.length</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                next() &#123;</span><br><span class="line">                 <span class="keyword">if</span>(index &lt;len) &#123;</span><br><span class="line">                     <span class="keyword">return</span> &#123;</span><br><span class="line">                         value:arr[index++],</span><br><span class="line">                         done:<span class="literal">false</span></span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                     <span class="keyword">return</span> &#123;</span><br><span class="line">                         value:arr[index++],</span><br><span class="line">                         done:<span class="literal">true</span></span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> obj) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(key)</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="comment">// 4</span></span><br><span class="line">    <span class="comment">// 5</span></span><br><span class="line">    <span class="comment">// 6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">'hello'</span>,<span class="string">'world'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// hello</span></span><br><span class="line">   <span class="comment">// world</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="js" scheme="http://onlyH.github.io/categories/js/"/>
    
    
      <category term="编程" scheme="http://onlyH.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="学习" scheme="http://onlyH.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>html组件</title>
    <link href="http://onlyH.github.io/2021/03/15/html%E7%BB%84%E4%BB%B6/"/>
    <id>http://onlyH.github.io/2021/03/15/html组件/</id>
    <published>2021-03-15T08:13:37.560Z</published>
    <updated>2019-07-28T07:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今日读了掘金上面的一篇文章，讲的是html组件。"><a href="#今日读了掘金上面的一篇文章，讲的是html组件。" class="headerlink" title="今日读了掘金上面的一篇文章，讲的是html组件。"></a>今日读了掘金上面的一篇文章，讲的是html组件。</h1><h4 id="四大-Web-组件标准"><a href="#四大-Web-组件标准" class="headerlink" title="四大 Web 组件标准"></a>四大 Web 组件标准</h4><p>四大 Web 组件标准分别为：HTML Template、Shadow DOM、Custom Elements 和 HTML Imports。实际上其中一个已经被废弃了，所以变成“三大”了。</p><p>HTML Template,简单的讲也就是 HTML5 中的<code>&lt;template&gt;</code> 标签，正常情况下它无色无味，感知不到它的存在，甚至它下面的 img 都不会被下载，script 都不会被执行。<template> 就如它的名字一样，它只是一个模版，只有到你用到它时，它才会变得有意义。</template></p><p>Shadow DOM 则是原生组件封装的基本工具，它可以实现组件与组件之间的独立性。<br>Custom Elements 是用来包装原生组件的容器，通过它，你就只需要写一个标签，就能得到一个完整的组件。</p><p>HTML Imports 则是 HTML 中类似于 ES6 Module 的一个东西，你可以直接 import 另一个 html 文件，然后使用其中的 DOM 节点。但是，由于 HTML Imports 和 ES6 Module 实在是太像了，并且除了 Chrome 以外没有浏览器愿意实现它，所以它已经被废弃并不推荐使用了。未来会使用 ES6 Module 来取代它，但是现在貌似还没有取代的方案，在新版的 Chrome 中这个功能已经被删除了，并且在使用的时候会在 Console 中给出警告。警告中说使用 ES Modules 来取代，但是我测试在 Chrome 71 中 ES Module 会强制检测文件的 MIME 类型必须为 JavaScript 类型，应该是暂时还没有实现支持。</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/18/16684f2ad0409535?imageslim" alt=""></p><h5 id="Shadow-DOM"><a href="#Shadow-DOM" class="headerlink" title="Shadow DOM"></a>Shadow DOM</h5><p>DOM，在 HTML 中作为一个最基础的骨架而存在，它是一个树结构，树上的每一个节点都是 HTML 中的一部分。DOM 作为一棵树，它拥有着上下级的层级关系，我们通常使用“父节点”、“子节点”、“兄弟节点”等来进行描述（当然有人觉得这些称谓强调性别，所以也创造了一些性别无关的称谓）。子节点在一定程度上会继承父节点的一些东西，也会因兄弟节点而产生一定的影响，比较明显的是在应用 CSS Style 的时候，子节点会从父节点那里继承一些样式。</p><p>而 Shadow DOM，也是 DOM 的一种，所以它也是一颗树，只不过它是长在 DOM 树上的一棵特殊的子树。</p><p>Shadow DOM 的特别之处就在于它致力于创建一个相对独立的一个空间，虽然也是长在 DOM 树上的，但是它的环境却是与外界隔离的，当然这个隔离是相对的，在这个隔离空间中，你可以选择性地从 DOM 树上的父节点继承一些属性，甚至是继承一棵 DOM 树进来。<br>利用 Shadow DOM 的隔离性，我们就可以创造原生的 HTML 组件了。<br>实际上，浏览器已经通过 Shadow DOM 实现了一些组件了，只是我们使用过却没有察觉而已，这也是 Shadow DOM 封装的组件的魅力所在：你只管写一个 HTML 标签，其他的交给我。（是不是有点像 React 的 JSX 啊？）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">src</span>=<span class="string">"./video.mp4"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/10/18/16684f31a0ba2ada?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/10/18/16684f3402275323?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><blockquote><p>注：浏览器默认隐藏自身的 Shadow DOM 实现，但如果是用户通过脚本创造的 Shadow DOM，是不会被隐藏的。<br><img src="https://user-gold-cdn.xitu.io/2018/10/18/16684f3694275a9b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""><br>shadow DOM 中的节点大多都有 pseudo 属性，根据这个属性，你就可以在外面编写 CSS 样式来控制对应的节点样式了。比如，将上面这个<br>pseudo=”-webkit-media-controls-overlay-play-button” 的 input 按钮的背景色改为橙色：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">video</span><span class="selector-pseudo">::-webkit-media-controls-overlay-play-button</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/10/18/16684f3b4eabacd8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>由于 Shadow DOM 实际上也是 DOM 的一种，所以在 Shadow DOM 中还可以继续嵌套 Shadow DOM，就像上面那样。</p><p>浏览器中还有很多 Element 都使用了 Shadow DOM 的形式进行封装，比如 <code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;audio&gt;</code> 等，这里就不一一展示了。<br>由于 Shadow DOM 的隔离性，所以即便是你在外面写了个样式：<code>div { background-color: red !important; }</code>，Shadow DOM 内部的 div 也不会受到任何影响。</p><p>也就是说，写样式的时候，该用 id 的时候就用 id，该用 class 的时候就用 class，一个按钮的 class 应该写成 .button 就写成 .button。完全不用考虑当前组件中的 id、class 可能会与其他组件冲突，你只要确保一个组件内部不冲突就好——这很容易做到。</p><p>这解决了现在绝大多数的组件化框架都面临的问题：Element 的 class(className) 到底怎么写？用前缀命名空间的形式会导致 class 名太长，像这样：<code>.header-nav-list-sublist-button-icon</code>；而使用一些 CSS-in-JS 工具，可以创造一些唯一的 class 名称，像这样：<code>.Nav__welcomeWrapper___lKXTg</code>，这样的名称仍旧有点长，还带了冗余信息。</p><h5 id="ShadowRoot"><a href="#ShadowRoot" class="headerlink" title="ShadowRoot"></a>ShadowRoot</h5><p>ShadowRoot 是 Shadow DOM 下面的根，你可以把它当做 DOM 中的 <body> 一样看待，但是它不是 <body>，所以你不能使用 <body> 上的一些属性，甚至它不是一个节点。</body></body></body></p><p>你可以通过 ShadowRoot 下面的 appendChild、querySelectorAll 之类的属性或方法去操作整个 Shadow DOM 树。</p><p>对于一个普通的 Element，比如 <code>&lt;div&gt;</code>，你可以通过调用它上面的 attachShadow 方法来创建一个 ShadowRoot（还有一个 createShadowRoot 方法，已经过时不推荐使用），attachShadow 接受一个对象进行初始化：<code>{ mode: &#39;open&#39; }</code>，这个对象有一个 mode 属性，它有两个取值：’open’ 和 ‘closed’，这个属性是在创造 ShadowRoot 的时候需要初始化提供的，并在创建 ShadowRoot 之后成为一个只读属性。<br>mode: ‘open’ 和 mode: ‘closed’ 有什么区别呢？在调用 attachShadow 创建 ShadowRoot 之后，attachShdow 方法会返回 ShadowRoot 对象实例，你可以通过这个返回值去构造整个 Shadow DOM。当 mode 为 ‘open’ 时，在用于创建 ShadowRoot 的外部普通节点（比如<code>&lt;div&gt;</code>）上，会有一个 shadowRoot 属性，这个属性也就是创造出来的那个 ShadowRoot，也就是说，在创建 ShadowRoot 之后，还是可以在任何地方通过这个属性再得到 ShadowRoot，继续对其进行改造；而当 mode 为 ‘closed’ 时，你将不能再得到这个属性，这个属性会被设置为 null，也就是说，你只能在 attachShadow 之后得到 ShadowRoot 对象，用于构造整个 Shadow DOM，一旦你失去对这个对象的引用，你就无法再对 Shadow DOM 进行改造了。</p><p>可以从上面 Shadow DOM 的截图中看到 #shadow-root (user-agent) 的字样，这就是 ShadowRoot 对象了，而括号中的 user-agent 表示这是浏览器内部实现的 Shadow DOM，如果使用通过脚本自己创建的 ShadowRoot，括号中会显示为 open 或 closed 表示 Shadow DOM 的 mode。</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/18/16684f3f3702ee88?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><blockquote><p>浏览器内部实现的 user-agent 的 mode 为 closed，所以你不能通过节点的 ShadowRoot 属性去获得其 ShadowRoot 对象，也就意味着你不能通过脚本对这些浏览器内部实现的 Shadow DOM 进行改造。</p></blockquote><p><a href="https://juejin.im/post/5bc7ead7f265da0afc2c2c6b" target="_blank" rel="noopener">链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今日读了掘金上面的一篇文章，讲的是html组件。&quot;&gt;&lt;a href=&quot;#今日读了掘金上面的一篇文章，讲的是html组件。&quot; class=&quot;headerlink&quot; title=&quot;今日读了掘金上面的一篇文章，讲的是html组件。&quot;&gt;&lt;/a&gt;今日读了掘金上面的一篇文章，讲的是html组件。&lt;/h1&gt;&lt;h4 id=&quot;四大-Web-组件标准&quot;&gt;&lt;a href=&quot;#四大-Web-组件标准&quot; class=&quot;headerlink&quot; title=&quot;四大 Web 组件标准&quot;&gt;&lt;/a&gt;四大 Web 组件标准&lt;/h4&gt;&lt;p&gt;四大 Web 组件标准分别为：HTML Template、Shadow DOM、Custom Elements 和 HTML Imports。实际上其中一个已经被废弃了，所以变成“三大”了。&lt;/p&gt;
    
    </summary>
    
      <category term="html" scheme="http://onlyH.github.io/categories/html/"/>
    
    
      <category term="语言" scheme="http://onlyH.github.io/tags/%E8%AF%AD%E8%A8%80/"/>
    
      <category term="理解" scheme="http://onlyH.github.io/tags/%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
</feed>
